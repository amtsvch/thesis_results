// --------------------------------------------------------- Public Methods
/**
 * <p>Add the set of Rule instances defined in this RuleSet to the
 * specified <code>Digester</code> instance, associating them with
 * our namespace URI (if any).  This method should only be called
 * by a Digester instance.</p>
 *
 * @param digester Digester instance to which the new Rule instances
 *  should be added.
 */
@Override
public void addRuleInstances(Digester digester) {
    digester.addRule(fullPrefix, new SetPublicIdRule("setPublicId"));
    digester.addRule(fullPrefix, new IgnoreAnnotationsRule());
    digester.addRule(fullPrefix, new VersionRule());
    // Required for both fragments and non-fragments
    digester.addRule(fullPrefix + "/absolute-ordering", absoluteOrdering);
    digester.addRule(fullPrefix + "/ordering", relativeOrdering);
    if (fragment) {
        // web-fragment.xml
        digester.addRule(fullPrefix + "/name", name);
        digester.addCallMethod(fullPrefix + "/ordering/after/name", "addAfterOrdering", 0);
        digester.addCallMethod(fullPrefix + "/ordering/after/others", "addAfterOrderingOthers");
        digester.addCallMethod(fullPrefix + "/ordering/before/name", "addBeforeOrdering", 0);
        digester.addCallMethod(fullPrefix + "/ordering/before/others", "addBeforeOrderingOthers");
    } else {
        // web.xml
        digester.addCallMethod(fullPrefix + "/absolute-ordering/name", "addAbsoluteOrdering", 0);
        digester.addCallMethod(fullPrefix + "/absolute-ordering/others", "addAbsoluteOrderingOthers");
        digester.addRule(fullPrefix + "/deny-uncovered-http-methods", new SetDenyUncoveredHttpMethodsRule());
        digester.addCallMethod(fullPrefix + "/request-character-encoding", "setRequestCharacterEncoding", 0);
        digester.addCallMethod(fullPrefix + "/response-character-encoding", "setResponseCharacterEncoding", 0);
    }
    digester.addCallMethod(fullPrefix + "/context-param", "addContextParam", 2);
    digester.addCallParam(fullPrefix + "/context-param/param-name", 0);
    digester.addCallParam(fullPrefix + "/context-param/param-value", 1);
    digester.addCallMethod(fullPrefix + "/display-name", "setDisplayName", 0);
    digester.addRule(fullPrefix + "/distributable", new SetDistributableRule());
    configureNamingRules(digester);
    digester.addObjectCreate(fullPrefix + "/error-page", "org.apache.tomcat.util.descriptor.web.ErrorPage");
    digester.addSetNext(fullPrefix + "/error-page", "addErrorPage", "org.apache.tomcat.util.descriptor.web.ErrorPage");
    digester.addCallMethod(fullPrefix + "/error-page/error-code", "setErrorCode", 0);
    digester.addCallMethod(fullPrefix + "/error-page/exception-type", "setExceptionType", 0);
    digester.addCallMethod(fullPrefix + "/error-page/location", "setLocation", 0);
    digester.addObjectCreate(fullPrefix + "/filter", "org.apache.tomcat.util.descriptor.web.FilterDef");
    digester.addSetNext(fullPrefix + "/filter", "addFilter", "org.apache.tomcat.util.descriptor.web.FilterDef");
    digester.addCallMethod(fullPrefix + "/filter/description", "setDescription", 0);
    digester.addCallMethod(fullPrefix + "/filter/display-name", "setDisplayName", 0);
    digester.addCallMethod(fullPrefix + "/filter/filter-class", "setFilterClass", 0);
    digester.addCallMethod(fullPrefix + "/filter/filter-name", "setFilterName", 0);
    digester.addCallMethod(fullPrefix + "/filter/icon/large-icon", "setLargeIcon", 0);
    digester.addCallMethod(fullPrefix + "/filter/icon/small-icon", "setSmallIcon", 0);
    digester.addCallMethod(fullPrefix + "/filter/async-supported", "setAsyncSupported", 0);
    digester.addCallMethod(fullPrefix + "/filter/init-param", "addInitParameter", 2);
    digester.addCallParam(fullPrefix + "/filter/init-param/param-name", 0);
    digester.addCallParam(fullPrefix + "/filter/init-param/param-value", 1);
    digester.addObjectCreate(fullPrefix + "/filter-mapping", "org.apache.tomcat.util.descriptor.web.FilterMap");
    digester.addSetNext(fullPrefix + "/filter-mapping", "addFilterMapping", "org.apache.tomcat.util.descriptor.web.FilterMap");
    digester.addCallMethod(fullPrefix + "/filter-mapping/filter-name", "setFilterName", 0);
    digester.addCallMethod(fullPrefix + "/filter-mapping/servlet-name", "addServletName", 0);
    digester.addCallMethod(fullPrefix + "/filter-mapping/url-pattern", "addURLPattern", 0);
    digester.addCallMethod(fullPrefix + "/filter-mapping/dispatcher", "setDispatcher", 0);
    digester.addCallMethod(fullPrefix + "/listener/listener-class", "addListener", 0);
    digester.addRule(fullPrefix + "/jsp-config", jspConfig);
    digester.addObjectCreate(fullPrefix + "/jsp-config/jsp-property-group", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup");
    digester.addSetNext(fullPrefix + "/jsp-config/jsp-property-group", "addJspPropertyGroup", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup");
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/deferred-syntax-allowed-as-literal", "setDeferredSyntax", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/el-ignored", "setElIgnored", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/include-coda", "addIncludeCoda", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/include-prelude", "addIncludePrelude", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/is-xml", "setIsXml", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/page-encoding", "setPageEncoding", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/scripting-invalid", "setScriptingInvalid", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/trim-directive-whitespaces", "setTrimWhitespace", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/url-pattern", "addUrlPattern", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/default-content-type", "setDefaultContentType", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/buffer", "setBuffer", 0);
    digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/error-on-undeclared-namespace", "setErrorOnUndeclaredNamespace", 0);
    digester.addRule(fullPrefix + "/login-config", loginConfig);
    digester.addObjectCreate(fullPrefix + "/login-config", "org.apache.tomcat.util.descriptor.web.LoginConfig");
    digester.addSetNext(fullPrefix + "/login-config", "setLoginConfig", "org.apache.tomcat.util.descriptor.web.LoginConfig");
    digester.addCallMethod(fullPrefix + "/login-config/auth-method", "setAuthMethod", 0);
    digester.addCallMethod(fullPrefix + "/login-config/realm-name", "setRealmName", 0);
    digester.addCallMethod(fullPrefix + "/login-config/form-login-config/form-error-page", "setErrorPage", 0);
    digester.addCallMethod(fullPrefix + "/login-config/form-login-config/form-login-page", "setLoginPage", 0);
    digester.addCallMethod(fullPrefix + "/mime-mapping", "addMimeMapping", 2);
    digester.addCallParam(fullPrefix + "/mime-mapping/extension", 0);
    digester.addCallParam(fullPrefix + "/mime-mapping/mime-type", 1);
    digester.addObjectCreate(fullPrefix + "/security-constraint", "org.apache.tomcat.util.descriptor.web.SecurityConstraint");
    digester.addSetNext(fullPrefix + "/security-constraint", "addSecurityConstraint", "org.apache.tomcat.util.descriptor.web.SecurityConstraint");
    digester.addRule(fullPrefix + "/security-constraint/auth-constraint", new SetAuthConstraintRule());
    digester.addCallMethod(fullPrefix + "/security-constraint/auth-constraint/role-name", "addAuthRole", 0);
    digester.addCallMethod(fullPrefix + "/security-constraint/display-name", "setDisplayName", 0);
    digester.addCallMethod(fullPrefix + "/security-constraint/user-data-constraint/transport-guarantee", "setUserConstraint", 0);
    digester.addObjectCreate(fullPrefix + "/security-constraint/web-resource-collection", "org.apache.tomcat.util.descriptor.web.SecurityCollection");
    digester.addSetNext(fullPrefix + "/security-constraint/web-resource-collection", "addCollection", "org.apache.tomcat.util.descriptor.web.SecurityCollection");
    digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/http-method", "addMethod", 0);
    digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/http-method-omission", "addOmittedMethod", 0);
    digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/url-pattern", "addPattern", 0);
    digester.addCallMethod(fullPrefix + "/security-constraint/web-resource-collection/web-resource-name", "setName", 0);
    digester.addCallMethod(fullPrefix + "/security-role/role-name", "addSecurityRole", 0);
    digester.addRule(fullPrefix + "/servlet", new ServletDefCreateRule());
    digester.addSetNext(fullPrefix + "/servlet", "addServlet", "org.apache.tomcat.util.descriptor.web.ServletDef");
    digester.addCallMethod(fullPrefix + "/servlet/init-param", "addInitParameter", 2);
    digester.addCallParam(fullPrefix + "/servlet/init-param/param-name", 0);
    digester.addCallParam(fullPrefix + "/servlet/init-param/param-value", 1);
    digester.addCallMethod(fullPrefix + "/servlet/jsp-file", "setJspFile", 0);
    digester.addCallMethod(fullPrefix + "/servlet/load-on-startup", "setLoadOnStartup", 0);
    digester.addCallMethod(fullPrefix + "/servlet/run-as/role-name", "setRunAs", 0);
    digester.addObjectCreate(fullPrefix + "/servlet/security-role-ref", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef");
    digester.addSetNext(fullPrefix + "/servlet/security-role-ref", "addSecurityRoleRef", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef");
    digester.addCallMethod(fullPrefix + "/servlet/security-role-ref/role-link", "setLink", 0);
    digester.addCallMethod(fullPrefix + "/servlet/security-role-ref/role-name", "setName", 0);
    digester.addCallMethod(fullPrefix + "/servlet/servlet-class", "setServletClass", 0);
    digester.addCallMethod(fullPrefix + "/servlet/servlet-name", "setServletName", 0);
    digester.addObjectCreate(fullPrefix + "/servlet/multipart-config", "org.apache.tomcat.util.descriptor.web.MultipartDef");
    digester.addSetNext(fullPrefix + "/servlet/multipart-config", "setMultipartDef", "org.apache.tomcat.util.descriptor.web.MultipartDef");
    digester.addCallMethod(fullPrefix + "/servlet/multipart-config/location", "setLocation", 0);
    digester.addCallMethod(fullPrefix + "/servlet/multipart-config/max-file-size", "setMaxFileSize", 0);
    digester.addCallMethod(fullPrefix + "/servlet/multipart-config/max-request-size", "setMaxRequestSize", 0);
    digester.addCallMethod(fullPrefix + "/servlet/multipart-config/file-size-threshold", "setFileSizeThreshold", 0);
    digester.addCallMethod(fullPrefix + "/servlet/async-supported", "setAsyncSupported", 0);
    digester.addCallMethod(fullPrefix + "/servlet/enabled", "setEnabled", 0);
    digester.addRule(fullPrefix + "/servlet-mapping", new CallMethodMultiRule("addServletMapping", 2, 0));
    digester.addCallParam(fullPrefix + "/servlet-mapping/servlet-name", 1);
    digester.addRule(fullPrefix + "/servlet-mapping/url-pattern", new CallParamMultiRule(0));
    digester.addRule(fullPrefix + "/session-config", sessionConfig);
    digester.addObjectCreate(fullPrefix + "/session-config", "org.apache.tomcat.util.descriptor.web.SessionConfig");
    digester.addSetNext(fullPrefix + "/session-config", "setSessionConfig", "org.apache.tomcat.util.descriptor.web.SessionConfig");
    digester.addCallMethod(fullPrefix + "/session-config/session-timeout", "setSessionTimeout", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/name", "setCookieName", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/domain", "setCookieDomain", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/path", "setCookiePath", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/comment", "setCookieComment", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/http-only", "setCookieHttpOnly", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/secure", "setCookieSecure", 0);
    digester.addCallMethod(fullPrefix + "/session-config/cookie-config/max-age", "setCookieMaxAge", 0);
    digester.addCallMethod(fullPrefix + "/session-config/tracking-mode", "addSessionTrackingMode", 0);
    // Taglibs pre Servlet 2.4
    digester.addRule(fullPrefix + "/taglib", new TaglibLocationRule(false));
    digester.addCallMethod(fullPrefix + "/taglib", "addTaglib", 2);
    digester.addCallParam(fullPrefix + "/taglib/taglib-location", 1);
    digester.addCallParam(fullPrefix + "/taglib/taglib-uri", 0);
    // Taglibs Servlet 2.4 onwards
    digester.addRule(fullPrefix + "/jsp-config/taglib", new TaglibLocationRule(true));
    digester.addCallMethod(fullPrefix + "/jsp-config/taglib", "addTaglib", 2);
    digester.addCallParam(fullPrefix + "/jsp-config/taglib/taglib-location", 1);
    digester.addCallParam(fullPrefix + "/jsp-config/taglib/taglib-uri", 0);
    digester.addCallMethod(fullPrefix + "/welcome-file-list/welcome-file", "addWelcomeFile", 0);
    digester.addCallMethod(fullPrefix + "/locale-encoding-mapping-list/locale-encoding-mapping", "addLocaleEncodingMapping", 2);
    digester.addCallParam(fullPrefix + "/locale-encoding-mapping-list/locale-encoding-mapping/locale", 0);
    digester.addCallParam(fullPrefix + "/locale-encoding-mapping-list/locale-encoding-mapping/encoding", 1);
    digester.addRule(fullPrefix + "/post-construct", new LifecycleCallbackRule("addPostConstructMethods", 2, true));
    digester.addCallParam(fullPrefix + "/post-construct/lifecycle-callback-class", 0);
    digester.addCallParam(fullPrefix + "/post-construct/lifecycle-callback-method", 1);
    digester.addRule(fullPrefix + "/pre-destroy", new LifecycleCallbackRule("addPreDestroyMethods", 2, false));
    digester.addCallParam(fullPrefix + "/pre-destroy/lifecycle-callback-class", 0);
    digester.addCallParam(fullPrefix + "/pre-destroy/lifecycle-callback-method", 1);
}