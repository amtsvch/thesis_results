/**
 * URL Encode string, using a specified encoding.
 *
 * @param s string to be encoded
 * @param start the beginning index, inclusive
 * @param end the ending index, exclusive
 *
 * @return A new CharChunk contained the URL encoded string
 *
 * @throws IOException If an I/O error occurs
 */
public CharChunk encodeURL(String s, int start, int end) throws IOException {
    if (c2b == null) {
        // small enough.
        bb = new ByteChunk(8);
        // small enough.
        cb = new CharChunk(2);
        // small enough.
        output = new CharChunk(64);
        c2b = new C2BConverter(StandardCharsets.UTF_8);
    } else {
        bb.recycle();
        cb.recycle();
        output.recycle();
    }
    for (int i = start; i < end; i++) {
        char c = s.charAt(i);
        if (safeChars.get(c)) {
            output.append(c);
        } else {
            cb.append(c);
            c2b.convert(cb, bb);
            // "surrogate" - UTF is _not_ 16 bit, but 21 !!!!
            // ( while UCS is 31 ). Amazing...
            if (c >= 0xD800 && c <= 0xDBFF) {
                if ((i + 1) < end) {
                    char d = s.charAt(i + 1);
                    if (d >= 0xDC00 && d <= 0xDFFF) {
                        cb.append(d);
                        c2b.convert(cb, bb);
                        i++;
                    }
                }
            }
            urlEncode(output, bb);
            cb.recycle();
            bb.recycle();
        }
    }
    return output;
}