/**                                                                                                    /**                                                                                                 
* Creates the instance of the parser and processes the provided buffer. The                            * Creates the instance of the parser and processes the provided buffer. The                         
* buffer position and limit will be modified during the execution of this                              * buffer position and limit will be modified during the execution of this                           
* method but they will be returned to the original values before the method                            * method but they will be returned to the original values before the method                         
* exits.                                                                                               * exits.                                                                                            
*                                                                                                      *                                                                                                   
* @param netInBuffer The buffer containing the TLS data to process                                     * @param netInBuffer The buffer containing the TLS data to process                                  
* @throws IOException If the client hello message is malformed                                         * @throws IOException If the client hello message is malformed                                      
*/                                                                                                     */                                                                                                  
public TLSClientHelloExtractor(ByteBuffer netInBuffer) throws IOException {                            public TLSClientHelloExtractor(ByteBuffer netInBuffer) throws IOException {                         
// Buffer is in write mode at this point. Record the current position so                               // Buffer is in write mode at this point. Record the current position so                            
// the buffer state can be restored at the end of this method.                                         // the buffer state can be restored at the end of this method.                                      
int pos = netInBuffer.position();                                                                      int pos = netInBuffer.position();                                                                   
int limit = netInBuffer.limit();                                                                       int limit = netInBuffer.limit();                                                                    
ExtractorResult result = ExtractorResult.NOT_PRESENT;                                                  ExtractorResult result = ExtractorResult.NOT_PRESENT;                                               
List&lt;Cipher&gt; clientRequestedCiphers = new ArrayList&lt;&gt;();                                   List&lt;Cipher&gt; clientRequestedCiphers = new ArrayList&lt;&gt;();                                
                                                                                                     | List&lt;String&gt; clientRequestedCipherNames = new ArrayList&lt;&gt;();                            
List&lt;String&gt; clientRequestedApplicationProtocols = new ArrayList&lt;&gt;();                      List&lt;String&gt; clientRequestedApplicationProtocols = new ArrayList&lt;&gt;();                   
                                                                                                     | List&lt;String&gt; clientRequestedProtocols = new ArrayList&lt;&gt;();                              
String sniValue = null;                                                                                String sniValue = null;                                                                             
try {                                                                                                  try {                                                                                               
// Switch to read mode.                                                                                // Switch to read mode.                                                                             
netInBuffer.flip();                                                                                    netInBuffer.flip();                                                                                 
// A complete TLS record header is required before we can figure out                                   // A complete TLS record header is required before we can figure out                                
// how many bytes there are in the record.                                                             // how many bytes there are in the record.                                                          
if (!isAvailable(netInBuffer, TLS_RECORD_HEADER_LEN)) {                                                if (!isAvailable(netInBuffer, TLS_RECORD_HEADER_LEN)) {                                             
result = handleIncompleteRead(netInBuffer);                                                            result = handleIncompleteRead(netInBuffer);                                                         
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
if (!isTLSHandshake(netInBuffer)) {                                                                    if (!isTLSHandshake(netInBuffer)) {                                                                 
// Is the client trying to use clear text HTTP?                                                        // Is the client trying to use clear text HTTP?                                                     
if (isHttp(netInBuffer)) {                                                                             if (isHttp(netInBuffer)) {                                                                          
result = ExtractorResult.NON_SECURE;                                                                   result = ExtractorResult.NON_SECURE;                                                                
}                                                                                                      }                                                                                                   
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
if (!isAllRecordAvailable(netInBuffer)) {                                                              if (!isAllRecordAvailable(netInBuffer)) {                                                           
result = handleIncompleteRead(netInBuffer);                                                            result = handleIncompleteRead(netInBuffer);                                                         
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
if (!isClientHello(netInBuffer)) {                                                                     if (!isClientHello(netInBuffer)) {                                                                  
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
if (!isAllClientHelloAvailable(netInBuffer)) {                                                         if (!isAllClientHelloAvailable(netInBuffer)) {                                                      
// Client hello didn't fit into single TLS record.                                                     // Client hello didn't fit into single TLS record.                                                  
// Treat this as not present.                                                                          // Treat this as not present.                                                                       
log.warn(sm.getString("sniExtractor.clientHelloTooBig"));                                              log.warn(sm.getString("sniExtractor.clientHelloTooBig"));                                           
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Protocol Version                                                                                    // Protocol Version                                                                                 
skipBytes(netInBuffer, 2);                                                                           | String legacyVersion = readProtocol(netInBuffer);                                                   
// Random                                                                                              // Random                                                                                           
skipBytes(netInBuffer, 32);                                                                            skipBytes(netInBuffer, 32);                                                                         
// Session ID (single byte for length)                                                                 // Session ID (single byte for length)                                                              
skipBytes(netInBuffer, (netInBuffer.get() & 0xFF));                                                    skipBytes(netInBuffer, (netInBuffer.get() & 0xFF));                                                 
// Cipher Suites                                                                                       // Cipher Suites                                                                                    
// (2 bytes for length, each cipher ID is 2 bytes)                                                     // (2 bytes for length, each cipher ID is 2 bytes)                                                  
int cipherCount = netInBuffer.getChar() / 2;                                                           int cipherCount = netInBuffer.getChar() / 2;                                                        
for (int i = 0; i &lt; cipherCount; i++) {                                                             for (int i = 0; i &lt; cipherCount; i++) {                                                          
int cipherId = netInBuffer.getChar();                                                                | char cipherId = netInBuffer.getChar();                                                              
clientRequestedCiphers.add(Cipher.valueOf(cipherId));                                                | Cipher c = Cipher.valueOf(cipherId);                                                                
                                                                                                     | // Some clients transmit grease values (see RFC 8701)                                               
                                                                                                     | if (c == null) {                                                                                    
                                                                                                     | clientRequestedCipherNames.add("Unknown(0x" + HexUtils.toHexString(cipherId) + ")");                
                                                                                                     | } else {                                                                                            
                                                                                                     | clientRequestedCiphers.add(c);                                                                      
                                                                                                     | clientRequestedCipherNames.add(c.name());                                                           
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
// Compression methods (single byte for length)                                                        // Compression methods (single byte for length)                                                     
skipBytes(netInBuffer, (netInBuffer.get() & 0xFF));                                                    skipBytes(netInBuffer, (netInBuffer.get() & 0xFF));                                                 
if (!netInBuffer.hasRemaining()) {                                                                     if (!netInBuffer.hasRemaining()) {                                                                  
// No more data means no extensions present                                                            // No more data means no extensions present                                                         
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Extension length                                                                                    // Extension length                                                                                 
skipBytes(netInBuffer, 2);                                                                             skipBytes(netInBuffer, 2);                                                                          
// Read the extensions until we run out of data or find the data                                       // Read the extensions until we run out of data or find the data                                    
// we need                                                                                             // we need                                                                                          
while (netInBuffer.hasRemaining() && (sniValue == null || clientRequestedApplicationProtocols.size() | while (netInBuffer.hasRemaining() && (sniValue == null || clientRequestedApplicationProtocols.isEmpt
// Extension type is two byte                                                                          // Extension type is two byte                                                                       
char extensionType = netInBuffer.getChar();                                                            char extensionType = netInBuffer.getChar();                                                         
// Extension size is another two bytes                                                                 // Extension size is another two bytes                                                              
char extensionDataSize = netInBuffer.getChar();                                                        char extensionDataSize = netInBuffer.getChar();                                                     
switch(extensionType) {                                                                                switch(extensionType) {                                                                             
case TLS_EXTENSION_SERVER_NAME:                                                                        case TLS_EXTENSION_SERVER_NAME:                                                                     
{                                                                                                      {                                                                                                   
sniValue = readSniExtension(netInBuffer);                                                              sniValue = readSniExtension(netInBuffer);                                                           
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case TLS_EXTENSION_ALPN:                                                                               case TLS_EXTENSION_ALPN:                                                                            
readAlpnExtension(netInBuffer, clientRequestedApplicationProtocols);                                   readAlpnExtension(netInBuffer, clientRequestedApplicationProtocols);                                
break;                                                                                                 break;                                                                                              
                                                                                                     | case TLS_EXTENSION_SUPPORTED_VERSION:                                                               
                                                                                                     | readSupportedVersions(netInBuffer, clientRequestedProtocols);                                       
                                                                                                     | break;                                                                                              
default:                                                                                               default:                                                                                            
{                                                                                                      {                                                                                                   
skipBytes(netInBuffer, extensionDataSize);                                                             skipBytes(netInBuffer, extensionDataSize);                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | if (clientRequestedProtocols.isEmpty()) {                                                           
                                                                                                     | clientRequestedProtocols.add(legacyVersion);                                                        
                                                                                                     | }                                                                                                   
result = ExtractorResult.COMPLETE;                                                                     result = ExtractorResult.COMPLETE;                                                                  
} catch (BufferUnderflowException | IllegalArgumentException e) {                                      } catch (BufferUnderflowException | IllegalArgumentException e) {                                   
throw new IOException(sm.getString("sniExtractor.clientHelloInvalid"), e);                             throw new IOException(sm.getString("sniExtractor.clientHelloInvalid"), e);                          
} finally {                                                                                            } finally {                                                                                         
this.result = result;                                                                                  this.result = result;                                                                               
this.clientRequestedCiphers = clientRequestedCiphers;                                                  this.clientRequestedCiphers = clientRequestedCiphers;                                               
                                                                                                     | this.clientRequestedCipherNames = clientRequestedCipherNames;                                       
this.clientRequestedApplicationProtocols = clientRequestedApplicationProtocols;                        this.clientRequestedApplicationProtocols = clientRequestedApplicationProtocols;                     
this.sniValue = sniValue;                                                                              this.sniValue = sniValue;                                                                           
                                                                                                     | this.clientRequestedProtocols = clientRequestedProtocols;                                           
// Whatever happens, return the buffer to its original state                                           // Whatever happens, return the buffer to its original state                                        
netInBuffer.limit(limit);                                                                              netInBuffer.limit(limit);                                                                           
netInBuffer.position(pos);                                                                             netInBuffer.position(pos);                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
