public void parse(Map&lt;String, RewriteMap&gt; maps) {                                                public void parse(Map&lt;String, RewriteMap&gt; maps) {                                             
// Parse the substitution                                                                              // Parse the substitution                                                                           
if (!"-".equals(substitutionString)) {                                                                 if (!"-".equals(substitutionString)) {                                                              
substitution = new Substitution();                                                                     substitution = new Substitution();                                                                  
substitution.setSub(substitutionString);                                                               substitution.setSub(substitutionString);                                                            
substitution.parse(maps);                                                                              substitution.parse(maps);                                                                           
substitution.setEscapeBackReferences(isEscapeBackReferences());                                        substitution.setEscapeBackReferences(isEscapeBackReferences());                                     
}                                                                                                      }                                                                                                   
// Parse the pattern                                                                                   // Parse the pattern                                                                                
if (patternString.startsWith("!")) {                                                                   if (patternString.startsWith("!")) {                                                                
positive = false;                                                                                      positive = false;                                                                                   
patternString = patternString.substring(1);                                                            patternString = patternString.substring(1);                                                         
}                                                                                                      }                                                                                                   
int flags = 0;                                                                                         int flags = 0;                                                                                      
if (isNocase()) {                                                                                      if (isNocase()) {                                                                                   
flags |= Pattern.CASE_INSENSITIVE;                                                                     flags |= Pattern.CASE_INSENSITIVE;                                                                  
}                                                                                                      }                                                                                                   
Pattern.compile(patternString, flags);                                                                 Pattern.compile(patternString, flags);                                                              
// Parse conditions                                                                                    // Parse conditions                                                                                 
for (RewriteCond condition : conditions) {                                                             for (RewriteCond condition : conditions) {                                                          
condition.parse(maps);                                                                                 condition.parse(maps);                                                                              
}                                                                                                      }                                                                                                   
// Parse flag which have substitution values                                                           // Parse flag which have substitution values                                                        
if (isEnv()) {                                                                                         if (isEnv()) {                                                                                      
for (String s : envValue) {                                                                            for (String s : envValue) {                                                                         
Substitution newEnvSubstitution = new Substitution();                                                  Substitution newEnvSubstitution = new Substitution();                                               
newEnvSubstitution.setSub(s);                                                                          newEnvSubstitution.setSub(s);                                                                       
newEnvSubstitution.parse(maps);                                                                        newEnvSubstitution.parse(maps);                                                                     
envSubstitution.add(newEnvSubstitution);                                                               envSubstitution.add(newEnvSubstitution);                                                            
envResult.add(new ThreadLocal&lt;String&gt;());                                                      | envResult.add(new ThreadLocal&lt;&gt;());                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (isCookie()) {                                                                                      if (isCookie()) {                                                                                   
cookieSubstitution = new Substitution();                                                               cookieSubstitution = new Substitution();                                                            
cookieSubstitution.setSub(cookieValue);                                                                cookieSubstitution.setSub(cookieValue);                                                             
cookieSubstitution.parse(maps);                                                                        cookieSubstitution.parse(maps);                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
