/**
 * Return the Principal associated with the specified username and
 * credentials, if there is one; otherwise return <code>null</code>.
 *
 * @param username Username of the Principal to look up
 * @param credentials Password or other credentials to use in
 *  authenticating this username
 * @return the associated principal, or <code>null</code> if there is none.
 */
@Override
public Principal authenticate(String username, String credentials) {
    // No user or no credentials
    // Can't possibly authenticate, don't bother doing anything.
    if (username == null || credentials == null) {
        if (containerLog.isTraceEnabled()) {
            containerLog.trace(sm.getString("realmBase.authenticateFailure", username));
        }
        return null;
    }
    // Look up the user's credentials
    String serverCredentials = getPassword(username);
    if (serverCredentials == null) {
        // User was not found
        // Waste a bit of time as not to reveal that the user does not exist.
        getCredentialHandler().mutate(credentials);
        if (containerLog.isTraceEnabled()) {
            containerLog.trace(sm.getString("realmBase.authenticateFailure", username));
        }
        return null;
    }
    boolean validated = getCredentialHandler().matches(credentials, serverCredentials);
    if (validated) {
        if (containerLog.isTraceEnabled()) {
            containerLog.trace(sm.getString("realmBase.authenticateSuccess", username));
        }
        return getPrincipal(username);
    } else {
        if (containerLog.isTraceEnabled()) {
            containerLog.trace(sm.getString("realmBase.authenticateFailure", username));
        }
        return null;
    }
}