/**
 * Construct a new Principal, associated with the specified Realm, for the
 * specified username, with the specified role names (as Strings).
 *
 * @param name The username of the user represented by this Principal
 * @param roles List of roles (must be Strings) possessed by this user
 * @param userPrincipal - the principal to be returned from the request
 *        getUserPrincipal call if not null; if null, this will be returned
 * @param loginContext  - If provided, this will be used to log out the user
 *        at the appropriate time
 * @param gssCredential - If provided, the user's delegated credentials
 */
public GenericPrincipal(String name, List<String> roles, Principal userPrincipal, LoginContext loginContext, GSSCredential gssCredential) {
    super();
    this.name = name;
    this.userPrincipal = userPrincipal;
    if (roles == null) {
        this.roles = new String[0];
    } else {
        this.roles = roles.toArray(new String[0]);
        if (this.roles.length > 1) {
            Arrays.sort(this.roles);
        }
    }
    this.loginContext = loginContext;
    this.gssCredential = gssCredential;
}