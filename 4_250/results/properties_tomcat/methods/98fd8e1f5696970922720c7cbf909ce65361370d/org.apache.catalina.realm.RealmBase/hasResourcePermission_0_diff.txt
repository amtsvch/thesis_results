/**
 * Perform access control based on the specified authorization constraint.
 * Return <code>true</code> if this constraint is satisfied and processing
 * should continue, or <code>false</code> otherwise.
 *
 * @param request Request we are processing
 * @param response Response we are creating
 * @param constraints Security constraint we are enforcing
 * @param context The Context to which client of this class is attached.
 *
 * @exception IOException if an input/output error occurs
 */
@Override
public boolean hasResourcePermission(Request request, Response response, SecurityConstraint[] constraints, Context context) throws IOException {
    if (constraints == null || constraints.length == 0)
        return true;
    // Which user principal have we already authenticated?
    Principal principal = request.getPrincipal();
    boolean status = false;
    boolean denyfromall = false;
    for (SecurityConstraint constraint : constraints) {
        String[] roles;
        if (constraint.getAllRoles()) {
            // * means all roles defined in web.xml
            roles = request.getContext().findSecurityRoles();
        } else {
            roles = constraint.findAuthRoles();
        }
        if (roles == null)
            roles = new String[0];
        if (log.isDebugEnabled())
            log.debug("  Checking roles " + principal);
        if (constraint.getAuthenticatedUsers() && principal != null) {
            if (log.isDebugEnabled()) {
                log.debug("Passing all authenticated users");
            }
            status = true;
        } else if (roles.length == 0 && !constraint.getAllRoles() && !constraint.getAuthenticatedUsers()) {
            if (constraint.getAuthConstraint()) {
                if (log.isDebugEnabled()) {
                    log.debug("No roles");
                }
                // No listed roles means no access at all
                status = false;
                denyfromall = true;
                break;
            }
            if (log.isDebugEnabled()) {
                log.debug("Passing all access");
            }
            status = true;
        } else if (principal == null) {
            if (log.isDebugEnabled()) {
                log.debug("  No user authenticated, cannot grant access");
            }
        } else {
            for (String role : roles) {
                if (hasRole(request.getWrapper(), principal, role)) {
                    status = true;
                    if (log.isDebugEnabled()) {
                        log.debug("Role found:  " + role);
                    }
                } else if (log.isDebugEnabled()) {
                    log.debug("No role found:  " + role);
                }
            }
        }
    }
    if (!denyfromall && allRolesMode != AllRolesMode.STRICT_MODE && !status && principal != null) {
        if (log.isDebugEnabled()) {
            log.debug("Checking for all roles mode: " + allRolesMode);
        }
        // Check for an all roles(role-name="*")
        for (SecurityConstraint constraint : constraints) {
            String[] roles;
            // If the all roles mode exists, sets
            if (constraint.getAllRoles()) {
                if (allRolesMode == AllRolesMode.AUTH_ONLY_MODE) {
                    if (log.isDebugEnabled()) {
                        log.debug("Granting access for role-name=*, auth-only");
                    }
                    status = true;
                    break;
                }
                // For AllRolesMode.STRICT_AUTH_ONLY_MODE there must be zero roles
                roles = request.getContext().findSecurityRoles();
                if (roles.length == 0 && allRolesMode == AllRolesMode.STRICT_AUTH_ONLY_MODE) {
                    if (log.isDebugEnabled()) {
                        log.debug("Granting access for role-name=*, strict auth-only");
                    }
                    status = true;
                    break;
                }
            }
        }
    }
    // Return a "Forbidden" message denying access to this resource
    if (!status) {
        response.sendError(HttpServletResponse.SC_FORBIDDEN, sm.getString("realmBase.forbidden"));
    }
    return status;
}