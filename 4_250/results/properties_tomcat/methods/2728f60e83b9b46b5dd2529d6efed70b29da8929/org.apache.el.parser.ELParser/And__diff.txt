/*
 * And
 * For 'and' '&&', then Equality
 */
final public void And() throws ParseException {
    Equality();
    label_8: while (true) {
        switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AND0:
            case AND1:
                ;
                break;
            default:
                jj_la1[12] = jj_gen;
                break label_8;
        }
        switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AND0:
                jj_consume_token(AND0);
                break;
            case AND1:
                jj_consume_token(AND1);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        AstAnd jjtn001 = new AstAnd(JJTAND);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Equality();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, 2);
            }
        }
    }
}