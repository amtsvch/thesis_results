/**
 * Process notification of the start of an XML element being reached.
 *
 * @param namespaceURI The Namespace URI, or the empty string if the element
 *   has no Namespace URI or if Namespace processing is not being performed.
 * @param localName The local name (without prefix), or the empty
 *   string if Namespace processing is not being performed.
 * @param qName The qualified name (with prefix), or the empty
 *   string if qualified names are not available.\
 * @param list The attributes attached to the element. If there are
 *   no attributes, it shall be an empty Attributes object.
 * @exception SAXException if a parsing error is to be reported
 */
@Override
public void startElement(String namespaceURI, String localName, String qName, Attributes list) throws SAXException {
    boolean debug = log.isDebugEnabled();
    if (saxLog.isDebugEnabled()) {
        saxLog.debug("startElement(" + namespaceURI + "," + localName + "," + qName + ")");
    }
    // Parse system properties
    list = updateAttributes(list);
    // Save the body text accumulated for our surrounding element
    bodyTexts.push(bodyText);
    bodyText = new StringBuilder();
    // the actual element name is either in localName or qName, depending
    // on whether the parser is namespace aware
    String name = localName;
    if ((name == null) || (name.length() < 1)) {
        name = qName;
    }
    // Compute the current matching rule
    StringBuilder sb = new StringBuilder(match);
    if (match.length() > 0) {
        sb.append('/');
    }
    sb.append(name);
    match = sb.toString();
    if (debug) {
        log.debug("  New match='" + match + "'");
    }
    // Fire "begin" events for all relevant rules
    List<Rule> rules = getRules().match(namespaceURI, match);
    matches.push(rules);
    if ((rules != null) && (rules.size() > 0)) {
        for (Rule value : rules) {
            try {
                Rule rule = value;
                if (debug) {
                    log.debug("  Fire begin() for " + rule);
                }
                rule.begin(namespaceURI, name, list);
            } catch (Exception e) {
                log.error(sm.getString("digester.error.begin"), e);
                throw createSAXException(e);
            } catch (Error e) {
                log.error(sm.getString("digester.error.begin"), e);
                throw e;
            }
        }
    } else {
        if (debug) {
            log.debug(sm.getString("digester.noRulesFound", match));
        }
    }
}