public void defineFunction(String prefix, String function, String className, String methodName) throws ClassNotFoundException, NoSuchMethodException {
    if (prefix == null || function == null || className == null || methodName == null) {
        throw new NullPointerException(Util.message(context, "elProcessor.defineFunctionNullParams"));
    }
    // Check the imports
    Class<?> clazz = context.getImportHandler().resolveClass(className);
    if (clazz == null) {
        clazz = Class.forName(className, true, Util.getContextClassLoader());
    }
    if (!Modifier.isPublic(clazz.getModifiers())) {
        throw new ClassNotFoundException(Util.message(context, "elProcessor.defineFunctionInvalidClass", className));
    }
    MethodSignature sig = new MethodSignature(context, methodName, className);
    if (function.length() == 0) {
        function = sig.getName();
    }
    // Only returns public methods. Java 9+ access is checked below.
    Method[] methods = clazz.getMethods();
    JreCompat jreCompat = JreCompat.getInstance();
    for (Method method : methods) {
        if (!Modifier.isStatic(method.getModifiers())) {
            continue;
        }
        if (!jreCompat.canAccess(null, method)) {
            continue;
        }
        if (method.getName().equals(sig.getName())) {
            if (sig.getParamTypeNames() == null) {
                // Only a name provided, no signature so map the first
                // method declared
                manager.mapFunction(prefix, function, method);
                return;
            }
            if (sig.getParamTypeNames().length != method.getParameterTypes().length) {
                continue;
            }
            if (sig.getParamTypeNames().length == 0) {
                manager.mapFunction(prefix, function, method);
                return;
            } else {
                Class<?>[] types = method.getParameterTypes();
                String[] typeNames = sig.getParamTypeNames();
                if (types.length == typeNames.length) {
                    boolean match = true;
                    for (int i = 0; i < types.length; i++) {
                        if (i == types.length - 1 && method.isVarArgs()) {
                            String typeName = typeNames[i];
                            if (typeName.endsWith("...")) {
                                typeName = typeName.substring(0, typeName.length() - 3);
                                if (!typeName.equals(types[i].getName())) {
                                    match = false;
                                }
                            } else {
                                match = false;
                            }
                        } else if (!types[i].getName().equals(typeNames[i])) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        manager.mapFunction(prefix, function, method);
                        return;
                    }
                }
            }
        }
    }
    throw new NoSuchMethodException(Util.message(context, "elProcessor.defineFunctionNoMethod", methodName, className));
}