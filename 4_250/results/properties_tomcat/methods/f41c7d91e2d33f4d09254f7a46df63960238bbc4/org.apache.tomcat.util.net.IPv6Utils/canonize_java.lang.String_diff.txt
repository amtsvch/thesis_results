/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Convert IPv6 address into RFC 5952 form.                                                    * &lt;p&gt;Convert IPv6 address into RFC 5952 form.                                                 
* E.g. 2001:db8:0:1:0:0:0:1 -&gt; 2001:db8:0:1::1&lt;/p&gt;                                            * E.g. 2001:db8:0:1:0:0:0:1 -&gt; 2001:db8:0:1::1&lt;/p&gt;                                         
*                                                                                                      *                                                                                                   
* &lt;p&gt;Method is null safe, and if IPv4 address or host name is passed to the                      * &lt;p&gt;Method is null safe, and if IPv4 address or host name is passed to the                   
* method it is returned without any processing.&lt;/p&gt;                                              * method it is returned without any processing.&lt;/p&gt;                                           
*                                                                                                      *                                                                                                   
* &lt;p&gt;Method also supports IPv4 in IPv6 (e.g. 0:0:0:0:0:ffff:192.0.2.1 -&gt;                      * &lt;p&gt;Method also supports IPv4 in IPv6 (e.g. 0:0:0:0:0:ffff:192.0.2.1 -&gt;                   
* ::ffff:192.0.2.1), and zone ID (e.g. fe80:0:0:0:f0f0:c0c0:1919:1234%4                                * ::ffff:192.0.2.1), and zone ID (e.g. fe80:0:0:0:f0f0:c0c0:1919:1234%4                             
* -&gt; fe80::f0f0:c0c0:1919:1234%4).&lt;/p&gt;                                                        * -&gt; fe80::f0f0:c0c0:1919:1234%4).&lt;/p&gt;                                                     
*                                                                                                      *                                                                                                   
* &lt;p&gt;The behaviour of this method is undefined if an invalid IPv6 address                        * &lt;p&gt;The behaviour of this method is undefined if an invalid IPv6 address                     
* is passed in as input.&lt;/p&gt;                                                                     * is passed in as input.&lt;/p&gt;                                                                  
*                                                                                                      *                                                                                                   
* @param ipv6Address String representing valid IPv6 address.                                           * @param ipv6Address String representing valid IPv6 address.                                        
* @return String representing IPv6 in canonical form.                                                  * @return String representing IPv6 in canonical form.                                               
* @throws IllegalArgumentException if IPv6 format is unacceptable.                                     * @throws IllegalArgumentException if IPv6 format is unacceptable.                                  
*/                                                                                                     */                                                                                                  
public static String canonize(String ipv6Address) throws IllegalArgumentException {                    public static String canonize(String ipv6Address) throws IllegalArgumentException {                 
if (ipv6Address == null) {                                                                             if (ipv6Address == null) {                                                                          
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// Definitely not an IPv6, return untouched input.                                                     // Definitely not an IPv6, return untouched input.                                                  
if (!mayBeIPv6Address(ipv6Address)) {                                                                  if (!mayBeIPv6Address(ipv6Address)) {                                                               
return ipv6Address;                                                                                    return ipv6Address;                                                                                 
}                                                                                                      }                                                                                                   
// Length without zone ID (%zone) or IPv4 address                                                      // Length without zone ID (%zone) or IPv4 address                                                   
int ipv6AddressLength = ipv6Address.length();                                                          int ipv6AddressLength = ipv6Address.length();                                                       
if (ipv6Address.contains(".")) {                                                                       if (ipv6Address.contains(".")) {                                                                    
// IPv4 in IPv6                                                                                        // IPv4 in IPv6                                                                                     
// e.g. 0:0:0:0:0:FFFF:127.0.0.1                                                                       // e.g. 0:0:0:0:0:FFFF:127.0.0.1                                                                    
int lastColonPos = ipv6Address.lastIndexOf(":");                                                     | int lastColonPos = ipv6Address.lastIndexOf(':');                                                    
int lastColonsPos = ipv6Address.lastIndexOf("::");                                                     int lastColonsPos = ipv6Address.lastIndexOf("::");                                                  
if (lastColonsPos &gt;= 0 && lastColonPos == lastColonsPos + 1) {                                      if (lastColonsPos &gt;= 0 && lastColonPos == lastColonsPos + 1) {                                   
/*                                                                                                     /*                                                                                                  
*  IPv6 part ends with two consecutive colons,                                                         *  IPv6 part ends with two consecutive colons,                                                      
*  last colon is part of IPv6 format.                                                                  *  last colon is part of IPv6 format.                                                               
*  e.g. ::127.0.0.1                                                                                    *  e.g. ::127.0.0.1                                                                                 
*/                                                                                                     */                                                                                                  
ipv6AddressLength = lastColonPos + 1;                                                                  ipv6AddressLength = lastColonPos + 1;                                                               
} else {                                                                                               } else {                                                                                            
/*                                                                                                     /*                                                                                                  
*  IPv6 part ends with only one colon,                                                                 *  IPv6 part ends with only one colon,                                                              
*  last colon is not part of IPv6 format.                                                              *  last colon is not part of IPv6 format.                                                           
*  e.g. ::FFFF:127.0.0.1                                                                               *  e.g. ::FFFF:127.0.0.1                                                                            
*/                                                                                                     */                                                                                                  
ipv6AddressLength = lastColonPos;                                                                      ipv6AddressLength = lastColonPos;                                                                   
}                                                                                                      }                                                                                                   
} else if (ipv6Address.contains("%")) {                                                                } else if (ipv6Address.contains("%")) {                                                             
// Zone ID                                                                                             // Zone ID                                                                                          
// e.g. fe80:0:0:0:f0f0:c0c0:1919:1234%4                                                               // e.g. fe80:0:0:0:f0f0:c0c0:1919:1234%4                                                            
ipv6AddressLength = ipv6Address.lastIndexOf("%");                                                    | ipv6AddressLength = ipv6Address.lastIndexOf('%');                                                   
}                                                                                                      }                                                                                                   
StringBuilder result = new StringBuilder();                                                            StringBuilder result = new StringBuilder();                                                         
char[][] groups = new char[MAX_NUMBER_OF_GROUPS][MAX_GROUP_LENGTH];                                    char[][] groups = new char[MAX_NUMBER_OF_GROUPS][MAX_GROUP_LENGTH];                                 
int groupCounter = 0;                                                                                  int groupCounter = 0;                                                                               
int charInGroupCounter = 0;                                                                            int charInGroupCounter = 0;                                                                         
// Index of the current zeroGroup, -1 means not found.                                                 // Index of the current zeroGroup, -1 means not found.                                              
int zeroGroupIndex = -1;                                                                               int zeroGroupIndex = -1;                                                                            
int zeroGroupLength = 0;                                                                               int zeroGroupLength = 0;                                                                            
// maximum length zero group, if there is more then one, then first one                                // maximum length zero group, if there is more then one, then first one                             
int maxZeroGroupIndex = -1;                                                                            int maxZeroGroupIndex = -1;                                                                         
int maxZeroGroupLength = 0;                                                                            int maxZeroGroupLength = 0;                                                                         
boolean isZero = true;                                                                                 boolean isZero = true;                                                                              
boolean groupStart = true;                                                                             boolean groupStart = true;                                                                          
/*                                                                                                     /*                                                                                                  
*  Two consecutive colons, initial expansion.                                                          *  Two consecutive colons, initial expansion.                                                       
*  e.g. 2001:db8:0:0:1::1 -&gt; 2001:db8:0:0:1:0:0:1                                                   *  e.g. 2001:db8:0:0:1::1 -&gt; 2001:db8:0:0:1:0:0:1                                                
*/                                                                                                     */                                                                                                  
StringBuilder expanded = new StringBuilder(ipv6Address);                                               StringBuilder expanded = new StringBuilder(ipv6Address);                                            
int colonsPos = ipv6Address.indexOf("::");                                                             int colonsPos = ipv6Address.indexOf("::");                                                          
int length = ipv6AddressLength;                                                                        int length = ipv6AddressLength;                                                                     
int change = 0;                                                                                        int change = 0;                                                                                     
if (colonsPos &gt;= 0 && colonsPos &lt; ipv6AddressLength - 1) {                                       if (colonsPos &gt;= 0 && colonsPos &lt; ipv6AddressLength - 1) {                                    
int colonCounter = 0;                                                                                  int colonCounter = 0;                                                                               
for (int i = 0; i &lt; ipv6AddressLength; i++) {                                                       for (int i = 0; i &lt; ipv6AddressLength; i++) {                                                    
if (ipv6Address.charAt(i) == ':') {                                                                    if (ipv6Address.charAt(i) == ':') {                                                                 
colonCounter++;                                                                                        colonCounter++;                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (colonsPos == 0) {                                                                                  if (colonsPos == 0) {                                                                               
expanded.insert(0, "0");                                                                               expanded.insert(0, "0");                                                                            
change = change + 1;                                                                                   change = change + 1;                                                                                
}                                                                                                      }                                                                                                   
for (int i = 0; i &lt; MAX_NUMBER_OF_GROUPS - colonCounter; i++) {                                     for (int i = 0; i &lt; MAX_NUMBER_OF_GROUPS - colonCounter; i++) {                                  
expanded.insert(colonsPos + 1, "0:");                                                                  expanded.insert(colonsPos + 1, "0:");                                                               
change = change + 2;                                                                                   change = change + 2;                                                                                
}                                                                                                      }                                                                                                   
if (colonsPos == ipv6AddressLength - 2) {                                                              if (colonsPos == ipv6AddressLength - 2) {                                                           
expanded.setCharAt(colonsPos + change + 1, '0');                                                       expanded.setCharAt(colonsPos + change + 1, '0');                                                    
} else {                                                                                               } else {                                                                                            
expanded.deleteCharAt(colonsPos + change + 1);                                                         expanded.deleteCharAt(colonsPos + change + 1);                                                      
change = change - 1;                                                                                   change = change - 1;                                                                                
}                                                                                                      }                                                                                                   
length = length + change;                                                                              length = length + change;                                                                           
}                                                                                                      }                                                                                                   
// Processing one char at the time                                                                     // Processing one char at the time                                                                  
for (int charCounter = 0; charCounter &lt; length; charCounter++) {                                    for (int charCounter = 0; charCounter &lt; length; charCounter++) {                                 
char c = expanded.charAt(charCounter);                                                                 char c = expanded.charAt(charCounter);                                                              
if (c &gt;= 'A' && c &lt;= 'F') {                                                                      if (c &gt;= 'A' && c &lt;= 'F') {                                                                   
c = (char) (c + 32);                                                                                   c = (char) (c + 32);                                                                                
}                                                                                                      }                                                                                                   
if (c != ':') {                                                                                        if (c != ':') {                                                                                     
groups[groupCounter][charInGroupCounter] = c;                                                          groups[groupCounter][charInGroupCounter] = c;                                                       
if (!(groupStart && c == '0')) {                                                                       if (!(groupStart && c == '0')) {                                                                    
++charInGroupCounter;                                                                                  ++charInGroupCounter;                                                                               
groupStart = false;                                                                                    groupStart = false;                                                                                 
}                                                                                                      }                                                                                                   
if (c != '0') {                                                                                        if (c != '0') {                                                                                     
isZero = false;                                                                                        isZero = false;                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (c == ':' || charCounter == (length - 1)) {                                                         if (c == ':' || charCounter == (length - 1)) {                                                      
// We reached end of current group                                                                     // We reached end of current group                                                                  
if (isZero) {                                                                                          if (isZero) {                                                                                       
++zeroGroupLength;                                                                                     ++zeroGroupLength;                                                                                  
if (zeroGroupIndex == -1) {                                                                            if (zeroGroupIndex == -1) {                                                                         
zeroGroupIndex = groupCounter;                                                                         zeroGroupIndex = groupCounter;                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (!isZero || charCounter == (length - 1)) {                                                          if (!isZero || charCounter == (length - 1)) {                                                       
// We reached end of zero group                                                                        // We reached end of zero group                                                                     
if (zeroGroupLength &gt; maxZeroGroupLength) {                                                         if (zeroGroupLength &gt; maxZeroGroupLength) {                                                      
maxZeroGroupLength = zeroGroupLength;                                                                  maxZeroGroupLength = zeroGroupLength;                                                               
maxZeroGroupIndex = zeroGroupIndex;                                                                    maxZeroGroupIndex = zeroGroupIndex;                                                                 
}                                                                                                      }                                                                                                   
zeroGroupLength = 0;                                                                                   zeroGroupLength = 0;                                                                                
zeroGroupIndex = -1;                                                                                   zeroGroupIndex = -1;                                                                                
}                                                                                                      }                                                                                                   
++groupCounter;                                                                                        ++groupCounter;                                                                                     
charInGroupCounter = 0;                                                                                charInGroupCounter = 0;                                                                             
isZero = true;                                                                                         isZero = true;                                                                                      
groupStart = true;                                                                                     groupStart = true;                                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
int numberOfGroups = groupCounter;                                                                     int numberOfGroups = groupCounter;                                                                  
// Output results                                                                                      // Output results                                                                                   
for (groupCounter = 0; groupCounter &lt; numberOfGroups; groupCounter++) {                             for (groupCounter = 0; groupCounter &lt; numberOfGroups; groupCounter++) {                          
if (maxZeroGroupLength &lt;= 1 || groupCounter &lt; maxZeroGroupIndex || groupCounter &gt;= maxZeroG   if (maxZeroGroupLength &lt;= 1 || groupCounter &lt; maxZeroGroupIndex || groupCounter &gt;= maxZeroG
for (int j = 0; j &lt; MAX_GROUP_LENGTH; j++) {                                                        for (int j = 0; j &lt; MAX_GROUP_LENGTH; j++) {                                                     
if (groups[groupCounter][j] != 0) {                                                                    if (groups[groupCounter][j] != 0) {                                                                 
result.append(groups[groupCounter][j]);                                                                result.append(groups[groupCounter][j]);                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (groupCounter &lt; (numberOfGroups - 1) && (groupCounter != maxZeroGroupIndex - 1 || maxZeroGroup   if (groupCounter &lt; (numberOfGroups - 1) && (groupCounter != maxZeroGroupIndex - 1 || maxZeroGroup
result.append(':');                                                                                    result.append(':');                                                                                 
}                                                                                                      }                                                                                                   
} else if (groupCounter == maxZeroGroupIndex) {                                                        } else if (groupCounter == maxZeroGroupIndex) {                                                     
result.append("::");                                                                                   result.append("::");                                                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Solve problem with three colons in IPv4 in IPv6 format                                              // Solve problem with three colons in IPv4 in IPv6 format                                           
// e.g. 0:0:0:0:0:0:127.0.0.1 -&gt; :::127.0.0.1 -&gt; ::127.0.0.1                                     // e.g. 0:0:0:0:0:0:127.0.0.1 -&gt; :::127.0.0.1 -&gt; ::127.0.0.1                                  
int resultLength = result.length();                                                                    int resultLength = result.length();                                                                 
if (result.charAt(resultLength - 1) == ':' && ipv6AddressLength &lt; ipv6Address.length() && ipv6Add   if (result.charAt(resultLength - 1) == ':' && ipv6AddressLength &lt; ipv6Address.length() && ipv6Add
result.delete(resultLength - 1, resultLength);                                                         result.delete(resultLength - 1, resultLength);                                                      
}                                                                                                      }                                                                                                   
/*                                                                                                     /*                                                                                                  
* Append IPv4 from IPv4-in-IPv6 format or Zone ID                                                      * Append IPv4 from IPv4-in-IPv6 format or Zone ID                                                   
*/                                                                                                     */                                                                                                  
for (int i = ipv6AddressLength; i &lt; ipv6Address.length(); i++) {                                    for (int i = ipv6AddressLength; i &lt; ipv6Address.length(); i++) {                                 
result.append(ipv6Address.charAt(i));                                                                  result.append(ipv6Address.charAt(i));                                                               
}                                                                                                      }                                                                                                   
return result.toString();                                                                              return result.toString();                                                                           
}                                                                                                      }                                                                                                   
