@Override
public boolean isAllowed(final String property) {
    final int portIdx = property.indexOf(";");
    final int port;
    final String nonPortPart;
    if (portIdx == -1) {
        if (getAddConnectorPort()) {
            log.error(sm.getString("remoteCidrValve.noPort"));
            return false;
        }
        port = -1;
        nonPortPart = property;
    } else {
        if (!getAddConnectorPort()) {
            log.error(sm.getString("remoteCidrValve.unexpectedPort"));
            return false;
        }
        nonPortPart = property.substring(0, portIdx);
        try {
            port = Integer.parseInt(property.substring(portIdx + 1));
        } catch (NumberFormatException e) {
            // This should be in the 'could never happen' category but handle it
            // to be safe.
            log.error(sm.getString("remoteCidrValve.noPort"), e);
            return false;
        }
    }
    final InetAddress addr;
    try {
        addr = InetAddress.getByName(nonPortPart);
    } catch (UnknownHostException e) {
        // This should be in the 'could never happen' category but handle it
        // to be safe.
        log.error(sm.getString("remoteCidrValve.noRemoteIp"), e);
        return false;
    }
    for (final NetMask nm : deny) {
        if (getAddConnectorPort()) {
            if (nm.matches(addr, port)) {
                return false;
            }
        } else {
            if (nm.matches(addr)) {
                return false;
            }
        }
    }
    for (final NetMask nm : allow) {
        if (getAddConnectorPort()) {
            if (nm.matches(addr, port)) {
                return true;
            }
        } else {
            if (nm.matches(addr)) {
                return true;
            }
        }
    }
    // Allow if deny is specified but allow isn't
    if (!deny.isEmpty() && allow.isEmpty()) {
        return true;
    }
    // Deny this request
    return false;
}