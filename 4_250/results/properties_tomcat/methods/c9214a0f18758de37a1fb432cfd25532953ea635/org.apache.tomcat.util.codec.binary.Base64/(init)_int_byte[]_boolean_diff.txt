/**                                                                                                    /**                                                                                                 
* Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.                * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.             
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* When encoding the line length and line separator are given in the constructor, and the encoding ta   * When encoding the line length and line separator are given in the constructor, and the encoding ta
* STANDARD_ENCODE_TABLE.                                                                               * STANDARD_ENCODE_TABLE.                                                                            
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the    * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the 
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* When decoding all variants are supported.                                                            * When decoding all variants are supported.                                                         
* &lt;/p&gt;                                                                                           * &lt;/p&gt;                                                                                        
*                                                                                                      *                                                                                                   
* @param lineLength                                                                                    * @param lineLength                                                                                 
*            Each line of encoded data will be at most of the given length (rounded down to nearest    *            Each line of encoded data will be at most of the given length (rounded down to nearest 
*            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ign   *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ign
*            decoding.                                                                                 *            decoding.                                                                              
* @param lineSeparator                                                                                 * @param lineSeparator                                                                              
*            Each line of encoded data will end with this sequence of bytes.                           *            Each line of encoded data will end with this sequence of bytes.                        
* @param urlSafe                                                                                       * @param urlSafe                                                                                    
*            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only appli   *            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only appli
*            operations. Decoding seamlessly handles both modes.                                       *            operations. Decoding seamlessly handles both modes.                                    
*            &lt;b&gt;Note: no padding is added when using the URL-safe alphabet.&lt;/b&gt;            *            &lt;b&gt;Note: no padding is added when using the URL-safe alphabet.&lt;/b&gt;         
* @throws IllegalArgumentException                                                                     * @throws IllegalArgumentException                                                                  
*             Thrown when the {@code lineSeparator} contains Base64 characters.                        *             Thrown when the {@code lineSeparator} contains Base64 characters.                     
* @since 1.4                                                                                           * @since 1.4                                                                                        
*/                                                                                                     */                                                                                                  
public Base64(final int lineLength, final byte[] lineSeparator, final boolean urlSafe) {               public Base64(final int lineLength, final byte[] lineSeparator, final boolean urlSafe) {            
super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : li   super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : li
// Needs to be set early to avoid NPE during call to containsAlphabetOrPad() below                     // Needs to be set early to avoid NPE during call to containsAlphabetOrPad() below                  
this.decodeTable = urlSafe ? URL_SAFE_DECODE_TABLE : STANDARD_DECODE_TABLE;                            this.decodeTable = urlSafe ? URL_SAFE_DECODE_TABLE : STANDARD_DECODE_TABLE;                         
// TODO could be simplified if there is no requirement to reject invalid line sep when length &lt;=0   // TODO could be simplified if there is no requirement to reject invalid line sep when length &lt;=0
// @see test case Base64Test.testConstructors()                                                        // @see test case Base64Test.testConstructors()                                                     
if (lineSeparator != null) {                                                                           if (lineSeparator != null) {                                                                        
if (containsAlphabetOrPad(lineSeparator)) {                                                            if (containsAlphabetOrPad(lineSeparator)) {                                                         
final String sep = StringUtils.newStringUtf8(lineSeparator);                                           final String sep = StringUtils.newStringUtf8(lineSeparator);                                        
throw new IllegalArgumentException(sm.getString("base64.lineSeparator", sep));                         throw new IllegalArgumentException(sm.getString("base64.lineSeparator", sep));                      
}                                                                                                      }                                                                                                   
if (lineLength &gt; 0) {                                                                               if (lineLength &gt; 0) {                                                                            
// null line-sep forces no chunking rather than throwing IAE                                           // null line-sep forces no chunking rather than throwing IAE                                        
this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;                                      this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;                                   
this.lineSeparator = new byte[lineSeparator.length];                                                 | this.lineSeparator = lineSeparator.clone();                                                         
System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);                     |                                                                                                     
} else {                                                                                               } else {                                                                                            
this.encodeSize = BYTES_PER_ENCODED_BLOCK;                                                             this.encodeSize = BYTES_PER_ENCODED_BLOCK;                                                          
this.lineSeparator = null;                                                                             this.lineSeparator = null;                                                                          
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
this.encodeSize = BYTES_PER_ENCODED_BLOCK;                                                             this.encodeSize = BYTES_PER_ENCODED_BLOCK;                                                          
this.lineSeparator = null;                                                                             this.lineSeparator = null;                                                                          
}                                                                                                      }                                                                                                   
this.decodeSize = this.encodeSize - 1;                                                                 this.decodeSize = this.encodeSize - 1;                                                              
this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;                            this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;                         
}                                                                                                      }                                                                                                   
