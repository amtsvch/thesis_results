/**
 * Stop associated {@link ClassLoader} and implement the requirements
 * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.
 *
 * @exception LifecycleException if this component detects a fatal error
 *  that prevents this component from being used
 */
@Override
protected void stopInternal() throws LifecycleException {
    if (log.isDebugEnabled()) {
        log.debug(sm.getString("webappLoader.stopping"));
    }
    setState(LifecycleState.STOPPING);
    // Remove context attributes as appropriate
    ServletContext servletContext = context.getServletContext();
    servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);
    // Throw away our current class loader if any
    if (classLoader != null) {
        try {
            classLoader.stop();
        } finally {
            classLoader.destroy();
        }
        // classLoader must be non-null to have been registered
        try {
            String contextName = context.getName();
            if (!contextName.startsWith("/")) {
                contextName = "/" + contextName;
            }
            ObjectName cloname = new ObjectName(context.getDomain() + ":type=" + classLoader.getClass().getSimpleName() + ",host=" + context.getParent().getName() + ",context=" + contextName);
            Registry.getRegistry(null, null).unregisterComponent(cloname);
        } catch (Exception e) {
            log.warn(sm.getString("webappLoader.stopError"), e);
        }
    }
    classLoader = null;
}