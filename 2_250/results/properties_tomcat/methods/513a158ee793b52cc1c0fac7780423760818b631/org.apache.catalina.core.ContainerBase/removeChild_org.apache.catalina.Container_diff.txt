/**                                                                                                    /**                                                                                                 
* Remove an existing child Container from association with this parent                                 * Remove an existing child Container from association with this parent                              
* Container.                                                                                           * Container.                                                                                        
*                                                                                                      *                                                                                                   
* @param child Existing child Container to be removed                                                  * @param child Existing child Container to be removed                                               
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public void removeChild(Container child) {                                                             public void removeChild(Container child) {                                                          
if (child == null) {                                                                                   if (child == null) {                                                                                
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
if (child.getState().isAvailable()) {                                                                  if (child.getState().isAvailable()) {                                                               
child.stop();                                                                                          child.stop();                                                                                       
}                                                                                                      }                                                                                                   
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("containerBase.child.stop"), e);                                                log.error(sm.getString("containerBase.child.stop"), e);                                             
}                                                                                                      }                                                                                                   
boolean destroy = false;                                                                               boolean destroy = false;                                                                            
try {                                                                                                  try {                                                                                               
// child.destroy() may have already been called which would have                                       // child.destroy() may have already been called which would have                                    
// triggered this call. If that is the case, no need to destroy the                                    // triggered this call. If that is the case, no need to destroy the                                 
// child again.                                                                                        // child again.                                                                                     
if (!LifecycleState.DESTROYING.equals(child.getState())) {                                             if (!LifecycleState.DESTROYING.equals(child.getState())) {                                          
child.destroy();                                                                                       child.destroy();                                                                                    
destroy = true;                                                                                        destroy = true;                                                                                     
}                                                                                                      }                                                                                                   
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("containerBase.child.destroy"), e);                                             log.error(sm.getString("containerBase.child.destroy"), e);                                          
}                                                                                                      }                                                                                                   
if (!destroy) {                                                                                        if (!destroy) {                                                                                     
fireContainerEvent(REMOVE_CHILD_EVENT, child);                                                         fireContainerEvent(REMOVE_CHILD_EVENT, child);                                                      
}                                                                                                      }                                                                                                   
synchronized (children) {                                                                              synchronized (children) {                                                                           
if (children.get(child.getName()) == null)                                                           | if (children.get(child.getName()) == null) {                                                        
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
children.remove(child.getName());                                                                      children.remove(child.getName());                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
