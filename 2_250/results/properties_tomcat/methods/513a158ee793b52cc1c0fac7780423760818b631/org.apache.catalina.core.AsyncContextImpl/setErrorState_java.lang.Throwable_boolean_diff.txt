public void setErrorState(Throwable t, boolean fireOnError) {                                          public void setErrorState(Throwable t, boolean fireOnError) {                                       
if (t != null)                                                                                       | if (t != null) {                                                                                    
request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);                                            request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);                                         
                                                                                                     | }                                                                                                   
request.getCoyoteRequest().action(ActionCode.ASYNC_ERROR, null);                                       request.getCoyoteRequest().action(ActionCode.ASYNC_ERROR, null);                                    
if (fireOnError) {                                                                                     if (fireOnError) {                                                                                  
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug(sm.getString("asyncContextImpl.fireOnError"));                                               log.debug(sm.getString("asyncContextImpl.fireOnError"));                                            
}                                                                                                      }                                                                                                   
AsyncEvent errorEvent = new AsyncEvent(event.getAsyncContext(), event.getSuppliedRequest(), event.ge   AsyncEvent errorEvent = new AsyncEvent(event.getAsyncContext(), event.getSuppliedRequest(), event.ge
List&lt;AsyncListenerWrapper&gt; listenersCopy = new ArrayList&lt;&gt;(listeners);                     List&lt;AsyncListenerWrapper&gt; listenersCopy = new ArrayList&lt;&gt;(listeners);                  
for (AsyncListenerWrapper listener : listenersCopy) {                                                  for (AsyncListenerWrapper listener : listenersCopy) {                                               
try {                                                                                                  try {                                                                                               
listener.fireOnError(errorEvent);                                                                      listener.fireOnError(errorEvent);                                                                   
} catch (Throwable t2) {                                                                               } catch (Throwable t2) {                                                                            
ExceptionUtils.handleThrowable(t2);                                                                    ExceptionUtils.handleThrowable(t2);                                                                 
log.warn(sm.getString("asyncContextImpl.onErrorError", listener.getClass().getName()), t2);            log.warn(sm.getString("asyncContextImpl.onErrorError", listener.getClass().getName()), t2);         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
AtomicBoolean result = new AtomicBoolean();                                                            AtomicBoolean result = new AtomicBoolean();                                                         
request.getCoyoteRequest().action(ActionCode.ASYNC_IS_ERROR, result);                                  request.getCoyoteRequest().action(ActionCode.ASYNC_IS_ERROR, result);                               
if (result.get()) {                                                                                    if (result.get()) {                                                                                 
// No listener called dispatch() or complete(). This is an error.                                      // No listener called dispatch() or complete(). This is an error.                                   
// SRV.2.3.3.3 (search for "error dispatch")                                                           // SRV.2.3.3.3 (search for "error dispatch")                                                        
// Take a local copy to avoid threading issues if another thread                                       // Take a local copy to avoid threading issues if another thread                                    
// clears this (can happen during error handling with non-container                                    // clears this (can happen during error handling with non-container                                 
// threads)                                                                                            // threads)                                                                                         
ServletResponse servletResponse = this.servletResponse;                                                ServletResponse servletResponse = this.servletResponse;                                             
if (servletResponse instanceof HttpServletResponse) {                                                  if (servletResponse instanceof HttpServletResponse) {                                               
((HttpServletResponse) servletResponse).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);       ((HttpServletResponse) servletResponse).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    
}                                                                                                      }                                                                                                   
Host host = (Host) context.getParent();                                                                Host host = (Host) context.getParent();                                                             
Valve stdHostValve = host.getPipeline().getBasic();                                                    Valve stdHostValve = host.getPipeline().getBasic();                                                 
if (stdHostValve instanceof StandardHostValve) {                                                       if (stdHostValve instanceof StandardHostValve) {                                                    
((StandardHostValve) stdHostValve).throwable(request, request.getResponse(), t);                       ((StandardHostValve) stdHostValve).throwable(request, request.getResponse(), t);                    
}                                                                                                      }                                                                                                   
request.getCoyoteRequest().action(ActionCode.ASYNC_IS_ERROR, result);                                  request.getCoyoteRequest().action(ActionCode.ASYNC_IS_ERROR, result);                               
if (result.get()) {                                                                                    if (result.get()) {                                                                                 
// Still in the error state. The error page did not call                                               // Still in the error state. The error page did not call                                            
// complete() or dispatch(). Complete the async processing.                                            // complete() or dispatch(). Complete the async processing.                                         
complete();                                                                                            complete();                                                                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
