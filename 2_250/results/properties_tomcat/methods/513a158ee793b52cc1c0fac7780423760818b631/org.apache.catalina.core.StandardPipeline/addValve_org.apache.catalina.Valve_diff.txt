/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Add a new Valve to the end of the pipeline associated with this                             * &lt;p&gt;Add a new Valve to the end of the pipeline associated with this                          
* Container.  Prior to adding the Valve, the Valve's                                                   * Container.  Prior to adding the Valve, the Valve's                                                
* &lt;code&gt;setContainer()&lt;/code&gt; method will be called, if it implements                      * &lt;code&gt;setContainer()&lt;/code&gt; method will be called, if it implements                   
* &lt;code&gt;Contained&lt;/code&gt;, with the owning Container as an argument.                        * &lt;code&gt;Contained&lt;/code&gt;, with the owning Container as an argument.                     
* The method may throw an                                                                              * The method may throw an                                                                           
* &lt;code&gt;IllegalArgumentException&lt;/code&gt; if this Valve chooses not to                       * &lt;code&gt;IllegalArgumentException&lt;/code&gt; if this Valve chooses not to                    
* be associated with this Container, or &lt;code&gt;IllegalStateException&lt;/code&gt;                 * be associated with this Container, or &lt;code&gt;IllegalStateException&lt;/code&gt;              
* if it is already associated with a different Container.&lt;/p&gt;                                    * if it is already associated with a different Container.&lt;/p&gt;                                 
*                                                                                                      *                                                                                                   
* @param valve Valve to be added                                                                       * @param valve Valve to be added                                                                    
*                                                                                                      *                                                                                                   
* @exception IllegalArgumentException if this Container refused to                                     * @exception IllegalArgumentException if this Container refused to                                  
*  accept the specified Valve                                                                          *  accept the specified Valve                                                                       
* @exception IllegalArgumentException if the specified Valve refuses to be                             * @exception IllegalArgumentException if the specified Valve refuses to be                          
*  associated with this Container                                                                      *  associated with this Container                                                                   
* @exception IllegalStateException if the specified Valve is already                                   * @exception IllegalStateException if the specified Valve is already                                
*  associated with a different Container                                                               *  associated with a different Container                                                            
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public void addValve(Valve valve) {                                                                    public void addValve(Valve valve) {                                                                 
// Validate that we can add this Valve                                                                 // Validate that we can add this Valve                                                              
if (valve instanceof Contained)                                                                      | if (valve instanceof Contained) {                                                                   
((Contained) valve).setContainer(this.container);                                                      ((Contained) valve).setContainer(this.container);                                                   
                                                                                                     | }                                                                                                   
// Start the new component if necessary                                                                // Start the new component if necessary                                                             
if (getState().isAvailable()) {                                                                        if (getState().isAvailable()) {                                                                     
if (valve instanceof Lifecycle) {                                                                      if (valve instanceof Lifecycle) {                                                                   
try {                                                                                                  try {                                                                                               
((Lifecycle) valve).start();                                                                           ((Lifecycle) valve).start();                                                                        
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("standardPipeline.valve.start"), e);                                            log.error(sm.getString("standardPipeline.valve.start"), e);                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Add this Valve to the set associated with this Pipeline                                             // Add this Valve to the set associated with this Pipeline                                          
if (first == null) {                                                                                   if (first == null) {                                                                                
first = valve;                                                                                         first = valve;                                                                                      
valve.setNext(basic);                                                                                  valve.setNext(basic);                                                                               
} else {                                                                                               } else {                                                                                            
Valve current = first;                                                                                 Valve current = first;                                                                              
while (current != null) {                                                                              while (current != null) {                                                                           
if (current.getNext() == basic) {                                                                      if (current.getNext() == basic) {                                                                   
current.setNext(valve);                                                                                current.setNext(valve);                                                                             
valve.setNext(basic);                                                                                  valve.setNext(basic);                                                                               
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
current = current.getNext();                                                                           current = current.getNext();                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);                                        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);                                     
}                                                                                                      }                                                                                                   
