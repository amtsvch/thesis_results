/**                                                                                                    /**                                                                                                 
* &lt;p&gt;Set the Valve instance that has been distinguished as the basic                             * &lt;p&gt;Set the Valve instance that has been distinguished as the basic                          
* Valve for this Pipeline (if any).  Prior to setting the basic Valve,                                 * Valve for this Pipeline (if any).  Prior to setting the basic Valve,                              
* the Valve's &lt;code&gt;setContainer()&lt;/code&gt; will be called, if it                            * the Valve's &lt;code&gt;setContainer()&lt;/code&gt; will be called, if it                         
* implements &lt;code&gt;Contained&lt;/code&gt;, with the owning Container as an                       * implements &lt;code&gt;Contained&lt;/code&gt;, with the owning Container as an                    
* argument.  The method may throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt;                 * argument.  The method may throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt;              
* if this Valve chooses not to be associated with this Container, or                                   * if this Valve chooses not to be associated with this Container, or                                
* &lt;code&gt;IllegalStateException&lt;/code&gt; if it is already associated with                      * &lt;code&gt;IllegalStateException&lt;/code&gt; if it is already associated with                   
* a different Container.&lt;/p&gt;                                                                     * a different Container.&lt;/p&gt;                                                                  
*                                                                                                      *                                                                                                   
* @param valve Valve to be distinguished as the basic Valve                                            * @param valve Valve to be distinguished as the basic Valve                                         
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public void setBasic(Valve valve) {                                                                    public void setBasic(Valve valve) {                                                                 
// Change components if necessary                                                                      // Change components if necessary                                                                   
Valve oldBasic = this.basic;                                                                           Valve oldBasic = this.basic;                                                                        
if (oldBasic == valve)                                                                               | if (oldBasic == valve) {                                                                            
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
// Stop the old component if necessary                                                                 // Stop the old component if necessary                                                              
if (oldBasic != null) {                                                                                if (oldBasic != null) {                                                                             
if (getState().isAvailable() && (oldBasic instanceof Lifecycle)) {                                     if (getState().isAvailable() && (oldBasic instanceof Lifecycle)) {                                  
try {                                                                                                  try {                                                                                               
((Lifecycle) oldBasic).stop();                                                                         ((Lifecycle) oldBasic).stop();                                                                      
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("standardPipeline.basic.stop"), e);                                             log.error(sm.getString("standardPipeline.basic.stop"), e);                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (oldBasic instanceof Contained) {                                                                   if (oldBasic instanceof Contained) {                                                                
try {                                                                                                  try {                                                                                               
((Contained) oldBasic).setContainer(null);                                                             ((Contained) oldBasic).setContainer(null);                                                          
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Start the new component if necessary                                                                // Start the new component if necessary                                                             
if (valve == null)                                                                                   | if (valve == null) {                                                                                
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
if (valve instanceof Contained) {                                                                      if (valve instanceof Contained) {                                                                   
((Contained) valve).setContainer(this.container);                                                      ((Contained) valve).setContainer(this.container);                                                   
}                                                                                                      }                                                                                                   
if (getState().isAvailable() && valve instanceof Lifecycle) {                                          if (getState().isAvailable() && valve instanceof Lifecycle) {                                       
try {                                                                                                  try {                                                                                               
((Lifecycle) valve).start();                                                                           ((Lifecycle) valve).start();                                                                        
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("standardPipeline.basic.start"), e);                                            log.error(sm.getString("standardPipeline.basic.start"), e);                                         
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Update the pipeline                                                                                 // Update the pipeline                                                                              
Valve current = first;                                                                                 Valve current = first;                                                                              
while (current != null) {                                                                              while (current != null) {                                                                           
if (current.getNext() == oldBasic) {                                                                   if (current.getNext() == oldBasic) {                                                                
current.setNext(valve);                                                                                current.setNext(valve);                                                                             
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
current = current.getNext();                                                                           current = current.getNext();                                                                        
}                                                                                                      }                                                                                                   
this.basic = valve;                                                                                    this.basic = valve;                                                                                 
}                                                                                                      }                                                                                                   
