@Override                                                                                              @Override                                                                                           
public void setLoader(Loader loader) {                                                                 public void setLoader(Loader loader) {                                                              
Lock writeLock = loaderLock.writeLock();                                                               Lock writeLock = loaderLock.writeLock();                                                            
writeLock.lock();                                                                                      writeLock.lock();                                                                                   
Loader oldLoader = null;                                                                               Loader oldLoader = null;                                                                            
try {                                                                                                  try {                                                                                               
// Change components if necessary                                                                      // Change components if necessary                                                                   
oldLoader = this.loader;                                                                               oldLoader = this.loader;                                                                            
if (oldLoader == loader)                                                                             | if (oldLoader == loader) {                                                                          
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
this.loader = loader;                                                                                  this.loader = loader;                                                                               
// Stop the old component if necessary                                                                 // Stop the old component if necessary                                                              
if (getState().isAvailable() && (oldLoader != null) && (oldLoader instanceof Lifecycle)) {             if (getState().isAvailable() && (oldLoader != null) && (oldLoader instanceof Lifecycle)) {          
try {                                                                                                  try {                                                                                               
((Lifecycle) oldLoader).stop();                                                                        ((Lifecycle) oldLoader).stop();                                                                     
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("standardContext.setLoader.stop"), e);                                          log.error(sm.getString("standardContext.setLoader.stop"), e);                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Start the new component if necessary                                                                // Start the new component if necessary                                                             
if (loader != null)                                                                                  | if (loader != null) {                                                                               
loader.setContext(this);                                                                               loader.setContext(this);                                                                            
                                                                                                     | }                                                                                                   
if (getState().isAvailable() && (loader != null) && (loader instanceof Lifecycle)) {                   if (getState().isAvailable() && (loader != null) && (loader instanceof Lifecycle)) {                
try {                                                                                                  try {                                                                                               
((Lifecycle) loader).start();                                                                          ((Lifecycle) loader).start();                                                                       
} catch (LifecycleException e) {                                                                       } catch (LifecycleException e) {                                                                    
log.error(sm.getString("standardContext.setLoader.start"), e);                                         log.error(sm.getString("standardContext.setLoader.start"), e);                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
writeLock.unlock();                                                                                    writeLock.unlock();                                                                                 
}                                                                                                      }                                                                                                   
// Report this property change to interested listeners                                                 // Report this property change to interested listeners                                              
support.firePropertyChange("loader", oldLoader, loader);                                               support.firePropertyChange("loader", oldLoader, loader);                                            
}                                                                                                      }                                                                                                   
