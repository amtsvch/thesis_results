/**
 * Get the password for the specified user.
 * @param username The user name
 * @return the password associated with the given principal's user name.
 */
@Override
protected String getPassword(String username) {
    String userPassword = getUserPassword();
    if (userPassword == null || userPassword.isEmpty()) {
        return null;
    }
    JNDIConnection connection = null;
    User user = null;
    try {
        // Ensure that we have a directory context available
        connection = get();
        // Occasionally the directory context will timeout.  Try one more
        // time before giving up.
        try {
            user = getUser(connection, username, null);
        } catch (NullPointerException | NamingException e) {
            // log the exception so we know it's there.
            containerLog.info(sm.getString("jndiRealm.exception.retry"), e);
            // close the connection so we know it will be reopened.
            close(connection);
            closePooledConnections();
            // open a new directory context.
            connection = get();
            // Try the authentication again.
            user = getUser(connection, username, null);
        }
        // Release this context
        release(connection);
        if (user == null) {
            // User should be found...
            return null;
        } else {
            // ... and have a password
            return user.getPassword();
        }
    } catch (NamingException e) {
        // Log the problem for posterity
        containerLog.error(sm.getString("jndiRealm.exception"), e);
        return null;
    }
}