/**
 * Get the principal associated with the specified certificate.
 * @param connection The directory context
 * @param username The user name
 * @param gssCredential The credentials
 * @return the Principal associated with the given certificate.
 * @exception NamingException if a directory server error occurs
 */
protected Principal getPrincipal(JNDIConnection connection, String username, GSSCredential gssCredential) throws NamingException {
    User user = null;
    List<String> roles = null;
    Hashtable<?, ?> preservedEnvironment = null;
    DirContext context = connection.context;
    try {
        if (gssCredential != null && isUseDelegatedCredential()) {
            // Preserve the current context environment parameters
            preservedEnvironment = context.getEnvironment();
            // Set up context
            context.addToEnvironment(Context.SECURITY_AUTHENTICATION, "GSSAPI");
            context.addToEnvironment("javax.security.sasl.server.authentication", "true");
            context.addToEnvironment("javax.security.sasl.qop", spnegoDelegationQop);
            // Note: Subject already set in SPNEGO authenticator so no need
            // for Subject.doAs() here
        }
        user = getUser(connection, username);
        if (user != null) {
            roles = getRoles(connection, user);
        }
    } finally {
        if (gssCredential != null && isUseDelegatedCredential()) {
            restoreEnvironmentParameter(context, Context.SECURITY_AUTHENTICATION, preservedEnvironment);
            restoreEnvironmentParameter(context, "javax.security.sasl.server.authentication", preservedEnvironment);
            restoreEnvironmentParameter(context, "javax.security.sasl.qop", preservedEnvironment);
        }
    }
    if (user != null) {
        return new GenericPrincipal(user.getUserName(), roles, null, null, gssCredential);
    }
    return null;
}