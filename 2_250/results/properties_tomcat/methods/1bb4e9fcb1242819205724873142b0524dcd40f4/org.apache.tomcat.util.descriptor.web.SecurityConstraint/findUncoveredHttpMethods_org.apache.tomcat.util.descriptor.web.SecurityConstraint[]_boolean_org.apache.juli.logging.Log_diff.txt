public static SecurityConstraint[] findUncoveredHttpMethods(SecurityConstraint[] constraints, boolean denyUncoveredHttpMethods, Log log) {
    Set<String> coveredPatterns = new HashSet<>();
    Map<String, Set<String>> urlMethodMap = new HashMap<>();
    Map<String, Set<String>> urlOmittedMethodMap = new HashMap<>();
    List<SecurityConstraint> newConstraints = new ArrayList<>();
    // First build the lists of covered patterns and those patterns that
    // might be uncovered
    for (SecurityConstraint constraint : constraints) {
        SecurityCollection[] collections = constraint.findCollections();
        for (SecurityCollection collection : collections) {
            String[] patterns = collection.findPatterns();
            String[] methods = collection.findMethods();
            String[] omittedMethods = collection.findOmittedMethods();
            // Simple case: no methods
            if (methods.length == 0 && omittedMethods.length == 0) {
                coveredPatterns.addAll(Arrays.asList(patterns));
                continue;
            }
            // Pre-calculate so we don't do this for every iteration of the
            // following loop
            List<String> omNew = null;
            if (omittedMethods.length != 0) {
                omNew = Arrays.asList(omittedMethods);
            }
            // Only need to process uncovered patterns
            for (String pattern : patterns) {
                if (!coveredPatterns.contains(pattern)) {
                    if (methods.length == 0) {
                        // Build the interset of omitted methods for this
                        // pattern
                        Set<String> om = urlOmittedMethodMap.get(pattern);
                        if (om == null) {
                            om = new HashSet<>();
                            urlOmittedMethodMap.put(pattern, om);
                            om.addAll(omNew);
                        } else {
                            om.retainAll(omNew);
                        }
                    } else {
                        // Build the union of methods for this pattern
                        Set<String> m = urlMethodMap.get(pattern);
                        if (m == null) {
                            m = new HashSet<>();
                            urlMethodMap.put(pattern, m);
                        }
                        m.addAll(Arrays.asList(methods));
                    }
                }
            }
        }
    }
    // Now check the potentially uncovered patterns
    for (Map.Entry<String, Set<String>> entry : urlMethodMap.entrySet()) {
        String pattern = entry.getKey();
        if (coveredPatterns.contains(pattern)) {
            // Fully covered. Ignore any partial coverage
            urlOmittedMethodMap.remove(pattern);
            continue;
        }
        Set<String> omittedMethods = urlOmittedMethodMap.remove(pattern);
        Set<String> methods = entry.getValue();
        if (omittedMethods == null) {
            StringBuilder msg = new StringBuilder();
            for (String method : methods) {
                msg.append(method);
                msg.append(' ');
            }
            if (denyUncoveredHttpMethods) {
                log.info(sm.getString("securityConstraint.uncoveredHttpMethodFix", pattern, msg.toString().trim()));
                SecurityCollection collection = new SecurityCollection();
                for (String method : methods) {
                    collection.addOmittedMethod(method);
                }
                collection.addPatternDecoded(pattern);
                collection.setName("deny-uncovered-http-methods");
                SecurityConstraint constraint = new SecurityConstraint();
                constraint.setAuthConstraint(true);
                constraint.addCollection(collection);
                newConstraints.add(constraint);
            } else {
                log.error(sm.getString("securityConstraint.uncoveredHttpMethod", pattern, msg.toString().trim()));
            }
            continue;
        }
        // As long as every omitted method as a corresponding method the
        // pattern is fully covered.
        omittedMethods.removeAll(methods);
        handleOmittedMethods(omittedMethods, pattern, denyUncoveredHttpMethods, newConstraints, log);
    }
    for (Map.Entry<String, Set<String>> entry : urlOmittedMethodMap.entrySet()) {
        String pattern = entry.getKey();
        if (coveredPatterns.contains(pattern)) {
            // Fully covered. Ignore any partial coverage
            continue;
        }
        handleOmittedMethods(entry.getValue(), pattern, denyUncoveredHttpMethods, newConstraints, log);
    }
    return newConstraints.toArray(new SecurityConstraint[0]);
}