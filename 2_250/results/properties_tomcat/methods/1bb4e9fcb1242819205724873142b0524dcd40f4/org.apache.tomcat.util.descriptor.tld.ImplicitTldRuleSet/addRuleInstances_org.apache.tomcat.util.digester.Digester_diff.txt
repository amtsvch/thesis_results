@Override
public void addRuleInstances(Digester digester) {
    digester.addCallMethod(PREFIX + "/tlibversion", "setTlibVersion", 0);
    digester.addCallMethod(PREFIX + "/tlib-version", "setTlibVersion", 0);
    digester.addCallMethod(PREFIX + "/jspversion", "setJspVersion", 0);
    digester.addCallMethod(PREFIX + "/jsp-version", "setJspVersion", 0);
    digester.addRule(PREFIX, new Rule() {

        // for TLD 2.0 and later, jsp-version is set by version attribute
        @Override
        public void begin(String namespace, String name, Attributes attributes) {
            TaglibXml taglibXml = (TaglibXml) digester.peek();
            taglibXml.setJspVersion(attributes.getValue("version"));
            StringBuilder code = digester.getGeneratedCode();
            if (code != null) {
                code.append(digester.toVariableName(taglibXml)).append(".setJspVersion(\"");
                code.append(attributes.getValue("version")).append("\");");
                code.append(System.lineSeparator());
            }
        }
    });
    digester.addCallMethod(PREFIX + "/shortname", "setShortName", 0);
    digester.addCallMethod(PREFIX + "/short-name", "setShortName", 0);
    // Elements not permitted
    digester.addRule(PREFIX + "/uri", new ElementNotAllowedRule());
    digester.addRule(PREFIX + "/info", new ElementNotAllowedRule());
    digester.addRule(PREFIX + "/description", new ElementNotAllowedRule());
    digester.addRule(PREFIX + "/listener/listener-class", new ElementNotAllowedRule());
    digester.addRule(VALIDATOR_PREFIX, new ElementNotAllowedRule());
    digester.addRule(TAG_PREFIX, new ElementNotAllowedRule());
    digester.addRule(TAGFILE_PREFIX, new ElementNotAllowedRule());
    digester.addRule(FUNCTION_PREFIX, new ElementNotAllowedRule());
}