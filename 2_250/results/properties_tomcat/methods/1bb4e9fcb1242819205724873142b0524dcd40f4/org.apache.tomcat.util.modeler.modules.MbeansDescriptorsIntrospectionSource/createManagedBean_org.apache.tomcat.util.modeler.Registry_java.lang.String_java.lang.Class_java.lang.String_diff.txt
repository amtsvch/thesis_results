/**                                                                                                    /**                                                                                                 
* XXX Find if the 'className' is the name of the MBean or                                              * XXX Find if the 'className' is the name of the MBean or                                           
*       the real class ( I suppose first )                                                             *       the real class ( I suppose first )                                                          
* XXX Read (optional) descriptions from a .properties, generated                                       * XXX Read (optional) descriptions from a .properties, generated                                    
*       from source                                                                                    *       from source                                                                                 
* XXX Deal with constructors                                                                           * XXX Deal with constructors                                                                        
*                                                                                                      *                                                                                                   
* @param registry The Bean registry (not used)                                                         * @param registry The Bean registry (not used)                                                      
* @param domain The bean domain (not used)                                                             * @param domain The bean domain (not used)                                                          
* @param realClass The class to analyze                                                                * @param realClass The class to analyze                                                             
* @param type The bean type                                                                            * @param type The bean type                                                                         
* @return ManagedBean The create MBean                                                                 * @return ManagedBean The create MBean                                                              
*/                                                                                                     */                                                                                                  
public ManagedBean createManagedBean(Registry registry, String domain, Class&lt;?&gt; realClass, Str   public ManagedBean createManagedBean(Registry registry, String domain, Class&lt;?&gt; realClass, Str
ManagedBean mbean = new ManagedBean();                                                                 ManagedBean mbean = new ManagedBean();                                                              
Method[] methods = null;                                                                               Method[] methods = null;                                                                            
Hashtable&lt;String, Method&gt; attMap = new Hashtable&lt;&gt;();                                      Hashtable&lt;String, Method&gt; attMap = new Hashtable&lt;&gt;();                                   
// key: attribute val: getter method                                                                   // key: attribute val: getter method                                                                
Hashtable&lt;String, Method&gt; getAttMap = new Hashtable&lt;&gt;();                                   Hashtable&lt;String, Method&gt; getAttMap = new Hashtable&lt;&gt;();                                
// key: attribute val: setter method                                                                   // key: attribute val: setter method                                                                
Hashtable&lt;String, Method&gt; setAttMap = new Hashtable&lt;&gt;();                                   Hashtable&lt;String, Method&gt; setAttMap = new Hashtable&lt;&gt;();                                
// key: operation val: invoke method                                                                   // key: operation val: invoke method                                                                
Hashtable&lt;String, Method&gt; invokeAttMap = new Hashtable&lt;&gt;();                                Hashtable&lt;String, Method&gt; invokeAttMap = new Hashtable&lt;&gt;();                             
methods = realClass.getMethods();                                                                      methods = realClass.getMethods();                                                                   
initMethods(realClass, methods, attMap, getAttMap, setAttMap, invokeAttMap);                           initMethods(realClass, methods, attMap, getAttMap, setAttMap, invokeAttMap);                        
try {                                                                                                  try {                                                                                               
Enumeration&lt;String&gt; en = attMap.keys();                                                          Enumeration&lt;String&gt; en = attMap.keys();                                                       
while (en.hasMoreElements()) {                                                                         while (en.hasMoreElements()) {                                                                      
String name = en.nextElement();                                                                        String name = en.nextElement();                                                                     
AttributeInfo ai = new AttributeInfo();                                                                AttributeInfo ai = new AttributeInfo();                                                             
ai.setName(name);                                                                                      ai.setName(name);                                                                                   
Method gm = getAttMap.get(name);                                                                       Method gm = getAttMap.get(name);                                                                    
if (gm != null) {                                                                                      if (gm != null) {                                                                                   
// ai.setGetMethodObj( gm );                                                                           // ai.setGetMethodObj( gm );                                                                        
ai.setGetMethod(gm.getName());                                                                         ai.setGetMethod(gm.getName());                                                                      
Class&lt;?&gt; t = gm.getReturnType();                                                                 Class&lt;?&gt; t = gm.getReturnType();                                                              
if (t != null)                                                                                       | if (t != null) {                                                                                    
ai.setType(t.getName());                                                                               ai.setType(t.getName());                                                                            
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
Method sm = setAttMap.get(name);                                                                       Method sm = setAttMap.get(name);                                                                    
if (sm != null) {                                                                                      if (sm != null) {                                                                                   
// ai.setSetMethodObj(sm);                                                                             // ai.setSetMethodObj(sm);                                                                          
Class&lt;?&gt; t = sm.getParameterTypes()[0];                                                          Class&lt;?&gt; t = sm.getParameterTypes()[0];                                                       
if (t != null)                                                                                       | if (t != null) {                                                                                    
ai.setType(t.getName());                                                                               ai.setType(t.getName());                                                                            
                                                                                                     | }                                                                                                   
ai.setSetMethod(sm.getName());                                                                         ai.setSetMethod(sm.getName());                                                                      
}                                                                                                      }                                                                                                   
ai.setDescription("Introspected attribute " + name);                                                   ai.setDescription("Introspected attribute " + name);                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("Introspected attribute " + name + " " + gm + " " + sm);                                     log.debug("Introspected attribute " + name + " " + gm + " " + sm);                                  
if (gm == null)                                                                                      | }                                                                                                   
                                                                                                     | if (gm == null) {                                                                                   
ai.setReadable(false);                                                                                 ai.setReadable(false);                                                                              
if (sm == null)                                                                                      | }                                                                                                   
                                                                                                     | if (sm == null) {                                                                                   
ai.setWriteable(false);                                                                                ai.setWriteable(false);                                                                             
if (sm != null || gm != null)                                                                        | }                                                                                                   
                                                                                                     | if (sm != null || gm != null) {                                                                     
mbean.addAttribute(ai);                                                                                mbean.addAttribute(ai);                                                                             
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
// This map is populated by iterating the methods (which end up as                                     // This map is populated by iterating the methods (which end up as                                  
// values in the Map) and obtaining the key from the value. It is                                      // values in the Map) and obtaining the key from the value. It is                                   
// impossible for a key to be associated with a null value.                                            // impossible for a key to be associated with a null value.                                         
for (Entry&lt;String, Method&gt; entry : invokeAttMap.entrySet()) {                                    for (Entry&lt;String, Method&gt; entry : invokeAttMap.entrySet()) {                                 
String name = entry.getKey();                                                                          String name = entry.getKey();                                                                       
Method m = entry.getValue();                                                                           Method m = entry.getValue();                                                                        
OperationInfo op = new OperationInfo();                                                                OperationInfo op = new OperationInfo();                                                             
op.setName(name);                                                                                      op.setName(name);                                                                                   
op.setReturnType(m.getReturnType().getName());                                                         op.setReturnType(m.getReturnType().getName());                                                      
op.setDescription("Introspected operation " + name);                                                   op.setDescription("Introspected operation " + name);                                                
Class&lt;?&gt;[] parms = m.getParameterTypes();                                                        Class&lt;?&gt;[] parms = m.getParameterTypes();                                                     
for (int i = 0; i &lt; parms.length; i++) {                                                            for (int i = 0; i &lt; parms.length; i++) {                                                         
ParameterInfo pi = new ParameterInfo();                                                                ParameterInfo pi = new ParameterInfo();                                                             
pi.setType(parms[i].getName());                                                                        pi.setType(parms[i].getName());                                                                     
pi.setName(("param" + i).intern());                                                                    pi.setName(("param" + i).intern());                                                                 
pi.setDescription(("Introspected parameter param" + i).intern());                                      pi.setDescription(("Introspected parameter param" + i).intern());                                   
op.addParameter(pi);                                                                                   op.addParameter(pi);                                                                                
}                                                                                                      }                                                                                                   
mbean.addOperation(op);                                                                                mbean.addOperation(op);                                                                             
}                                                                                                      }                                                                                                   
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("Setting name: " + type);                                                                    log.debug("Setting name: " + type);                                                                 
                                                                                                     | }                                                                                                   
mbean.setName(type);                                                                                   mbean.setName(type);                                                                                
return mbean;                                                                                          return mbean;                                                                                       
} catch (Exception ex) {                                                                               } catch (Exception ex) {                                                                            
ex.printStackTrace();                                                                                  ex.printStackTrace();                                                                               
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
