/**                                                                                                    /**                                                                                                 
* Parses the specified expression into a tree of parse nodes.                                          * Parses the specified expression into a tree of parse nodes.                                       
* @param expr The expression to parse                                                                  * @param expr The expression to parse                                                               
* @throws ParseException a parsing error occurred                                                      * @throws ParseException a parsing error occurred                                                   
*/                                                                                                     */                                                                                                  
private void parseExpression(String expr) throws ParseException {                                      private void parseExpression(String expr) throws ParseException {                                   
StringNode currStringNode = null;                                                                      StringNode currStringNode = null;                                                                   
// We cheat a little and start an artificial                                                           // We cheat a little and start an artificial                                                        
// group right away. It makes finishing easier.                                                        // group right away. It makes finishing easier.                                                     
pushOpp(null);                                                                                         pushOpp(null);                                                                                      
ExpressionTokenizer et = new ExpressionTokenizer(expr);                                                ExpressionTokenizer et = new ExpressionTokenizer(expr);                                             
while (et.hasMoreTokens()) {                                                                           while (et.hasMoreTokens()) {                                                                        
int token = et.nextToken();                                                                            int token = et.nextToken();                                                                         
if (token != ExpressionTokenizer.TOKEN_STRING)                                                       | if (token != ExpressionTokenizer.TOKEN_STRING) {                                                    
currStringNode = null;                                                                                 currStringNode = null;                                                                              
                                                                                                     | }                                                                                                   
switch(token) {                                                                                        switch(token) {                                                                                     
case ExpressionTokenizer.TOKEN_STRING:                                                                 case ExpressionTokenizer.TOKEN_STRING:                                                              
if (currStringNode == null) {                                                                          if (currStringNode == null) {                                                                       
currStringNode = new StringNode(et.getTokenValue());                                                   currStringNode = new StringNode(et.getTokenValue());                                                
nodeStack.add(0, currStringNode);                                                                      nodeStack.add(0, currStringNode);                                                                   
} else {                                                                                               } else {                                                                                            
// Add to the existing                                                                                 // Add to the existing                                                                              
currStringNode.value.append(' ');                                                                      currStringNode.value.append(' ');                                                                   
currStringNode.value.append(et.getTokenValue());                                                       currStringNode.value.append(et.getTokenValue());                                                    
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_AND:                                                                    case ExpressionTokenizer.TOKEN_AND:                                                                 
pushOpp(new AndNode());                                                                                pushOpp(new AndNode());                                                                             
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_OR:                                                                     case ExpressionTokenizer.TOKEN_OR:                                                                  
pushOpp(new OrNode());                                                                                 pushOpp(new OrNode());                                                                              
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_NOT:                                                                    case ExpressionTokenizer.TOKEN_NOT:                                                                 
pushOpp(new NotNode());                                                                                pushOpp(new NotNode());                                                                             
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_EQ:                                                                     case ExpressionTokenizer.TOKEN_EQ:                                                                  
pushOpp(new EqualNode());                                                                              pushOpp(new EqualNode());                                                                           
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_NOT_EQ:                                                                 case ExpressionTokenizer.TOKEN_NOT_EQ:                                                              
pushOpp(new NotNode());                                                                                pushOpp(new NotNode());                                                                             
// Sneak the regular node in. The NOT will                                                             // Sneak the regular node in. The NOT will                                                          
// be resolved when the next opp comes along.                                                          // be resolved when the next opp comes along.                                                       
oppStack.add(0, new EqualNode());                                                                      oppStack.add(0, new EqualNode());                                                                   
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_RBRACE:                                                                 case ExpressionTokenizer.TOKEN_RBRACE:                                                              
// Closeout the current group                                                                          // Closeout the current group                                                                       
resolveGroup();                                                                                        resolveGroup();                                                                                     
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_LBRACE:                                                                 case ExpressionTokenizer.TOKEN_LBRACE:                                                              
// Push a group marker                                                                                 // Push a group marker                                                                              
pushOpp(null);                                                                                         pushOpp(null);                                                                                      
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_GE:                                                                     case ExpressionTokenizer.TOKEN_GE:                                                                  
pushOpp(new NotNode());                                                                                pushOpp(new NotNode());                                                                             
// Similar strategy to NOT_EQ above, except this                                                       // Similar strategy to NOT_EQ above, except this                                                    
// is NOT less than                                                                                    // is NOT less than                                                                                 
oppStack.add(0, new LessThanNode());                                                                   oppStack.add(0, new LessThanNode());                                                                
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_LE:                                                                     case ExpressionTokenizer.TOKEN_LE:                                                                  
pushOpp(new NotNode());                                                                                pushOpp(new NotNode());                                                                             
// Similar strategy to NOT_EQ above, except this                                                       // Similar strategy to NOT_EQ above, except this                                                    
// is NOT greater than                                                                                 // is NOT greater than                                                                              
oppStack.add(0, new GreaterThanNode());                                                                oppStack.add(0, new GreaterThanNode());                                                             
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_GT:                                                                     case ExpressionTokenizer.TOKEN_GT:                                                                  
pushOpp(new GreaterThanNode());                                                                        pushOpp(new GreaterThanNode());                                                                     
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_LT:                                                                     case ExpressionTokenizer.TOKEN_LT:                                                                  
pushOpp(new LessThanNode());                                                                           pushOpp(new LessThanNode());                                                                        
break;                                                                                                 break;                                                                                              
case ExpressionTokenizer.TOKEN_END:                                                                    case ExpressionTokenizer.TOKEN_END:                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Finish off the rest of the opps                                                                     // Finish off the rest of the opps                                                                  
resolveGroup();                                                                                        resolveGroup();                                                                                     
if (nodeStack.size() == 0) {                                                                           if (nodeStack.size() == 0) {                                                                        
throw new ParseException(sm.getString("expressionParseTree.noNodes"), et.getIndex());                  throw new ParseException(sm.getString("expressionParseTree.noNodes"), et.getIndex());               
}                                                                                                      }                                                                                                   
if (nodeStack.size() &gt; 1) {                                                                         if (nodeStack.size() &gt; 1) {                                                                      
throw new ParseException(sm.getString("expressionParseTree.extraNodes"), et.getIndex());               throw new ParseException(sm.getString("expressionParseTree.extraNodes"), et.getIndex());            
}                                                                                                      }                                                                                                   
if (oppStack.size() != 0) {                                                                            if (oppStack.size() != 0) {                                                                         
throw new ParseException(sm.getString("expressionParseTree.unusedOpCodes"), et.getIndex());            throw new ParseException(sm.getString("expressionParseTree.unusedOpCodes"), et.getIndex());         
}                                                                                                      }                                                                                                   
root = nodeStack.get(0);                                                                               root = nodeStack.get(0);                                                                            
}                                                                                                      }                                                                                                   
