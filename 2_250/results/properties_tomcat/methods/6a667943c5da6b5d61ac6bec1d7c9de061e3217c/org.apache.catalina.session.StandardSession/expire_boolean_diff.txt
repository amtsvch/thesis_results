/**                                                                                                    /**                                                                                                 
* Perform the internal processing required to invalidate this session,                                 * Perform the internal processing required to invalidate this session,                              
* without triggering an exception if the session has already expired.                                  * without triggering an exception if the session has already expired.                               
*                                                                                                      *                                                                                                   
* @param notify Should we notify listeners about the demise of                                         * @param notify Should we notify listeners about the demise of                                      
*  this session?                                                                                       *  this session?                                                                                    
*/                                                                                                     */                                                                                                  
public void expire(boolean notify) {                                                                   public void expire(boolean notify) {                                                                
// Check to see if session has already been invalidated.                                               // Check to see if session has already been invalidated.                                            
// Do not check expiring at this point as expire should not return until                               // Do not check expiring at this point as expire should not return until                            
// isValid is false                                                                                    // isValid is false                                                                                 
if (!isValid)                                                                                        | if (!isValid) {                                                                                     
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
synchronized (this) {                                                                                  synchronized (this) {                                                                               
// Check again, now we are inside the sync so this code only runs once                                 // Check again, now we are inside the sync so this code only runs once                              
// Double check locking - isValid needs to be volatile                                                 // Double check locking - isValid needs to be volatile                                              
// The check of expiring is to ensure that an infinite loop is not                                     // The check of expiring is to ensure that an infinite loop is not                                  
// entered as per bug 56339                                                                            // entered as per bug 56339                                                                         
if (expiring || !isValid)                                                                            | if (expiring || !isValid) {                                                                         
return;                                                                                                return;                                                                                             
if (manager == null)                                                                                 | }                                                                                                   
                                                                                                     | if (manager == null) {                                                                              
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
// Mark this session as "being expired"                                                                // Mark this session as "being expired"                                                             
expiring = true;                                                                                       expiring = true;                                                                                    
// Notify interested application event listeners                                                       // Notify interested application event listeners                                                    
// FIXME - Assumes we call listeners in reverse order                                                  // FIXME - Assumes we call listeners in reverse order                                               
Context context = manager.getContext();                                                                Context context = manager.getContext();                                                             
// The call to expire() may not have been triggered by the webapp.                                     // The call to expire() may not have been triggered by the webapp.                                  
// Make sure the webapp's class loader is set when calling the                                         // Make sure the webapp's class loader is set when calling the                                      
// listeners                                                                                           // listeners                                                                                        
if (notify) {                                                                                          if (notify) {                                                                                       
ClassLoader oldContextClassLoader = null;                                                              ClassLoader oldContextClassLoader = null;                                                           
try {                                                                                                  try {                                                                                               
oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);                               oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);                            
Object[] listeners = context.getApplicationLifecycleListeners();                                       Object[] listeners = context.getApplicationLifecycleListeners();                                    
if (listeners != null && listeners.length &gt; 0) {                                                    if (listeners != null && listeners.length &gt; 0) {                                                 
HttpSessionEvent event = new HttpSessionEvent(getSession());                                           HttpSessionEvent event = new HttpSessionEvent(getSession());                                        
for (int i = 0; i &lt; listeners.length; i++) {                                                        for (int i = 0; i &lt; listeners.length; i++) {                                                     
int j = (listeners.length - 1) - i;                                                                    int j = (listeners.length - 1) - i;                                                                 
if (!(listeners[j] instanceof HttpSessionListener))                                                  | if (!(listeners[j] instanceof HttpSessionListener)) {                                               
continue;                                                                                              continue;                                                                                           
                                                                                                     | }                                                                                                   
HttpSessionListener listener = (HttpSessionListener) listeners[j];                                     HttpSessionListener listener = (HttpSessionListener) listeners[j];                                  
try {                                                                                                  try {                                                                                               
context.fireContainerEvent("beforeSessionDestroyed", listener);                                        context.fireContainerEvent("beforeSessionDestroyed", listener);                                     
listener.sessionDestroyed(event);                                                                      listener.sessionDestroyed(event);                                                                   
context.fireContainerEvent("afterSessionDestroyed", listener);                                         context.fireContainerEvent("afterSessionDestroyed", listener);                                      
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
try {                                                                                                  try {                                                                                               
context.fireContainerEvent("afterSessionDestroyed", listener);                                         context.fireContainerEvent("afterSessionDestroyed", listener);                                      
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
manager.getContext().getLogger().error(sm.getString("standardSession.sessionEvent"), t);               manager.getContext().getLogger().error(sm.getString("standardSession.sessionEvent"), t);            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);                                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (activityCheck) {                                                                                   if (activityCheck) {                                                                                
accessCount.set(0);                                                                                    accessCount.set(0);                                                                                 
}                                                                                                      }                                                                                                   
// Remove this session from our manager's active sessions                                              // Remove this session from our manager's active sessions                                           
manager.remove(this, true);                                                                            manager.remove(this, true);                                                                         
// Notify interested session event listeners                                                           // Notify interested session event listeners                                                        
if (notify) {                                                                                          if (notify) {                                                                                       
fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);                                               fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);                                            
}                                                                                                      }                                                                                                   
// Call the logout method                                                                              // Call the logout method                                                                           
if (principal instanceof TomcatPrincipal) {                                                            if (principal instanceof TomcatPrincipal) {                                                         
TomcatPrincipal gp = (TomcatPrincipal) principal;                                                      TomcatPrincipal gp = (TomcatPrincipal) principal;                                                   
try {                                                                                                  try {                                                                                               
gp.logout();                                                                                           gp.logout();                                                                                        
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
manager.getContext().getLogger().error(sm.getString("standardSession.logoutfail"), e);                 manager.getContext().getLogger().error(sm.getString("standardSession.logoutfail"), e);              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// We have completed expire of this session                                                            // We have completed expire of this session                                                         
setValid(false);                                                                                       setValid(false);                                                                                    
expiring = false;                                                                                      expiring = false;                                                                                   
// Unbind any objects associated with this session                                                     // Unbind any objects associated with this session                                                  
String[] keys = keys();                                                                                String[] keys = keys();                                                                             
ClassLoader oldContextClassLoader = null;                                                              ClassLoader oldContextClassLoader = null;                                                           
try {                                                                                                  try {                                                                                               
oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);                               oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);                            
for (String key : keys) {                                                                              for (String key : keys) {                                                                           
removeAttributeInternal(key, notify);                                                                  removeAttributeInternal(key, notify);                                                               
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);                                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
