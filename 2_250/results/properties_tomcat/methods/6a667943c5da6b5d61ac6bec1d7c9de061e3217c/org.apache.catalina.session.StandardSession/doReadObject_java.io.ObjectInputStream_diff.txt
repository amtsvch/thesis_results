/**                                                                                                    /**                                                                                                 
* Read a serialized version of this session object from the specified                                  * Read a serialized version of this session object from the specified                               
* object input stream.                                                                                 * object input stream.                                                                              
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  The reference to the owning Manager                         * &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  The reference to the owning Manager                      
* is not restored by this method, and must be set explicitly.                                          * is not restored by this method, and must be set explicitly.                                       
*                                                                                                      *                                                                                                   
* @param stream The input stream to read from                                                          * @param stream The input stream to read from                                                       
*                                                                                                      *                                                                                                   
* @exception ClassNotFoundException if an unknown class is specified                                   * @exception ClassNotFoundException if an unknown class is specified                                
* @exception IOException if an input/output error occurs                                               * @exception IOException if an input/output error occurs                                            
*/                                                                                                     */                                                                                                  
protected void doReadObject(ObjectInputStream stream) throws ClassNotFoundException, IOException {     protected void doReadObject(ObjectInputStream stream) throws ClassNotFoundException, IOException {  
// Deserialize the scalar instance variables (except Manager)                                          // Deserialize the scalar instance variables (except Manager)                                       
// Transient (may be set later)                                                                        // Transient (may be set later)                                                                     
authType = null;                                                                                       authType = null;                                                                                    
creationTime = ((Long) stream.readObject()).longValue();                                               creationTime = ((Long) stream.readObject()).longValue();                                            
lastAccessedTime = ((Long) stream.readObject()).longValue();                                           lastAccessedTime = ((Long) stream.readObject()).longValue();                                        
maxInactiveInterval = ((Integer) stream.readObject()).intValue();                                      maxInactiveInterval = ((Integer) stream.readObject()).intValue();                                   
isNew = ((Boolean) stream.readObject()).booleanValue();                                                isNew = ((Boolean) stream.readObject()).booleanValue();                                             
isValid = ((Boolean) stream.readObject()).booleanValue();                                              isValid = ((Boolean) stream.readObject()).booleanValue();                                           
thisAccessedTime = ((Long) stream.readObject()).longValue();                                           thisAccessedTime = ((Long) stream.readObject()).longValue();                                        
// Transient (may be set later)                                                                        // Transient (may be set later)                                                                     
principal = null;                                                                                      principal = null;                                                                                   
// setId((String) stream.readObject());                                                                // setId((String) stream.readObject());                                                             
id = (String) stream.readObject();                                                                     id = (String) stream.readObject();                                                                  
if (manager.getContext().getLogger().isDebugEnabled())                                               | if (manager.getContext().getLogger().isDebugEnabled()) {                                            
manager.getContext().getLogger().debug("readObject() loading session " + id);                          manager.getContext().getLogger().debug("readObject() loading session " + id);                       
                                                                                                     | }                                                                                                   
// The next object read could either be the number of attributes (Integer) or the session's            // The next object read could either be the number of attributes (Integer) or the session's         
// authType followed by a Principal object (not an Integer)                                            // authType followed by a Principal object (not an Integer)                                         
Object nextObject = stream.readObject();                                                               Object nextObject = stream.readObject();                                                            
if (!(nextObject instanceof Integer)) {                                                                if (!(nextObject instanceof Integer)) {                                                             
setAuthType((String) nextObject);                                                                      setAuthType((String) nextObject);                                                                   
try {                                                                                                  try {                                                                                               
setPrincipal((Principal) stream.readObject());                                                         setPrincipal((Principal) stream.readObject());                                                      
} catch (ClassNotFoundException | ObjectStreamException e) {                                           } catch (ClassNotFoundException | ObjectStreamException e) {                                        
String msg = sm.getString("standardSession.principalNotDeserializable", id);                           String msg = sm.getString("standardSession.principalNotDeserializable", id);                        
if (manager.getContext().getLogger().isDebugEnabled()) {                                               if (manager.getContext().getLogger().isDebugEnabled()) {                                            
manager.getContext().getLogger().debug(msg, e);                                                        manager.getContext().getLogger().debug(msg, e);                                                     
} else {                                                                                               } else {                                                                                            
manager.getContext().getLogger().warn(msg);                                                            manager.getContext().getLogger().warn(msg);                                                         
}                                                                                                      }                                                                                                   
throw e;                                                                                               throw e;                                                                                            
}                                                                                                      }                                                                                                   
// After that, the next object read should be the number of attributes (Integer)                       // After that, the next object read should be the number of attributes (Integer)                    
nextObject = stream.readObject();                                                                      nextObject = stream.readObject();                                                                   
}                                                                                                      }                                                                                                   
// Deserialize the attribute count and attribute values                                                // Deserialize the attribute count and attribute values                                             
if (attributes == null)                                                                              | if (attributes == null) {                                                                           
attributes = new ConcurrentHashMap&lt;&gt;();                                                          attributes = new ConcurrentHashMap&lt;&gt;();                                                       
                                                                                                     | }                                                                                                   
int n = ((Integer) nextObject).intValue();                                                             int n = ((Integer) nextObject).intValue();                                                          
boolean isValidSave = isValid;                                                                         boolean isValidSave = isValid;                                                                      
isValid = true;                                                                                        isValid = true;                                                                                     
for (int i = 0; i &lt; n; i++) {                                                                       for (int i = 0; i &lt; n; i++) {                                                                    
String name = (String) stream.readObject();                                                            String name = (String) stream.readObject();                                                         
final Object value;                                                                                    final Object value;                                                                                 
try {                                                                                                  try {                                                                                               
value = stream.readObject();                                                                           value = stream.readObject();                                                                        
} catch (WriteAbortedException wae) {                                                                  } catch (WriteAbortedException wae) {                                                               
if (wae.getCause() instanceof NotSerializableException) {                                              if (wae.getCause() instanceof NotSerializableException) {                                           
String msg = sm.getString("standardSession.notDeserializable", name, id);                              String msg = sm.getString("standardSession.notDeserializable", name, id);                           
if (manager.getContext().getLogger().isDebugEnabled()) {                                               if (manager.getContext().getLogger().isDebugEnabled()) {                                            
manager.getContext().getLogger().debug(msg, wae);                                                      manager.getContext().getLogger().debug(msg, wae);                                                   
} else {                                                                                               } else {                                                                                            
manager.getContext().getLogger().warn(msg);                                                            manager.getContext().getLogger().warn(msg);                                                         
}                                                                                                      }                                                                                                   
// Skip non serializable attributes                                                                    // Skip non serializable attributes                                                                 
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
throw wae;                                                                                             throw wae;                                                                                          
}                                                                                                      }                                                                                                   
if (manager.getContext().getLogger().isDebugEnabled())                                               | if (manager.getContext().getLogger().isDebugEnabled()) {                                            
manager.getContext().getLogger().debug("  loading attribute '" + name + "' with value '" + value + "   manager.getContext().getLogger().debug("  loading attribute '" + name + "' with value '" + value + "
                                                                                                     | }                                                                                                   
// Handle the case where the filter configuration was changed while                                    // Handle the case where the filter configuration was changed while                                 
// the web application was stopped.                                                                    // the web application was stopped.                                                                 
if (exclude(name, value)) {                                                                            if (exclude(name, value)) {                                                                         
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// ConcurrentHashMap does not allow null keys or values                                                // ConcurrentHashMap does not allow null keys or values                                             
if (null != value)                                                                                   | if (null != value) {                                                                                
attributes.put(name, value);                                                                           attributes.put(name, value);                                                                        
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
isValid = isValidSave;                                                                                 isValid = isValidSave;                                                                              
if (listeners == null) {                                                                               if (listeners == null) {                                                                            
listeners = new ArrayList&lt;&gt;();                                                                   listeners = new ArrayList&lt;&gt;();                                                                
}                                                                                                      }                                                                                                   
if (notes == null) {                                                                                   if (notes == null) {                                                                                
notes = new Hashtable&lt;&gt;();                                                                       notes = new Hashtable&lt;&gt;();                                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
