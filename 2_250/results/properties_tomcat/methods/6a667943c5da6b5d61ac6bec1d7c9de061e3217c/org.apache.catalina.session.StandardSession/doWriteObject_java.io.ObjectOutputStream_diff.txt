/**                                                                                                    /**                                                                                                 
* Write a serialized version of this session object to the specified                                   * Write a serialized version of this session object to the specified                                
* object output stream.                                                                                * object output stream.                                                                             
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  The owning Manager will not be stored                       * &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  The owning Manager will not be stored                    
* in the serialized representation of this Session.  After calling                                     * in the serialized representation of this Session.  After calling                                  
* &lt;code&gt;readObject()&lt;/code&gt;, you must set the associated Manager                           * &lt;code&gt;readObject()&lt;/code&gt;, you must set the associated Manager                        
* explicitly.                                                                                          * explicitly.                                                                                       
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  Any attribute that is not Serializable                      * &lt;b&gt;IMPLEMENTATION NOTE&lt;/b&gt;:  Any attribute that is not Serializable                   
* will be unbound from the session, with appropriate actions if it                                     * will be unbound from the session, with appropriate actions if it                                  
* implements HttpSessionBindingListener.  If you do not want any such                                  * implements HttpSessionBindingListener.  If you do not want any such                               
* attributes, be sure the &lt;code&gt;distributable&lt;/code&gt; property of the                       * attributes, be sure the &lt;code&gt;distributable&lt;/code&gt; property of the                    
* associated Manager is set to &lt;code&gt;true&lt;/code&gt;.                                          * associated Manager is set to &lt;code&gt;true&lt;/code&gt;.                                       
*                                                                                                      *                                                                                                   
* @param stream The output stream to write to                                                          * @param stream The output stream to write to                                                       
*                                                                                                      *                                                                                                   
* @exception IOException if an input/output error occurs                                               * @exception IOException if an input/output error occurs                                            
*/                                                                                                     */                                                                                                  
protected void doWriteObject(ObjectOutputStream stream) throws IOException {                           protected void doWriteObject(ObjectOutputStream stream) throws IOException {                        
// Write the scalar instance variables (except Manager)                                                // Write the scalar instance variables (except Manager)                                             
stream.writeObject(Long.valueOf(creationTime));                                                        stream.writeObject(Long.valueOf(creationTime));                                                     
stream.writeObject(Long.valueOf(lastAccessedTime));                                                    stream.writeObject(Long.valueOf(lastAccessedTime));                                                 
stream.writeObject(Integer.valueOf(maxInactiveInterval));                                              stream.writeObject(Integer.valueOf(maxInactiveInterval));                                           
stream.writeObject(Boolean.valueOf(isNew));                                                            stream.writeObject(Boolean.valueOf(isNew));                                                         
stream.writeObject(Boolean.valueOf(isValid));                                                          stream.writeObject(Boolean.valueOf(isValid));                                                       
stream.writeObject(Long.valueOf(thisAccessedTime));                                                    stream.writeObject(Long.valueOf(thisAccessedTime));                                                 
stream.writeObject(id);                                                                                stream.writeObject(id);                                                                             
if (manager.getContext().getLogger().isDebugEnabled())                                               | if (manager.getContext().getLogger().isDebugEnabled()) {                                            
manager.getContext().getLogger().debug("writeObject() storing session " + id);                         manager.getContext().getLogger().debug("writeObject() storing session " + id);                      
                                                                                                     | }                                                                                                   
// Gather authentication information (if configured)                                                   // Gather authentication information (if configured)                                                
String sessionAuthType = null;                                                                         String sessionAuthType = null;                                                                      
Principal sessionPrincipal = null;                                                                     Principal sessionPrincipal = null;                                                                  
if (getPersistAuthentication()) {                                                                      if (getPersistAuthentication()) {                                                                   
sessionAuthType = getAuthType();                                                                       sessionAuthType = getAuthType();                                                                    
sessionPrincipal = getPrincipal();                                                                     sessionPrincipal = getPrincipal();                                                                  
if (!(sessionPrincipal instanceof Serializable)) {                                                     if (!(sessionPrincipal instanceof Serializable)) {                                                  
sessionPrincipal = null;                                                                               sessionPrincipal = null;                                                                            
manager.getContext().getLogger().warn(sm.getString("standardSession.principalNotSerializable", id));   manager.getContext().getLogger().warn(sm.getString("standardSession.principalNotSerializable", id));
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Write authentication information (may be null values)                                               // Write authentication information (may be null values)                                            
stream.writeObject(sessionAuthType);                                                                   stream.writeObject(sessionAuthType);                                                                
try {                                                                                                  try {                                                                                               
stream.writeObject(sessionPrincipal);                                                                  stream.writeObject(sessionPrincipal);                                                               
} catch (NotSerializableException e) {                                                                 } catch (NotSerializableException e) {                                                              
manager.getContext().getLogger().warn(sm.getString("standardSession.principalNotSerializable", id),    manager.getContext().getLogger().warn(sm.getString("standardSession.principalNotSerializable", id), 
}                                                                                                      }                                                                                                   
// Accumulate the names of serializable and non-serializable attributes                                // Accumulate the names of serializable and non-serializable attributes                             
String[] keys = keys();                                                                                String[] keys = keys();                                                                             
List&lt;String&gt; saveNames = new ArrayList&lt;&gt;();                                                List&lt;String&gt; saveNames = new ArrayList&lt;&gt;();                                             
List&lt;Object&gt; saveValues = new ArrayList&lt;&gt;();                                               List&lt;Object&gt; saveValues = new ArrayList&lt;&gt;();                                            
for (String key : keys) {                                                                              for (String key : keys) {                                                                           
Object value = attributes.get(key);                                                                    Object value = attributes.get(key);                                                                 
if (value == null) {                                                                                   if (value == null) {                                                                                
continue;                                                                                              continue;                                                                                           
} else if (isAttributeDistributable(key, value) && !exclude(key, value)) {                             } else if (isAttributeDistributable(key, value) && !exclude(key, value)) {                          
saveNames.add(key);                                                                                    saveNames.add(key);                                                                                 
saveValues.add(value);                                                                                 saveValues.add(value);                                                                              
} else {                                                                                               } else {                                                                                            
removeAttributeInternal(key, true);                                                                    removeAttributeInternal(key, true);                                                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Serialize the attribute count and the Serializable attributes                                       // Serialize the attribute count and the Serializable attributes                                    
int n = saveNames.size();                                                                              int n = saveNames.size();                                                                           
stream.writeObject(Integer.valueOf(n));                                                                stream.writeObject(Integer.valueOf(n));                                                             
for (int i = 0; i &lt; n; i++) {                                                                       for (int i = 0; i &lt; n; i++) {                                                                    
stream.writeObject(saveNames.get(i));                                                                  stream.writeObject(saveNames.get(i));                                                               
try {                                                                                                  try {                                                                                               
stream.writeObject(saveValues.get(i));                                                                 stream.writeObject(saveValues.get(i));                                                              
if (manager.getContext().getLogger().isDebugEnabled())                                               | if (manager.getContext().getLogger().isDebugEnabled()) {                                            
manager.getContext().getLogger().debug("  storing attribute '" + saveNames.get(i) + "' with value '"   manager.getContext().getLogger().debug("  storing attribute '" + saveNames.get(i) + "' with value '"
                                                                                                     | }                                                                                                   
} catch (NotSerializableException e) {                                                                 } catch (NotSerializableException e) {                                                              
manager.getContext().getLogger().warn(sm.getString("standardSession.notSerializable", saveNames.get(   manager.getContext().getLogger().warn(sm.getString("standardSession.notSerializable", saveNames.get(
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
