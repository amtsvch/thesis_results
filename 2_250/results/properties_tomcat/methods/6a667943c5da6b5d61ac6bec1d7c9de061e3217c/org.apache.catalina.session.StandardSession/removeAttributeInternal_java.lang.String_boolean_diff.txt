/**                                                                                                    /**                                                                                                 
* Remove the object bound with the specified name from this session.  If                               * Remove the object bound with the specified name from this session.  If                            
* the session does not have an object bound with this name, this method                                * the session does not have an object bound with this name, this method                             
* does nothing.                                                                                        * does nothing.                                                                                     
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* After this method executes, and if the object implements                                             * After this method executes, and if the object implements                                          
* &lt;code&gt;HttpSessionBindingListener&lt;/code&gt;, the container calls                             * &lt;code&gt;HttpSessionBindingListener&lt;/code&gt;, the container calls                          
* &lt;code&gt;valueUnbound()&lt;/code&gt; on the object.                                               * &lt;code&gt;valueUnbound()&lt;/code&gt; on the object.                                            
*                                                                                                      *                                                                                                   
* @param name Name of the object to remove from this session.                                          * @param name Name of the object to remove from this session.                                       
* @param notify Should we notify interested listeners that this                                        * @param notify Should we notify interested listeners that this                                     
*  attribute is being removed?                                                                         *  attribute is being removed?                                                                      
*/                                                                                                     */                                                                                                  
protected void removeAttributeInternal(String name, boolean notify) {                                  protected void removeAttributeInternal(String name, boolean notify) {                               
// Avoid NPE                                                                                           // Avoid NPE                                                                                        
if (name == null)                                                                                    | if (name == null) {                                                                                 
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
// Remove this attribute from our collection                                                           // Remove this attribute from our collection                                                        
Object value = attributes.remove(name);                                                                Object value = attributes.remove(name);                                                             
// Do we need to do valueUnbound() and attributeRemoved() notification?                                // Do we need to do valueUnbound() and attributeRemoved() notification?                             
if (!notify || (value == null)) {                                                                      if (!notify || (value == null)) {                                                                   
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Call the valueUnbound() method if necessary                                                         // Call the valueUnbound() method if necessary                                                      
HttpSessionBindingEvent event = null;                                                                  HttpSessionBindingEvent event = null;                                                               
if (value instanceof HttpSessionBindingListener) {                                                     if (value instanceof HttpSessionBindingListener) {                                                  
event = new HttpSessionBindingEvent(getSession(), name, value);                                        event = new HttpSessionBindingEvent(getSession(), name, value);                                     
((HttpSessionBindingListener) value).valueUnbound(event);                                              ((HttpSessionBindingListener) value).valueUnbound(event);                                           
}                                                                                                      }                                                                                                   
// Notify interested application event listeners                                                       // Notify interested application event listeners                                                    
Context context = manager.getContext();                                                                Context context = manager.getContext();                                                             
Object[] listeners = context.getApplicationEventListeners();                                           Object[] listeners = context.getApplicationEventListeners();                                        
if (listeners == null)                                                                               | if (listeners == null) {                                                                            
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
for (Object o : listeners) {                                                                           for (Object o : listeners) {                                                                        
if (!(o instanceof HttpSessionAttributeListener)) {                                                    if (!(o instanceof HttpSessionAttributeListener)) {                                                 
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;                              HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;                           
try {                                                                                                  try {                                                                                               
context.fireContainerEvent("beforeSessionAttributeRemoved", listener);                                 context.fireContainerEvent("beforeSessionAttributeRemoved", listener);                              
if (event == null) {                                                                                   if (event == null) {                                                                                
event = new HttpSessionBindingEvent(getSession(), name, value);                                        event = new HttpSessionBindingEvent(getSession(), name, value);                                     
}                                                                                                      }                                                                                                   
listener.attributeRemoved(event);                                                                      listener.attributeRemoved(event);                                                                   
context.fireContainerEvent("afterSessionAttributeRemoved", listener);                                  context.fireContainerEvent("afterSessionAttributeRemoved", listener);                               
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
try {                                                                                                  try {                                                                                               
context.fireContainerEvent("afterSessionAttributeRemoved", listener);                                  context.fireContainerEvent("afterSessionAttributeRemoved", listener);                               
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"), t);             manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"), t);          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
