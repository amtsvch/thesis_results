/**                                                                                                    /**                                                                                                 
* Stop associated {@link ClassLoader} and implement the requirements                                   * Stop associated {@link ClassLoader} and implement the requirements                                
* of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.                                    * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.                                 
*                                                                                                      *                                                                                                   
* @exception LifecycleException if this component detects a fatal error                                * @exception LifecycleException if this component detects a fatal error                             
*  that prevents this component from being used                                                        *  that prevents this component from being used                                                     
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
protected void stopInternal() throws LifecycleException {                                              protected void stopInternal() throws LifecycleException {                                           
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug(sm.getString("webappLoader.stopping"));                                                      log.debug(sm.getString("webappLoader.stopping"));                                                   
                                                                                                     | }                                                                                                   
setState(LifecycleState.STOPPING);                                                                     setState(LifecycleState.STOPPING);                                                                  
// Remove context attributes as appropriate                                                            // Remove context attributes as appropriate                                                         
ServletContext servletContext = context.getServletContext();                                           ServletContext servletContext = context.getServletContext();                                        
servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);                                               servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);                                            
// Throw away our current class loader if any                                                          // Throw away our current class loader if any                                                       
if (classLoader != null) {                                                                             if (classLoader != null) {                                                                          
try {                                                                                                  try {                                                                                               
classLoader.stop();                                                                                    classLoader.stop();                                                                                 
} finally {                                                                                            } finally {                                                                                         
classLoader.destroy();                                                                                 classLoader.destroy();                                                                              
}                                                                                                      }                                                                                                   
// classLoader must be non-null to have been registered                                                // classLoader must be non-null to have been registered                                             
try {                                                                                                  try {                                                                                               
String contextName = context.getName();                                                                String contextName = context.getName();                                                             
if (!contextName.startsWith("/")) {                                                                    if (!contextName.startsWith("/")) {                                                                 
contextName = "/" + contextName;                                                                       contextName = "/" + contextName;                                                                    
}                                                                                                      }                                                                                                   
ObjectName cloname = new ObjectName(context.getDomain() + ":type=" + classLoader.getClass().getSimpl   ObjectName cloname = new ObjectName(context.getDomain() + ":type=" + classLoader.getClass().getSimpl
Registry.getRegistry(null, null).unregisterComponent(cloname);                                         Registry.getRegistry(null, null).unregisterComponent(cloname);                                      
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
log.warn(sm.getString("webappLoader.stopError"), e);                                                   log.warn(sm.getString("webappLoader.stopError"), e);                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
classLoader = null;                                                                                    classLoader = null;                                                                                 
}                                                                                                      }                                                                                                   
