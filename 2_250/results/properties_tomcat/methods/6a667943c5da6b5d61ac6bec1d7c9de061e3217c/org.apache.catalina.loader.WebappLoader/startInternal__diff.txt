/**                                                                                                    /**                                                                                                 
* Start associated {@link ClassLoader} and implement the requirements                                  * Start associated {@link ClassLoader} and implement the requirements                               
* of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.                                   * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.                                
*                                                                                                      *                                                                                                   
* @exception LifecycleException if this component detects a fatal error                                * @exception LifecycleException if this component detects a fatal error                             
*  that prevents this component from being used                                                        *  that prevents this component from being used                                                     
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
protected void startInternal() throws LifecycleException {                                             protected void startInternal() throws LifecycleException {                                          
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug(sm.getString("webappLoader.starting"));                                                      log.debug(sm.getString("webappLoader.starting"));                                                   
                                                                                                     | }                                                                                                   
if (context.getResources() == null) {                                                                  if (context.getResources() == null) {                                                               
log.info(sm.getString("webappLoader.noResources", context));                                           log.info(sm.getString("webappLoader.noResources", context));                                        
setState(LifecycleState.STARTING);                                                                     setState(LifecycleState.STARTING);                                                                  
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Construct a class loader based on our current repositories list                                     // Construct a class loader based on our current repositories list                                  
try {                                                                                                  try {                                                                                               
classLoader = createClassLoader();                                                                     classLoader = createClassLoader();                                                                  
classLoader.setResources(context.getResources());                                                      classLoader.setResources(context.getResources());                                                   
classLoader.setDelegate(this.delegate);                                                                classLoader.setDelegate(this.delegate);                                                             
// Set Jakarta class converter                                                                         // Set Jakarta class converter                                                                      
if (getJakartaConverter() != null) {                                                                   if (getJakartaConverter() != null) {                                                                
EESpecProfile profile = null;                                                                          EESpecProfile profile = null;                                                                       
try {                                                                                                  try {                                                                                               
profile = EESpecProfile.valueOf(getJakartaConverter());                                                profile = EESpecProfile.valueOf(getJakartaConverter());                                             
} catch (IllegalArgumentException ignored) {                                                           } catch (IllegalArgumentException ignored) {                                                        
// Use default value                                                                                   // Use default value                                                                                
log.warn(sm.getString("webappLoader.unknownProfile", getJakartaConverter()));                          log.warn(sm.getString("webappLoader.unknownProfile", getJakartaConverter()));                       
}                                                                                                      }                                                                                                   
classLoader.addTransformer((profile != null) ? new ClassConverter(profile) : new ClassConverter());    classLoader.addTransformer((profile != null) ? new ClassConverter(profile) : new ClassConverter()); 
}                                                                                                      }                                                                                                   
// Configure our repositories                                                                          // Configure our repositories                                                                       
setClassPath();                                                                                        setClassPath();                                                                                     
setPermissions();                                                                                      setPermissions();                                                                                   
classLoader.start();                                                                                   classLoader.start();                                                                                
String contextName = context.getName();                                                                String contextName = context.getName();                                                             
if (!contextName.startsWith("/")) {                                                                    if (!contextName.startsWith("/")) {                                                                 
contextName = "/" + contextName;                                                                       contextName = "/" + contextName;                                                                    
}                                                                                                      }                                                                                                   
ObjectName cloname = new ObjectName(context.getDomain() + ":type=" + classLoader.getClass().getSimpl   ObjectName cloname = new ObjectName(context.getDomain() + ":type=" + classLoader.getClass().getSimpl
Registry.getRegistry(null, null).registerComponent(classLoader, cloname, null);                        Registry.getRegistry(null, null).registerComponent(classLoader, cloname, null);                     
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
t = ExceptionUtils.unwrapInvocationTargetException(t);                                                 t = ExceptionUtils.unwrapInvocationTargetException(t);                                              
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
throw new LifecycleException(sm.getString("webappLoader.startError"), t);                              throw new LifecycleException(sm.getString("webappLoader.startError"), t);                           
}                                                                                                      }                                                                                                   
setState(LifecycleState.STARTING);                                                                     setState(LifecycleState.STARTING);                                                                  
}                                                                                                      }                                                                                                   
