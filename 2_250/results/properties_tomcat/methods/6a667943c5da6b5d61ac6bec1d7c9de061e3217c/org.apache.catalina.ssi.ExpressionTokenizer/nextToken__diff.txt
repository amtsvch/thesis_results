/**                                                                                                    /**                                                                                                 
* @return the next token type and initializes any state variables                                      * @return the next token type and initializes any state variables                                   
* accordingly.                                                                                         * accordingly.                                                                                      
*/                                                                                                     */                                                                                                  
public int nextToken() {                                                                               public int nextToken() {                                                                            
// Skip any leading white space                                                                        // Skip any leading white space                                                                     
while (index &lt; length && Character.isWhitespace(expr[index])) index++;                            | while (index &lt; length && Character.isWhitespace(expr[index])) {                                  
                                                                                                     | index++;                                                                                            
                                                                                                     | }                                                                                                   
// Clear the current token val                                                                         // Clear the current token val                                                                      
tokenVal = null;                                                                                       tokenVal = null;                                                                                    
                                                                                                     | if (index == length) {                                                                              
// End of string                                                                                       // End of string                                                                                    
if (index == length)                                                                                 |                                                                                                     
return TOKEN_END;                                                                                      return TOKEN_END;                                                                                   
                                                                                                     | }                                                                                                   
int start = index;                                                                                     int start = index;                                                                                  
char currentChar = expr[index];                                                                        char currentChar = expr[index];                                                                     
char nextChar = (char) 0;                                                                              char nextChar = (char) 0;                                                                           
index++;                                                                                               index++;                                                                                            
if (index &lt; length)                                                                               | if (index &lt; length) {                                                                            
nextChar = expr[index];                                                                                nextChar = expr[index];                                                                             
                                                                                                     | }                                                                                                   
// Check for a known token start                                                                       // Check for a known token start                                                                    
switch(currentChar) {                                                                                  switch(currentChar) {                                                                               
case '(':                                                                                              case '(':                                                                                           
return TOKEN_LBRACE;                                                                                   return TOKEN_LBRACE;                                                                                
case ')':                                                                                              case ')':                                                                                           
return TOKEN_RBRACE;                                                                                   return TOKEN_RBRACE;                                                                                
case '=':                                                                                              case '=':                                                                                           
return TOKEN_EQ;                                                                                       return TOKEN_EQ;                                                                                    
case '!':                                                                                              case '!':                                                                                           
if (nextChar == '=') {                                                                                 if (nextChar == '=') {                                                                              
index++;                                                                                               index++;                                                                                            
return TOKEN_NOT_EQ;                                                                                   return TOKEN_NOT_EQ;                                                                                
}                                                                                                      }                                                                                                   
return TOKEN_NOT;                                                                                      return TOKEN_NOT;                                                                                   
case '|':                                                                                              case '|':                                                                                           
if (nextChar == '|') {                                                                                 if (nextChar == '|') {                                                                              
index++;                                                                                               index++;                                                                                            
return TOKEN_OR;                                                                                       return TOKEN_OR;                                                                                    
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
case '&':                                                                                              case '&':                                                                                           
if (nextChar == '&') {                                                                                 if (nextChar == '&') {                                                                              
index++;                                                                                               index++;                                                                                            
return TOKEN_AND;                                                                                      return TOKEN_AND;                                                                                   
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
case '&gt;':                                                                                           case '&gt;':                                                                                        
if (nextChar == '=') {                                                                                 if (nextChar == '=') {                                                                              
index++;                                                                                               index++;                                                                                            
// Greater than or equal                                                                               // Greater than or equal                                                                            
return TOKEN_GE;                                                                                       return TOKEN_GE;                                                                                    
}                                                                                                      }                                                                                                   
// Greater than                                                                                        // Greater than                                                                                     
return TOKEN_GT;                                                                                       return TOKEN_GT;                                                                                    
case '&lt;':                                                                                           case '&lt;':                                                                                        
if (nextChar == '=') {                                                                                 if (nextChar == '=') {                                                                              
index++;                                                                                               index++;                                                                                            
// Less than or equal                                                                                  // Less than or equal                                                                               
return TOKEN_LE;                                                                                       return TOKEN_LE;                                                                                    
}                                                                                                      }                                                                                                   
// Less than                                                                                           // Less than                                                                                        
return TOKEN_LT;                                                                                       return TOKEN_LT;                                                                                    
default:                                                                                               default:                                                                                            
// Otherwise it's a string                                                                             // Otherwise it's a string                                                                          
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
int end = index;                                                                                       int end = index;                                                                                    
if (currentChar == '"' || currentChar == '\'') {                                                       if (currentChar == '"' || currentChar == '\'') {                                                    
// It's a quoted string and the end is the next unescaped quote                                        // It's a quoted string and the end is the next unescaped quote                                     
char endChar = currentChar;                                                                            char endChar = currentChar;                                                                         
boolean escaped = false;                                                                               boolean escaped = false;                                                                            
start++;                                                                                               start++;                                                                                            
for (; index &lt; length; index++) {                                                                   for (; index &lt; length; index++) {                                                                
if (expr[index] == '\\' && !escaped) {                                                                 if (expr[index] == '\\' && !escaped) {                                                              
escaped = true;                                                                                        escaped = true;                                                                                     
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (expr[index] == endChar && !escaped)                                                              | if (expr[index] == endChar && !escaped) {                                                           
break;                                                                                                 break;                                                                                              
                                                                                                     | }                                                                                                   
escaped = false;                                                                                       escaped = false;                                                                                    
}                                                                                                      }                                                                                                   
end = index;                                                                                           end = index;                                                                                        
// Skip the end quote                                                                                  // Skip the end quote                                                                               
index++;                                                                                               index++;                                                                                            
} else if (currentChar == '/') {                                                                       } else if (currentChar == '/') {                                                                    
// It's a regular expression and the end is the next unescaped /                                       // It's a regular expression and the end is the next unescaped /                                    
char endChar = currentChar;                                                                            char endChar = currentChar;                                                                         
boolean escaped = false;                                                                               boolean escaped = false;                                                                            
for (; index &lt; length; index++) {                                                                   for (; index &lt; length; index++) {                                                                
if (expr[index] == '\\' && !escaped) {                                                                 if (expr[index] == '\\' && !escaped) {                                                              
escaped = true;                                                                                        escaped = true;                                                                                     
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (expr[index] == endChar && !escaped)                                                              | if (expr[index] == endChar && !escaped) {                                                           
break;                                                                                                 break;                                                                                              
                                                                                                     | }                                                                                                   
escaped = false;                                                                                       escaped = false;                                                                                    
}                                                                                                      }                                                                                                   
end = ++index;                                                                                         end = ++index;                                                                                      
} else {                                                                                               } else {                                                                                            
// End is the next whitespace character                                                                // End is the next whitespace character                                                             
for (; index &lt; length; index++) {                                                                   for (; index &lt; length; index++) {                                                                
if (isMetaChar(expr[index]))                                                                         | if (isMetaChar(expr[index])) {                                                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
end = index;                                                                                           end = index;                                                                                        
}                                                                                                      }                                                                                                   
// Extract the string from the array                                                                   // Extract the string from the array                                                                
this.tokenVal = new String(expr, start, end - start);                                                  this.tokenVal = new String(expr, start, end - start);                                               
return TOKEN_STRING;                                                                                   return TOKEN_STRING;                                                                                
}                                                                                                      }                                                                                                   
