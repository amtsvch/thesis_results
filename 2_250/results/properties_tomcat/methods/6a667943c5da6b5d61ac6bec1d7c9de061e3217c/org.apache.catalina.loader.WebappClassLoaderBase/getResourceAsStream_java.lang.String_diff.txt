/**                                                                                                    /**                                                                                                 
* Find the resource with the given name, and return an input stream                                    * Find the resource with the given name, and return an input stream                                 
* that can be used for reading it.  The search order is as described                                   * that can be used for reading it.  The search order is as described                                
* for &lt;code&gt;getResource()&lt;/code&gt;, after checking to see if the resource                    * for &lt;code&gt;getResource()&lt;/code&gt;, after checking to see if the resource                 
* data has been previously cached.  If the resource cannot be found,                                   * data has been previously cached.  If the resource cannot be found,                                
* return &lt;code&gt;null&lt;/code&gt;.                                                                * return &lt;code&gt;null&lt;/code&gt;.                                                             
*                                                                                                      *                                                                                                   
* @param name Name of the resource to return an input stream for                                       * @param name Name of the resource to return an input stream for                                    
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public InputStream getResourceAsStream(String name) {                                                  public InputStream getResourceAsStream(String name) {                                               
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("getResourceAsStream(" + name + ")");                                                        log.debug("getResourceAsStream(" + name + ")");                                                     
                                                                                                     | }                                                                                                   
checkStateForResourceLoading(name);                                                                    checkStateForResourceLoading(name);                                                                 
InputStream stream = null;                                                                             InputStream stream = null;                                                                          
boolean delegateFirst = delegate || filter(name, false);                                               boolean delegateFirst = delegate || filter(name, false);                                            
// (1) Delegate to parent if requested                                                                 // (1) Delegate to parent if requested                                                              
if (delegateFirst) {                                                                                   if (delegateFirst) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Delegating to parent classloader " + parent);                                             log.debug("  Delegating to parent classloader " + parent);                                          
                                                                                                     | }                                                                                                   
stream = parent.getResourceAsStream(name);                                                             stream = parent.getResourceAsStream(name);                                                          
if (stream != null) {                                                                                  if (stream != null) {                                                                               
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  --&gt; Returning stream from parent");                                                    log.debug("  --&gt; Returning stream from parent");                                                 
                                                                                                     | }                                                                                                   
return stream;                                                                                         return stream;                                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// (2) Search local repositories                                                                       // (2) Search local repositories                                                                    
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Searching local repositories");                                                           log.debug("  Searching local repositories");                                                        
                                                                                                     | }                                                                                                   
String path = nameToPath(name);                                                                        String path = nameToPath(name);                                                                     
WebResource resource = resources.getClassLoaderResource(path);                                         WebResource resource = resources.getClassLoaderResource(path);                                      
if (resource.exists()) {                                                                               if (resource.exists()) {                                                                            
stream = resource.getInputStream();                                                                    stream = resource.getInputStream();                                                                 
// Filter out .class resources through the ClassFileTranformer                                         // Filter out .class resources through the ClassFileTranformer                                      
if (name.endsWith(CLASS_FILE_SUFFIX) && transformers.size() &gt; 0) {                                  if (name.endsWith(CLASS_FILE_SUFFIX) && transformers.size() &gt; 0) {                               
// If the resource is a class, decorate it with any attached transformers                              // If the resource is a class, decorate it with any attached transformers                           
ByteArrayOutputStream baos = new ByteArrayOutputStream();                                              ByteArrayOutputStream baos = new ByteArrayOutputStream();                                           
byte[] buf = new byte[8192];                                                                           byte[] buf = new byte[8192];                                                                        
int numRead;                                                                                           int numRead;                                                                                        
try {                                                                                                  try {                                                                                               
while ((numRead = stream.read(buf)) &gt;= 0) {                                                         while ((numRead = stream.read(buf)) &gt;= 0) {                                                      
baos.write(buf, 0, numRead);                                                                           baos.write(buf, 0, numRead);                                                                        
}                                                                                                      }                                                                                                   
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
log.error(sm.getString("webappClassLoader.transformError", name), e);                                  log.error(sm.getString("webappClassLoader.transformError", name), e);                               
return null;                                                                                           return null;                                                                                        
} finally {                                                                                            } finally {                                                                                         
try {                                                                                                  try {                                                                                               
stream.close();                                                                                        stream.close();                                                                                     
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
byte[] binaryContent = baos.toByteArray();                                                             byte[] binaryContent = baos.toByteArray();                                                          
String internalName = path.substring(1, path.length() - CLASS_FILE_SUFFIX.length());                   String internalName = path.substring(1, path.length() - CLASS_FILE_SUFFIX.length());                
for (ClassFileTransformer transformer : this.transformers) {                                           for (ClassFileTransformer transformer : this.transformers) {                                        
try {                                                                                                  try {                                                                                               
byte[] transformed = transformer.transform(this, internalName, null, null, binaryContent);             byte[] transformed = transformer.transform(this, internalName, null, null, binaryContent);          
if (transformed != null) {                                                                             if (transformed != null) {                                                                          
binaryContent = transformed;                                                                           binaryContent = transformed;                                                                        
}                                                                                                      }                                                                                                   
} catch (IllegalClassFormatException e) {                                                              } catch (IllegalClassFormatException e) {                                                           
log.error(sm.getString("webappClassLoader.transformError", name), e);                                  log.error(sm.getString("webappClassLoader.transformError", name), e);                               
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
stream = new ByteArrayInputStream(binaryContent);                                                      stream = new ByteArrayInputStream(binaryContent);                                                   
}                                                                                                      }                                                                                                   
trackLastModified(path, resource);                                                                     trackLastModified(path, resource);                                                                  
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
if (hasExternalRepositories && stream == null) {                                                       if (hasExternalRepositories && stream == null) {                                                    
URL url = super.findResource(name);                                                                    URL url = super.findResource(name);                                                                 
if (url != null) {                                                                                     if (url != null) {                                                                                  
stream = url.openStream();                                                                             stream = url.openStream();                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
if (stream != null) {                                                                                  if (stream != null) {                                                                               
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  --&gt; Returning stream from local");                                                     log.debug("  --&gt; Returning stream from local");                                                  
                                                                                                     | }                                                                                                   
return stream;                                                                                         return stream;                                                                                      
}                                                                                                      }                                                                                                   
// (3) Delegate to parent unconditionally                                                              // (3) Delegate to parent unconditionally                                                           
if (!delegateFirst) {                                                                                  if (!delegateFirst) {                                                                               
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Delegating to parent classloader unconditionally " + parent);                             log.debug("  Delegating to parent classloader unconditionally " + parent);                          
                                                                                                     | }                                                                                                   
stream = parent.getResourceAsStream(name);                                                             stream = parent.getResourceAsStream(name);                                                          
if (stream != null) {                                                                                  if (stream != null) {                                                                               
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  --&gt; Returning stream from parent");                                                    log.debug("  --&gt; Returning stream from parent");                                                 
                                                                                                     | }                                                                                                   
return stream;                                                                                         return stream;                                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// (4) Resource was not found                                                                          // (4) Resource was not found                                                                       
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  --&gt; Resource not found, returning null");                                              log.debug("  --&gt; Resource not found, returning null");                                           
                                                                                                     | }                                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
