/**                                                                                                    /**                                                                                                 
* Load the class with the specified name, searching using the following                                * Load the class with the specified name, searching using the following                             
* algorithm until it finds and returns the class.  If the class cannot                                 * algorithm until it finds and returns the class.  If the class cannot                              
* be found, returns &lt;code&gt;ClassNotFoundException&lt;/code&gt;.                                   * be found, returns &lt;code&gt;ClassNotFoundException&lt;/code&gt;.                                
* &lt;ul&gt;                                                                                           * &lt;ul&gt;                                                                                        
* &lt;li&gt;Call &lt;code&gt;findLoadedClass(String)&lt;/code&gt; to check if the                      * &lt;li&gt;Call &lt;code&gt;findLoadedClass(String)&lt;/code&gt; to check if the                   
*     class has already been loaded.  If it has, the same                                              *     class has already been loaded.  If it has, the same                                           
*     &lt;code&gt;Class&lt;/code&gt; object is returned.&lt;/li&gt;                                    *     &lt;code&gt;Class&lt;/code&gt; object is returned.&lt;/li&gt;                                 
* &lt;li&gt;If the &lt;code&gt;delegate&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt   * &lt;li&gt;If the &lt;code&gt;delegate&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt
*     call the &lt;code&gt;loadClass()&lt;/code&gt; method of the parent class                         *     call the &lt;code&gt;loadClass()&lt;/code&gt; method of the parent class                      
*     loader, if any.&lt;/li&gt;                                                                       *     loader, if any.&lt;/li&gt;                                                                    
* &lt;li&gt;Call &lt;code&gt;findClass()&lt;/code&gt; to find this class in our locally                * &lt;li&gt;Call &lt;code&gt;findClass()&lt;/code&gt; to find this class in our locally             
*     defined repositories.&lt;/li&gt;                                                                 *     defined repositories.&lt;/li&gt;                                                              
* &lt;li&gt;Call the &lt;code&gt;loadClass()&lt;/code&gt; method of our parent                         * &lt;li&gt;Call the &lt;code&gt;loadClass()&lt;/code&gt; method of our parent                      
*     class loader, if any.&lt;/li&gt;                                                                 *     class loader, if any.&lt;/li&gt;                                                              
* &lt;/ul&gt;                                                                                          * &lt;/ul&gt;                                                                                       
* If the class was found using the above steps, and the                                                * If the class was found using the above steps, and the                                             
* &lt;code&gt;resolve&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;, this method will then        * &lt;code&gt;resolve&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;, this method will then     
* call &lt;code&gt;resolveClass(Class)&lt;/code&gt; on the resulting Class object.                     * call &lt;code&gt;resolveClass(Class)&lt;/code&gt; on the resulting Class object.                  
*                                                                                                      *                                                                                                   
* @param name The binary name of the class to be loaded                                                * @param name The binary name of the class to be loaded                                             
* @param resolve If &lt;code&gt;true&lt;/code&gt; then resolve the class                               * @param resolve If &lt;code&gt;true&lt;/code&gt; then resolve the class                            
*                                                                                                      *                                                                                                   
* @exception ClassNotFoundException if the class was not found                                         * @exception ClassNotFoundException if the class was not found                                      
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException {          public Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException {       
synchronized (JreCompat.isGraalAvailable() ? this : getClassLoadingLock(name)) {                       synchronized (JreCompat.isGraalAvailable() ? this : getClassLoadingLock(name)) {                    
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("loadClass(" + name + ", " + resolve + ")");                                                 log.debug("loadClass(" + name + ", " + resolve + ")");                                              
                                                                                                     | }                                                                                                   
Class&lt;?&gt; clazz = null;                                                                           Class&lt;?&gt; clazz = null;                                                                        
// Log access to stopped class loader                                                                  // Log access to stopped class loader                                                               
checkStateForClassLoading(name);                                                                       checkStateForClassLoading(name);                                                                    
// (0) Check our previously loaded local class cache                                                   // (0) Check our previously loaded local class cache                                                
clazz = findLoadedClass0(name);                                                                        clazz = findLoadedClass0(name);                                                                     
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Returning class from cache");                                                             log.debug("  Returning class from cache");                                                          
if (resolve)                                                                                         | }                                                                                                   
                                                                                                     | if (resolve) {                                                                                      
resolveClass(clazz);                                                                                   resolveClass(clazz);                                                                                
                                                                                                     | }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
// (0.1) Check our previously loaded class cache                                                       // (0.1) Check our previously loaded class cache                                                    
clazz = JreCompat.isGraalAvailable() ? null : findLoadedClass(name);                                   clazz = JreCompat.isGraalAvailable() ? null : findLoadedClass(name);                                
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Returning class from cache");                                                             log.debug("  Returning class from cache");                                                          
if (resolve)                                                                                         | }                                                                                                   
                                                                                                     | if (resolve) {                                                                                      
resolveClass(clazz);                                                                                   resolveClass(clazz);                                                                                
                                                                                                     | }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
// (0.2) Try loading the class with the system class loader, to prevent                                // (0.2) Try loading the class with the system class loader, to prevent                             
// the webapp from overriding Java SE classes. This implements                                         // the webapp from overriding Java SE classes. This implements                                      
// SRV.10.7.2                                                                                          // SRV.10.7.2                                                                                       
String resourceName = binaryNameToPath(name, false);                                                   String resourceName = binaryNameToPath(name, false);                                                
ClassLoader javaseLoader = getJavaseClassLoader();                                                     ClassLoader javaseLoader = getJavaseClassLoader();                                                  
boolean tryLoadingFromJavaseLoader;                                                                    boolean tryLoadingFromJavaseLoader;                                                                 
try {                                                                                                  try {                                                                                               
// Use getResource as it won't trigger an expensive                                                    // Use getResource as it won't trigger an expensive                                                 
// ClassNotFoundException if the resource is not available from                                        // ClassNotFoundException if the resource is not available from                                     
// the Java SE class loader. However (see                                                              // the Java SE class loader. However (see                                                           
// https://bz.apache.org/bugzilla/show_bug.cgi?id=58125 for                                            // https://bz.apache.org/bugzilla/show_bug.cgi?id=58125 for                                         
// details) when running under a security manager in rare cases                                        // details) when running under a security manager in rare cases                                     
// this call may trigger a ClassCircularityError.                                                      // this call may trigger a ClassCircularityError.                                                   
// See https://bz.apache.org/bugzilla/show_bug.cgi?id=61424 for                                        // See https://bz.apache.org/bugzilla/show_bug.cgi?id=61424 for                                     
// details of how this may trigger a StackOverflowError                                                // details of how this may trigger a StackOverflowError                                             
// Given these reported errors, catch Throwable to ensure any                                          // Given these reported errors, catch Throwable to ensure any                                       
// other edge cases are also caught                                                                    // other edge cases are also caught                                                                 
URL url;                                                                                               URL url;                                                                                            
if (securityManager != null) {                                                                         if (securityManager != null) {                                                                      
PrivilegedAction&lt;URL&gt; dp = new PrivilegedJavaseGetResource(resourceName);                        PrivilegedAction&lt;URL&gt; dp = new PrivilegedJavaseGetResource(resourceName);                     
url = AccessController.doPrivileged(dp);                                                               url = AccessController.doPrivileged(dp);                                                            
} else {                                                                                               } else {                                                                                            
url = javaseLoader.getResource(resourceName);                                                          url = javaseLoader.getResource(resourceName);                                                       
}                                                                                                      }                                                                                                   
tryLoadingFromJavaseLoader = (url != null);                                                            tryLoadingFromJavaseLoader = (url != null);                                                         
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
// Swallow all exceptions apart from those that must be re-thrown                                      // Swallow all exceptions apart from those that must be re-thrown                                   
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
// The getResource() trick won't work for this class. We have to                                       // The getResource() trick won't work for this class. We have to                                    
// try loading it directly and accept that we might get a                                              // try loading it directly and accept that we might get a                                           
// ClassNotFoundException.                                                                             // ClassNotFoundException.                                                                          
tryLoadingFromJavaseLoader = true;                                                                     tryLoadingFromJavaseLoader = true;                                                                  
}                                                                                                      }                                                                                                   
if (tryLoadingFromJavaseLoader) {                                                                      if (tryLoadingFromJavaseLoader) {                                                                   
try {                                                                                                  try {                                                                                               
clazz = javaseLoader.loadClass(name);                                                                  clazz = javaseLoader.loadClass(name);                                                               
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
if (resolve)                                                                                         | if (resolve) {                                                                                      
resolveClass(clazz);                                                                                   resolveClass(clazz);                                                                                
                                                                                                     | }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// (0.5) Permission to access this class when using a SecurityManager                                  // (0.5) Permission to access this class when using a SecurityManager                               
if (securityManager != null) {                                                                         if (securityManager != null) {                                                                      
int i = name.lastIndexOf('.');                                                                         int i = name.lastIndexOf('.');                                                                      
if (i &gt;= 0) {                                                                                       if (i &gt;= 0) {                                                                                    
try {                                                                                                  try {                                                                                               
securityManager.checkPackageAccess(name.substring(0, i));                                              securityManager.checkPackageAccess(name.substring(0, i));                                           
} catch (SecurityException se) {                                                                       } catch (SecurityException se) {                                                                    
String error = sm.getString("webappClassLoader.restrictedPackage", name);                              String error = sm.getString("webappClassLoader.restrictedPackage", name);                           
log.info(error, se);                                                                                   log.info(error, se);                                                                                
throw new ClassNotFoundException(error, se);                                                           throw new ClassNotFoundException(error, se);                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
boolean delegateLoad = delegate || filter(name, true);                                                 boolean delegateLoad = delegate || filter(name, true);                                              
// (1) Delegate to our parent if requested                                                             // (1) Delegate to our parent if requested                                                          
if (delegateLoad) {                                                                                    if (delegateLoad) {                                                                                 
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Delegating to parent classloader1 " + parent);                                            log.debug("  Delegating to parent classloader1 " + parent);                                         
                                                                                                     | }                                                                                                   
try {                                                                                                  try {                                                                                               
clazz = Class.forName(name, false, parent);                                                            clazz = Class.forName(name, false, parent);                                                         
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Loading class from parent");                                                              log.debug("  Loading class from parent");                                                           
if (resolve)                                                                                         | }                                                                                                   
                                                                                                     | if (resolve) {                                                                                      
resolveClass(clazz);                                                                                   resolveClass(clazz);                                                                                
                                                                                                     | }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// (2) Search local repositories                                                                       // (2) Search local repositories                                                                    
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Searching local repositories");                                                           log.debug("  Searching local repositories");                                                        
                                                                                                     | }                                                                                                   
try {                                                                                                  try {                                                                                               
clazz = findClass(name);                                                                               clazz = findClass(name);                                                                            
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Loading class from local repository");                                                    log.debug("  Loading class from local repository");                                                 
if (resolve)                                                                                         | }                                                                                                   
                                                                                                     | if (resolve) {                                                                                      
resolveClass(clazz);                                                                                   resolveClass(clazz);                                                                                
                                                                                                     | }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
// (3) Delegate to parent unconditionally                                                              // (3) Delegate to parent unconditionally                                                           
if (!delegateLoad) {                                                                                   if (!delegateLoad) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Delegating to parent classloader at end: " + parent);                                     log.debug("  Delegating to parent classloader at end: " + parent);                                  
                                                                                                     | }                                                                                                   
try {                                                                                                  try {                                                                                               
clazz = Class.forName(name, false, parent);                                                            clazz = Class.forName(name, false, parent);                                                         
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("  Loading class from parent");                                                              log.debug("  Loading class from parent");                                                           
if (resolve)                                                                                         | }                                                                                                   
                                                                                                     | if (resolve) {                                                                                      
resolveClass(clazz);                                                                                   resolveClass(clazz);                                                                                
                                                                                                     | }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
throw new ClassNotFoundException(name);                                                                throw new ClassNotFoundException(name);                                                             
}                                                                                                      }                                                                                                   
