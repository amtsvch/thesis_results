// ------------------------------------------------------ Protected Methods                            // ------------------------------------------------------ Protected Methods                         
/**                                                                                                    /**                                                                                                 
* Look for a session in the Store and, if found, restore                                               * Look for a session in the Store and, if found, restore                                            
* it in the Manager's list of active sessions if appropriate.                                          * it in the Manager's list of active sessions if appropriate.                                       
* The session will be removed from the Store after swapping                                            * The session will be removed from the Store after swapping                                         
* in, but will not be added to the active session list if it                                           * in, but will not be added to the active session list if it                                        
* is invalid or past its expiration.                                                                   * is invalid or past its expiration.                                                                
*                                                                                                      *                                                                                                   
* @param id The id of the session that should be swapped in                                            * @param id The id of the session that should be swapped in                                         
* @return restored session, or {@code null}, if none is found                                          * @return restored session, or {@code null}, if none is found                                       
* @throws IOException an IO error occurred                                                             * @throws IOException an IO error occurred                                                          
*/                                                                                                     */                                                                                                  
protected Session swapIn(String id) throws IOException {                                               protected Session swapIn(String id) throws IOException {                                            
if (store == null)                                                                                   | if (store == null) {                                                                                
return null;                                                                                           return null;                                                                                        
                                                                                                     | }                                                                                                   
Object swapInLock = null;                                                                              Object swapInLock = null;                                                                           
/*                                                                                                     /*                                                                                                  
* The purpose of this sync and these locks is to make sure that a                                      * The purpose of this sync and these locks is to make sure that a                                   
* session is only loaded once. It doesn't matter if the lock is removed                                * session is only loaded once. It doesn't matter if the lock is removed                             
* and then another thread enters this method and tries to load the same                                * and then another thread enters this method and tries to load the same                             
* session. That thread will re-create a swapIn lock for that session,                                  * session. That thread will re-create a swapIn lock for that session,                               
* quickly find that the session is already in sessions, use it and                                     * quickly find that the session is already in sessions, use it and                                  
* carry on.                                                                                            * carry on.                                                                                         
*/                                                                                                     */                                                                                                  
synchronized (this) {                                                                                  synchronized (this) {                                                                               
swapInLock = sessionSwapInLocks.get(id);                                                               swapInLock = sessionSwapInLocks.get(id);                                                            
if (swapInLock == null) {                                                                              if (swapInLock == null) {                                                                           
swapInLock = new Object();                                                                             swapInLock = new Object();                                                                          
sessionSwapInLocks.put(id, swapInLock);                                                                sessionSwapInLocks.put(id, swapInLock);                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
Session session = null;                                                                                Session session = null;                                                                             
synchronized (swapInLock) {                                                                            synchronized (swapInLock) {                                                                         
// First check to see if another thread has loaded the session into                                    // First check to see if another thread has loaded the session into                                 
// the manager                                                                                         // the manager                                                                                      
session = sessions.get(id);                                                                            session = sessions.get(id);                                                                         
if (session == null) {                                                                                 if (session == null) {                                                                              
Session currentSwapInSession = sessionToSwapIn.get();                                                  Session currentSwapInSession = sessionToSwapIn.get();                                               
try {                                                                                                  try {                                                                                               
if (currentSwapInSession == null || !id.equals(currentSwapInSession.getId())) {                        if (currentSwapInSession == null || !id.equals(currentSwapInSession.getId())) {                     
session = loadSessionFromStore(id);                                                                    session = loadSessionFromStore(id);                                                                 
sessionToSwapIn.set(session);                                                                          sessionToSwapIn.set(session);                                                                       
if (session != null && !session.isValid()) {                                                           if (session != null && !session.isValid()) {                                                        
log.error(sm.getString("persistentManager.swapInInvalid", id));                                        log.error(sm.getString("persistentManager.swapInInvalid", id));                                     
session.expire();                                                                                      session.expire();                                                                                   
removeSession(id);                                                                                     removeSession(id);                                                                                  
session = null;                                                                                        session = null;                                                                                     
}                                                                                                      }                                                                                                   
if (session != null) {                                                                                 if (session != null) {                                                                              
reactivateLoadedSession(id, session);                                                                  reactivateLoadedSession(id, session);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
sessionToSwapIn.remove();                                                                              sessionToSwapIn.remove();                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Make sure the lock is removed                                                                       // Make sure the lock is removed                                                                    
synchronized (this) {                                                                                  synchronized (this) {                                                                               
sessionSwapInLocks.remove(id);                                                                         sessionSwapInLocks.remove(id);                                                                      
}                                                                                                      }                                                                                                   
return session;                                                                                        return session;                                                                                     
}                                                                                                      }                                                                                                   
