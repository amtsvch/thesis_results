/**                                                                                                    /**                                                                                                 
* Swap idle sessions out to Store if too many are active                                               * Swap idle sessions out to Store if too many are active                                            
*/                                                                                                     */                                                                                                  
protected void processMaxActiveSwaps() {                                                               protected void processMaxActiveSwaps() {                                                            
if (!getState().isAvailable() || minIdleSwap &lt; 0 || getMaxActiveSessions() &lt; 0) {                if (!getState().isAvailable() || minIdleSwap &lt; 0 || getMaxActiveSessions() &lt; 0) {             
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
Session[] sessions = findSessions();                                                                   Session[] sessions = findSessions();                                                                
// FIXME: Smarter algorithm (LRU)                                                                      // FIXME: Smarter algorithm (LRU)                                                                   
int limit = (int) (getMaxActiveSessions() * 0.9);                                                      int limit = (int) (getMaxActiveSessions() * 0.9);                                                   
if (limit &gt;= sessions.length)                                                                     | if (limit &gt;= sessions.length) {                                                                  
return;                                                                                                return;                                                                                             
if (log.isDebugEnabled())                                                                            | }                                                                                                   
                                                                                                     | if (log.isDebugEnabled()) {                                                                         
log.debug(sm.getString("persistentManager.tooManyActive", Integer.valueOf(sessions.length)));          log.debug(sm.getString("persistentManager.tooManyActive", Integer.valueOf(sessions.length)));       
                                                                                                     | }                                                                                                   
int toswap = sessions.length - limit;                                                                  int toswap = sessions.length - limit;                                                               
for (int i = 0; i &lt; sessions.length && toswap &gt; 0; i++) {                                        for (int i = 0; i &lt; sessions.length && toswap &gt; 0; i++) {                                     
StandardSession session = (StandardSession) sessions[i];                                               StandardSession session = (StandardSession) sessions[i];                                            
synchronized (session) {                                                                               synchronized (session) {                                                                            
int timeIdle = (int) (session.getIdleTimeInternal() / 1000L);                                          int timeIdle = (int) (session.getIdleTimeInternal() / 1000L);                                       
if (timeIdle &gt;= minIdleSwap) {                                                                      if (timeIdle &gt;= minIdleSwap) {                                                                   
if (session.accessCount != null && session.accessCount.get() &gt; 0) {                                 if (session.accessCount != null && session.accessCount.get() &gt; 0) {                              
// Session is currently being accessed - skip it                                                       // Session is currently being accessed - skip it                                                    
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug(sm.getString("persistentManager.swapTooManyActive", session.getIdInternal(), Integer.value   log.debug(sm.getString("persistentManager.swapTooManyActive", session.getIdInternal(), Integer.value
                                                                                                     | }                                                                                                   
try {                                                                                                  try {                                                                                               
swapOut(session);                                                                                      swapOut(session);                                                                                   
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
// This is logged in writeSession()                                                                    // This is logged in writeSession()                                                                 
}                                                                                                      }                                                                                                   
toswap--;                                                                                              toswap--;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
