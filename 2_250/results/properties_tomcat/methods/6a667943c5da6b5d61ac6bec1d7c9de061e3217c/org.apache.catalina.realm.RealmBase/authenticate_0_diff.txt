/**                                                                                                    /**                                                                                                 
* Try to authenticate with the specified username, which                                               * Try to authenticate with the specified username, which                                            
* matches the digest calculated using the given parameters using the                                   * matches the digest calculated using the given parameters using the                                
* method described in RFC 2617 (which is a superset of RFC 2069).                                      * method described in RFC 2617 (which is a superset of RFC 2069).                                   
*                                                                                                      *                                                                                                   
* @param username Username of the Principal to look up                                                 * @param username Username of the Principal to look up                                              
* @param clientDigest Digest which has been submitted by the client                                    * @param clientDigest Digest which has been submitted by the client                                 
* @param nonce Unique (or supposedly unique) token which has been used                                 * @param nonce Unique (or supposedly unique) token which has been used                              
* for this request                                                                                     * for this request                                                                                  
* @param nc the nonce counter                                                                          * @param nc the nonce counter                                                                       
* @param cnonce the client chosen nonce                                                                * @param cnonce the client chosen nonce                                                             
* @param qop the "quality of protection" (&lt;code&gt;nc&lt;/code&gt; and &lt;code&gt;cnonce&lt;/cod   * @param qop the "quality of protection" (&lt;code&gt;nc&lt;/code&gt; and &lt;code&gt;cnonce&lt;/cod
*        will only be used, if &lt;code&gt;qop&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;).     *        will only be used, if &lt;code&gt;qop&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;).  
* @param realm Realm name                                                                              * @param realm Realm name                                                                           
* @param md5a2 Second MD5 digest used to calculate the digest :                                        * @param md5a2 Second MD5 digest used to calculate the digest :                                     
* MD5(Method + ":" + uri)                                                                              * MD5(Method + ":" + uri)                                                                           
* @return the associated principal, or &lt;code&gt;null&lt;/code&gt; if there is none.                 * @return the associated principal, or &lt;code&gt;null&lt;/code&gt; if there is none.              
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public Principal authenticate(String username, String clientDigest, String nonce, String nc, String    public Principal authenticate(String username, String clientDigest, String nonce, String nc, String 
// In digest auth, digests are always lower case                                                       // In digest auth, digests are always lower case                                                    
String md5a1 = getDigest(username, realm);                                                             String md5a1 = getDigest(username, realm);                                                          
if (md5a1 == null)                                                                                   | if (md5a1 == null) {                                                                                
return null;                                                                                           return null;                                                                                        
                                                                                                     | }                                                                                                   
md5a1 = md5a1.toLowerCase(Locale.ENGLISH);                                                             md5a1 = md5a1.toLowerCase(Locale.ENGLISH);                                                          
String serverDigestValue;                                                                              String serverDigestValue;                                                                           
if (qop == null) {                                                                                     if (qop == null) {                                                                                  
serverDigestValue = md5a1 + ":" + nonce + ":" + md5a2;                                                 serverDigestValue = md5a1 + ":" + nonce + ":" + md5a2;                                              
} else {                                                                                               } else {                                                                                            
serverDigestValue = md5a1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + md5a2;           serverDigestValue = md5a1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + md5a2;        
}                                                                                                      }                                                                                                   
byte[] valueBytes = null;                                                                              byte[] valueBytes = null;                                                                           
try {                                                                                                  try {                                                                                               
valueBytes = serverDigestValue.getBytes(getDigestCharset());                                           valueBytes = serverDigestValue.getBytes(getDigestCharset());                                        
} catch (UnsupportedEncodingException uee) {                                                           } catch (UnsupportedEncodingException uee) {                                                        
throw new IllegalArgumentException(sm.getString("realmBase.invalidDigestEncoding", getDigestEncoding   throw new IllegalArgumentException(sm.getString("realmBase.invalidDigestEncoding", getDigestEncoding
}                                                                                                      }                                                                                                   
String serverDigest = MD5Encoder.encode(ConcurrentMessageDigest.digestMD5(valueBytes));                String serverDigest = MD5Encoder.encode(ConcurrentMessageDigest.digestMD5(valueBytes));             
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug("Digest : " + clientDigest + " Username:" + username + " ClientDigest:" + clientDigest + "   log.debug("Digest : " + clientDigest + " Username:" + username + " ClientDigest:" + clientDigest + "
}                                                                                                      }                                                                                                   
if (serverDigest.equals(clientDigest)) {                                                               if (serverDigest.equals(clientDigest)) {                                                            
return getPrincipal(username);                                                                         return getPrincipal(username);                                                                      
}                                                                                                      }                                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
