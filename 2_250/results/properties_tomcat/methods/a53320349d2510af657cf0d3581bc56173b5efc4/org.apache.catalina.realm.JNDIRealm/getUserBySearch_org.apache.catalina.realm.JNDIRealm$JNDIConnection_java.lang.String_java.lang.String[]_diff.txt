/**
 * Search the directory to return a User object containing
 * information about the user with the specified username, if
 * found in the directory; otherwise return <code>null</code>.
 *
 * @param connection The directory context
 * @param username The username
 * @param attrIds String[]containing names of attributes to retrieve.
 * @return the User object
 * @exception NamingException if a directory server error occurs
 */
protected User getUserBySearch(JNDIConnection connection, String username, String[] attrIds) throws NamingException {
    if (username == null || connection.userSearchFormat == null) {
        return null;
    }
    // Form the search filter
    // Escape in case username contains a character with special meaning in
    // a search filter.
    String filter = connection.userSearchFormat.format(new String[] { doFilterEscaping(username) });
    // Set up the search controls
    SearchControls constraints = new SearchControls();
    if (userSubtree) {
        constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
    } else {
        constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
    }
    constraints.setCountLimit(sizeLimit);
    constraints.setTimeLimit(timeLimit);
    // Specify the attributes to be retrieved
    if (attrIds == null) {
        attrIds = new String[0];
    }
    constraints.setReturningAttributes(attrIds);
    NamingEnumeration<SearchResult> results = connection.context.search(userBase, filter, constraints);
    try {
        // Fail if no entries found
        try {
            if (results == null || !results.hasMore()) {
                return null;
            }
        } catch (PartialResultException ex) {
            if (!adCompat) {
                throw ex;
            } else {
                return null;
            }
        }
        // Get result for the first entry found
        SearchResult result = results.next();
        // Check no further entries were found
        try {
            if (results.hasMore()) {
                if (containerLog.isInfoEnabled()) {
                    containerLog.info(sm.getString("jndiRealm.multipleEntries", username));
                }
                return null;
            }
        } catch (PartialResultException ex) {
            if (!adCompat) {
                throw ex;
            }
        }
        String dn = getDistinguishedName(connection.context, userBase, result);
        if (containerLog.isTraceEnabled()) {
            containerLog.trace("  entry found for " + username + " with dn " + dn);
        }
        // Get the entry's attributes
        Attributes attrs = result.getAttributes();
        if (attrs == null) {
            return null;
        }
        // Retrieve value of userPassword
        String password = null;
        if (userPassword != null) {
            password = getAttributeValue(userPassword, attrs);
        }
        String userRoleAttrValue = null;
        if (userRoleAttribute != null) {
            userRoleAttrValue = getAttributeValue(userRoleAttribute, attrs);
        }
        // Retrieve values of userRoleName attribute
        ArrayList<String> roles = null;
        if (userRoleName != null) {
            roles = addAttributeValues(userRoleName, attrs, roles);
        }
        return new User(username, dn, password, roles, userRoleAttrValue);
    } finally {
        if (results != null) {
            results.close();
        }
    }
}