public static final Object coerceToType(final ELContext ctx, final Object obj, final Class&lt;?&gt;  | public static final &lt;T&gt; T coerceToType(final ELContext ctx, final Object obj, final Class&lt;T
if (ctx != null) {                                                                                     if (ctx != null) {                                                                                  
boolean originalIsPropertyResolved = ctx.isPropertyResolved();                                         boolean originalIsPropertyResolved = ctx.isPropertyResolved();                                      
try {                                                                                                  try {                                                                                               
Object result = ctx.getELResolver().convertToType(ctx, obj, type);                                   | T result = ctx.getELResolver().convertToType(ctx, obj, type);                                       
if (ctx.isPropertyResolved()) {                                                                        if (ctx.isPropertyResolved()) {                                                                     
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
ctx.setPropertyResolved(originalIsPropertyResolved);                                                   ctx.setPropertyResolved(originalIsPropertyResolved);                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass(   if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass(
return obj;                                                                                          | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) obj;                                                                                 
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
if (!COERCE_TO_ZERO) {                                                                                 if (!COERCE_TO_ZERO) {                                                                              
if (obj == null && !type.isPrimitive() && !String.class.isAssignableFrom(type)) {                      if (obj == null && !type.isPrimitive() && !String.class.isAssignableFrom(type)) {                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (String.class.equals(type)) {                                                                       if (String.class.equals(type)) {                                                                    
return coerceToString(ctx, obj);                                                                     | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) coerceToString(ctx, obj);                                                            
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
if (ELArithmetic.isNumberType(type)) {                                                                 if (ELArithmetic.isNumberType(type)) {                                                              
return coerceToNumber(ctx, obj, type);                                                               | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) coerceToNumber(ctx, obj, type);                                                      
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
if (Character.class.equals(type) || Character.TYPE == type) {                                          if (Character.class.equals(type) || Character.TYPE == type) {                                       
return coerceToCharacter(ctx, obj);                                                                  | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) coerceToCharacter(ctx, obj);                                                         
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
if (Boolean.class.equals(type) || Boolean.TYPE == type) {                                              if (Boolean.class.equals(type) || Boolean.TYPE == type) {                                           
return coerceToBoolean(ctx, obj, Boolean.TYPE == type);                                              | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) coerceToBoolean(ctx, obj, Boolean.TYPE == type);                                     
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
if (type.isEnum()) {                                                                                   if (type.isEnum()) {                                                                                
return coerceToEnum(ctx, obj, type);                                                                 | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) coerceToEnum(ctx, obj, type);                                                        
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
// new to spec                                                                                         // new to spec                                                                                      
if (obj == null)                                                                                     | if (obj == null) {                                                                                  
return null;                                                                                           return null;                                                                                        
                                                                                                     | }                                                                                                   
if (obj instanceof String) {                                                                           if (obj instanceof String) {                                                                        
String str = (String) obj;                                                                             String str = (String) obj;                                                                          
PropertyEditor editor = PropertyEditorManager.findEditor(type);                                        PropertyEditor editor = PropertyEditorManager.findEditor(type);                                     
if (editor == null) {                                                                                  if (editor == null) {                                                                               
if (str.isEmpty()) {                                                                                   if (str.isEmpty()) {                                                                                
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type));                 throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type));              
} else {                                                                                               } else {                                                                                            
try {                                                                                                  try {                                                                                               
editor.setAsText(str);                                                                                 editor.setAsText(str);                                                                              
return editor.getValue();                                                                            | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) editor.getValue();                                                                   
                                                                                                     | return result;                                                                                      
} catch (RuntimeException e) {                                                                         } catch (RuntimeException e) {                                                                      
if (str.isEmpty()) {                                                                                   if (str.isEmpty()) {                                                                                
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type), e);              throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type), e);           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Handle special case because the syntax for the empty set is the same                                // Handle special case because the syntax for the empty set is the same                             
// for an empty map. The parser will always parse {} as an empty set.                                  // for an empty map. The parser will always parse {} as an empty set.                               
if (obj instanceof Set && type == Map.class && ((Set&lt;?&gt;) obj).isEmpty()) {                       if (obj instanceof Set && type == Map.class && ((Set&lt;?&gt;) obj).isEmpty()) {                    
return Collections.EMPTY_MAP;                                                                        | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) Collections.EMPTY_MAP;                                                               
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
// Handle arrays                                                                                       // Handle arrays                                                                                    
if (type.isArray() && obj.getClass().isArray()) {                                                      if (type.isArray() && obj.getClass().isArray()) {                                                   
return coerceToArray(ctx, obj, type);                                                                | @SuppressWarnings("unchecked")                                                                      
                                                                                                     | T result = (T) coerceToArray(ctx, obj, type);                                                       
                                                                                                     | return result;                                                                                      
}                                                                                                      }                                                                                                   
throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type));                 throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type));              
}                                                                                                      }                                                                                                   
