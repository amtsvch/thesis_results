@Override                                                                                              @Override                                                                                           
public void invoke(Request request, Response response) throws IOException, ServletException {          public void invoke(Request request, Response response) throws IOException, ServletException {       
/*                                                                                                     /*                                                                                                  
* Known behaviours of reverse proxies that are handled by the                                          * Known behaviours of reverse proxies that are handled by the                                       
* processing below:                                                                                    * processing below:                                                                                 
* - mod_header converts the '\n' into ' '                                                              * - mod_header converts the '\n' into ' '                                                           
* - nginx converts the '\n' into multiple ' '                                                          * - nginx converts the '\n' into multiple ' '                                                       
                                                                                                     | * - nginx ssl_client_escaped_cert uses "uri component" escaping,                                    
                                                                                                     | *   keeping only ALPHA, DIGIT, "-", ".", "_", "~"                                                   
*                                                                                                      *                                                                                                   
* The code assumes that the trimmed header value starts with                                           * The code assumes that the trimmed header value starts with                                        
* '-----BEGIN CERTIFICATE-----' and ends with                                                          * '-----BEGIN CERTIFICATE-----' and ends with                                                       
* '-----END CERTIFICATE-----'.                                                                         * '-----END CERTIFICATE-----'.                                                                      
*                                                                                                      *                                                                                                   
* Note: As long as the BEGIN marker and the rest of the content are on                                 * Note: As long as the BEGIN marker and the rest of the content are on                              
*       separate lines, the CertificateFactory is tolerant of any                                      *       separate lines, the CertificateFactory is tolerant of any                                   
*       additional whitespace.                                                                         *       additional whitespace.                                                                      
*/                                                                                                     */                                                                                                  
String headerValue = mygetHeader(request, sslClientCertHeader);                                      | String headerValue;                                                                                 
                                                                                                     | String headerEscapedValue = mygetHeader(request, sslClientEscapedCertHeader);                       
                                                                                                     | if (headerEscapedValue != null) {                                                                   
                                                                                                     | headerValue = UDecoder.URLDecode(headerEscapedValue, null);                                         
                                                                                                     | } else {                                                                                            
                                                                                                     | headerValue = mygetHeader(request, sslClientCertHeader);                                            
                                                                                                     | }                                                                                                   
if (headerValue != null) {                                                                             if (headerValue != null) {                                                                          
headerValue = headerValue.trim();                                                                      headerValue = headerValue.trim();                                                                   
if (headerValue.length() &gt; 27) {                                                                    if (headerValue.length() &gt; 27) {                                                                 
String body = headerValue.substring(27);                                                               String body = headerValue.substring(27);                                                            
String header = "-----BEGIN CERTIFICATE-----\n";                                                       String header = "-----BEGIN CERTIFICATE-----\n";                                                    
String strcerts = header.concat(body);                                                                 String strcerts = header.concat(body);                                                              
ByteArrayInputStream bais = new ByteArrayInputStream(strcerts.getBytes(StandardCharsets.ISO_8859_1))   ByteArrayInputStream bais = new ByteArrayInputStream(strcerts.getBytes(StandardCharsets.ISO_8859_1))
X509Certificate[] jsseCerts = null;                                                                    X509Certificate[] jsseCerts = null;                                                                 
String providerName = (String) request.getConnector().getProperty("clientCertProvider");               String providerName = (String) request.getConnector().getProperty("clientCertProvider");            
try {                                                                                                  try {                                                                                               
CertificateFactory cf;                                                                                 CertificateFactory cf;                                                                              
if (providerName == null) {                                                                            if (providerName == null) {                                                                         
cf = CertificateFactory.getInstance("X.509");                                                          cf = CertificateFactory.getInstance("X.509");                                                       
} else {                                                                                               } else {                                                                                            
cf = CertificateFactory.getInstance("X.509", providerName);                                            cf = CertificateFactory.getInstance("X.509", providerName);                                         
}                                                                                                      }                                                                                                   
X509Certificate cert = (X509Certificate) cf.generateCertificate(bais);                                 X509Certificate cert = (X509Certificate) cf.generateCertificate(bais);                              
jsseCerts = new X509Certificate[1];                                                                    jsseCerts = new X509Certificate[1];                                                                 
jsseCerts[0] = cert;                                                                                   jsseCerts[0] = cert;                                                                                
} catch (java.security.cert.CertificateException e) {                                                  } catch (java.security.cert.CertificateException e) {                                               
log.warn(sm.getString("sslValve.certError", strcerts), e);                                             log.warn(sm.getString("sslValve.certError", strcerts), e);                                          
} catch (NoSuchProviderException e) {                                                                  } catch (NoSuchProviderException e) {                                                               
log.error(sm.getString("sslValve.invalidProvider", providerName), e);                                  log.error(sm.getString("sslValve.invalidProvider", providerName), e);                               
}                                                                                                      }                                                                                                   
request.setAttribute(Globals.CERTIFICATES_ATTR, jsseCerts);                                            request.setAttribute(Globals.CERTIFICATES_ATTR, jsseCerts);                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
headerValue = mygetHeader(request, sslCipherHeader);                                                   headerValue = mygetHeader(request, sslCipherHeader);                                                
if (headerValue != null) {                                                                             if (headerValue != null) {                                                                          
request.setAttribute(Globals.CIPHER_SUITE_ATTR, headerValue);                                          request.setAttribute(Globals.CIPHER_SUITE_ATTR, headerValue);                                       
}                                                                                                      }                                                                                                   
headerValue = mygetHeader(request, sslSessionIdHeader);                                                headerValue = mygetHeader(request, sslSessionIdHeader);                                             
if (headerValue != null) {                                                                             if (headerValue != null) {                                                                          
request.setAttribute(Globals.SSL_SESSION_ID_ATTR, headerValue);                                        request.setAttribute(Globals.SSL_SESSION_ID_ATTR, headerValue);                                     
}                                                                                                      }                                                                                                   
headerValue = mygetHeader(request, sslCipherUserKeySizeHeader);                                        headerValue = mygetHeader(request, sslCipherUserKeySizeHeader);                                     
if (headerValue != null) {                                                                             if (headerValue != null) {                                                                          
request.setAttribute(Globals.KEY_SIZE_ATTR, Integer.valueOf(headerValue));                             request.setAttribute(Globals.KEY_SIZE_ATTR, Integer.valueOf(headerValue));                          
}                                                                                                      }                                                                                                   
getNext().invoke(request, response);                                                                   getNext().invoke(request, response);                                                                
}                                                                                                      }                                                                                                   
