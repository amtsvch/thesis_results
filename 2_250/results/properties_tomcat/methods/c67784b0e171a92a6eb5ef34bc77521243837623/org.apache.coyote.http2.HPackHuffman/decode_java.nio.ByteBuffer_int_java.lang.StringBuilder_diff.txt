/**
 * Decodes a huffman encoded string into the target StringBuilder. There
 * must be enough space left in the buffer for this method to succeed.
 *
 * @param data   The byte buffer
 * @param length The length of data from the buffer to decode
 * @param target The target for the decompressed data
 *
 * @throws HpackException If the Huffman encoded value in HPACK headers did
 *                        not end with EOS padding
 */
public static void decode(ByteBuffer data, int length, StringBuilder target) throws HpackException {
    assert data.remaining() >= length;
    int treePos = 0;
    boolean eosBits = true;
    int eosBitCount = 0;
    for (int i = 0; i < length; ++i) {
        byte b = data.get();
        int bitPos = 7;
        while (bitPos >= 0) {
            int val = DECODING_TABLE[treePos];
            if (((1 << bitPos) & b) == 0) {
                // bit not set, we want the lower part of the tree
                if ((val & LOW_TERMINAL_BIT) == 0) {
                    treePos = val & LOW_MASK;
                    eosBits = false;
                    eosBitCount = 0;
                } else {
                    target.append((char) (val & LOW_MASK));
                    treePos = 0;
                    eosBits = true;
                }
            } else {
                if (eosBits) {
                    eosBitCount++;
                }
                // bit not set, we want the lower part of the tree
                if ((val & HIGH_TERMINAL_BIT) == 0) {
                    treePos = (val >> 16) & LOW_MASK;
                } else {
                    if (eosBitCount != 0) {
                        // This must be the EOS symbol which MUST be treated
                        // as an error
                        throw new HpackException(sm.getString("hpackhuffman.stringLiteralEOS"));
                    }
                    target.append((char) ((val >> 16) & LOW_MASK));
                    treePos = 0;
                    eosBits = true;
                }
            }
            bitPos--;
        }
    }
    if (eosBitCount > 7) {
        throw new HpackException(sm.getString("hpackhuffman.stringLiteralTooMuchPadding"));
    }
    if (!eosBits) {
        throw new HpackException(sm.getString("hpackhuffman.huffmanEncodedHpackValueDidNotEndWithEOS"));
    }
}