/**
 * Add a new servlet mapping, replacing any existing mapping for
 * the specified pattern.
 *
 * @param pattern URL pattern to be mapped
 * @param name Name of the corresponding servlet to execute
 * @param jspWildCard true if name identifies the JspServlet
 * and pattern contains a wildcard; false otherwise
 *
 * @exception IllegalArgumentException if the specified servlet name
 *  is not known to this Context
 */
@Override
public void addServletMappingDecoded(String pattern, String name, boolean jspWildCard) {
    // Validate the proposed mapping
    if (findChild(name) == null) {
        throw new IllegalArgumentException(sm.getString("standardContext.servletMap.name", name));
    }
    String adjustedPattern = adjustURLPattern(pattern);
    if (!validateURLPattern(adjustedPattern)) {
        throw new IllegalArgumentException(sm.getString("standardContext.servletMap.pattern", adjustedPattern));
    }
    // Add this mapping to our registered set
    synchronized (servletMappingsLock) {
        String name2 = servletMappings.get(adjustedPattern);
        if (name2 != null) {
            // Don't allow more than one servlet on the same pattern
            Wrapper wrapper = (Wrapper) findChild(name2);
            wrapper.removeMapping(adjustedPattern);
        }
        servletMappings.put(adjustedPattern, name);
    }
    Wrapper wrapper = (Wrapper) findChild(name);
    wrapper.addMapping(adjustedPattern);
    fireContainerEvent("addServletMapping", adjustedPattern);
}