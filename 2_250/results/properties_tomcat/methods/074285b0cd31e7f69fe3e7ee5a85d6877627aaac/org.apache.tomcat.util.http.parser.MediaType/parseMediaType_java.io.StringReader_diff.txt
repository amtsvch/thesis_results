/**
 * Parses a MediaType value, either from an HTTP header or from an application.
 *
 * @param input a reader over the header text
 * @return a MediaType parsed from the input, or null if not valid
 * @throws IOException if there was a problem reading the input
 */
public static MediaType parseMediaType(StringReader input) throws IOException {
    // Type (required)
    String type = HttpParser.readToken(input);
    if (type == null || type.length() == 0) {
        return null;
    }
    if (HttpParser.skipConstant(input, "/") == SkipResult.NOT_FOUND) {
        return null;
    }
    // Subtype (required)
    String subtype = HttpParser.readToken(input);
    if (subtype == null || subtype.length() == 0) {
        return null;
    }
    LinkedHashMap<String, String> parameters = new LinkedHashMap<>();
    SkipResult lookForSemiColon = HttpParser.skipConstant(input, ";");
    if (lookForSemiColon == SkipResult.NOT_FOUND) {
        return null;
    }
    while (lookForSemiColon == SkipResult.FOUND) {
        String attribute = HttpParser.readToken(input);
        String value = "";
        if (HttpParser.skipConstant(input, "=") == SkipResult.FOUND) {
            value = HttpParser.readTokenOrQuotedString(input, true);
        }
        if (attribute != null) {
            parameters.put(attribute.toLowerCase(Locale.ENGLISH), value);
        }
        lookForSemiColon = HttpParser.skipConstant(input, ";");
        if (lookForSemiColon == SkipResult.NOT_FOUND) {
            return null;
        }
    }
    return new MediaType(type, subtype, parameters);
}