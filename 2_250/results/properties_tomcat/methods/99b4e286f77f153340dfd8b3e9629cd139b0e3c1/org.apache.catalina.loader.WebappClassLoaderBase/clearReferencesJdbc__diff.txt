/**
 * Deregister any JDBC drivers registered by the webapp that the webapp
 * forgot. This is made unnecessary complex because a) DriverManager
 * checks the class loader of the calling class (it would be much easier
 * if it checked the context class loader) b) using reflection would
 * create a dependency on the DriverManager implementation which can,
 * and has, changed.
 *
 * We can't just create an instance of JdbcLeakPrevention as it will be
 * loaded by the common class loader (since it's .class file is in the
 * $CATALINA_HOME/lib directory). This would fail DriverManager's check
 * on the class loader of the calling class. So, we load the bytes via
 * our parent class loader but define the class with this class loader
 * so the JdbcLeakPrevention looks like a webapp class to the
 * DriverManager.
 *
 * If only apps cleaned up after themselves...
 */
private final void clearReferencesJdbc() {
    // We know roughly how big the class will be (~ 1K) so allow 2k as a
    // starting point
    byte[] classBytes = new byte[2048];
    int offset = 0;
    try (InputStream is = getResourceAsStream("org/apache/catalina/loader/JdbcLeakPrevention.class")) {
        int read = is.read(classBytes, offset, classBytes.length - offset);
        while (read > -1) {
            offset += read;
            if (offset == classBytes.length) {
                // Buffer full - double size
                byte[] tmp = new byte[classBytes.length * 2];
                System.arraycopy(classBytes, 0, tmp, 0, classBytes.length);
                classBytes = tmp;
            }
            read = is.read(classBytes, offset, classBytes.length - offset);
        }
        Class<?> lpClass = defineClass("org.apache.catalina.loader.JdbcLeakPrevention", classBytes, 0, offset, this.getClass().getProtectionDomain());
        Object obj = lpClass.getConstructor().newInstance();
        @SuppressWarnings("unchecked")
        List<String> driverNames = (List<String>) obj.getClass().getMethod("clearJdbcDriverRegistrations").invoke(obj);
        for (String name : driverNames) {
            log.warn(sm.getString("webappClassLoader.clearJdbc", getContextName(), name));
        }
    } catch (Exception e) {
        // So many things to go wrong above...
        Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
        ExceptionUtils.handleThrowable(t);
        log.warn(sm.getString("webappClassLoader.jdbcRemoveFailed", getContextName()), t);
    }
}