@Override                                                                                              @Override                                                                                           
public void sendMessage(Member[] destination, ChannelMessage message) throws ChannelException {        public void sendMessage(Member[] destination, ChannelMessage message) throws ChannelException {     
if (!isConnected()) {                                                                                  if (!isConnected()) {                                                                               
throw new ChannelException(sm.getString("pooledParallelSender.sender.disconnected"));                  throw new ChannelException(sm.getString("pooledParallelSender.sender.disconnected"));               
}                                                                                                      }                                                                                                   
ParallelNioSender sender = (ParallelNioSender) getSender();                                            ParallelNioSender sender = (ParallelNioSender) getSender();                                         
if (sender == null) {                                                                                  if (sender == null) {                                                                               
ChannelException cx = new ChannelException(sm.getString("pooledParallelSender.unable.retrieveSender.   ChannelException cx = new ChannelException(sm.getString("pooledParallelSender.unable.retrieveSender.
for (Member member : destination) cx.addFaultyMember(member, new NullPointerException(sm.getString(" | for (Member member : destination) {                                                                 
                                                                                                     | cx.addFaultyMember(member, new NullPointerException(sm.getString("pooledParallelSender.unable.retrie
                                                                                                     | }                                                                                                   
throw cx;                                                                                              throw cx;                                                                                           
} else {                                                                                               } else {                                                                                            
try {                                                                                                  try {                                                                                               
if (!sender.isConnected())                                                                           | if (!sender.isConnected()) {                                                                        
sender.connect();                                                                                      sender.connect();                                                                                   
                                                                                                     | }                                                                                                   
sender.sendMessage(destination, message);                                                              sender.sendMessage(destination, message);                                                           
sender.keepalive();                                                                                    sender.keepalive();                                                                                 
} catch (ChannelException x) {                                                                         } catch (ChannelException x) {                                                                      
sender.disconnect();                                                                                   sender.disconnect();                                                                                
throw x;                                                                                               throw x;                                                                                            
} finally {                                                                                            } finally {                                                                                         
returnSender(sender);                                                                                  returnSender(sender);                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
