/**                                                                                                    /**                                                                                                 
* Receive a datagram packet, locking wait                                                              * Receive a datagram packet, locking wait                                                           
* @throws IOException Received failed                                                                  * @throws IOException Received failed                                                               
*/                                                                                                     */                                                                                                  
public void receive() throws IOException {                                                             public void receive() throws IOException {                                                          
boolean checkexpired = true;                                                                           boolean checkexpired = true;                                                                        
try {                                                                                                  try {                                                                                               
socket.receive(receivePacket);                                                                         socket.receive(receivePacket);                                                                      
if (receivePacket.getLength() &gt; MAX_PACKET_SIZE) {                                                  if (receivePacket.getLength() &gt; MAX_PACKET_SIZE) {                                               
log.error(sm.getString("mcastServiceImpl.packet.tooLong", Integer.toString(receivePacket.getLength()   log.error(sm.getString("mcastServiceImpl.packet.tooLong", Integer.toString(receivePacket.getLength()
} else {                                                                                               } else {                                                                                            
byte[] data = new byte[receivePacket.getLength()];                                                     byte[] data = new byte[receivePacket.getLength()];                                                  
System.arraycopy(receivePacket.getData(), receivePacket.getOffset(), data, 0, data.length);            System.arraycopy(receivePacket.getData(), receivePacket.getOffset(), data, 0, data.length);         
if (XByteBuffer.firstIndexOf(data, 0, MemberImpl.TRIBES_MBR_BEGIN) == 0) {                             if (XByteBuffer.firstIndexOf(data, 0, MemberImpl.TRIBES_MBR_BEGIN) == 0) {                          
memberDataReceived(data);                                                                              memberDataReceived(data);                                                                           
} else {                                                                                               } else {                                                                                            
memberBroadcastsReceived(data);                                                                        memberBroadcastsReceived(data);                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (SocketTimeoutException x) {                                                                   } catch (SocketTimeoutException x) {                                                                
// do nothing, this is normal, we don't want to block forever                                          // do nothing, this is normal, we don't want to block forever                                       
// since the receive thread is the same thread                                                         // since the receive thread is the same thread                                                      
// that does membership expiration                                                                     // that does membership expiration                                                                  
}                                                                                                      }                                                                                                   
if (checkexpired)                                                                                    | if (checkexpired) {                                                                                 
checkExpired();                                                                                        checkExpired();                                                                                     
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
