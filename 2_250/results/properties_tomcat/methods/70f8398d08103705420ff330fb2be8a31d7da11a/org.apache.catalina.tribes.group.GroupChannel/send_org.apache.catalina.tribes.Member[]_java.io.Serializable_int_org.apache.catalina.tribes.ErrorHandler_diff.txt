/**                                                                                                    /**                                                                                                 
* @param destination Member[] - destination.length &gt; 0                                              * @param destination Member[] - destination.length &gt; 0                                           
* @param msg Serializable - the message to send                                                        * @param msg Serializable - the message to send                                                     
* @param options sender options, options can trigger guarantee levels and different                    * @param options sender options, options can trigger guarantee levels and different                 
*                interceptors to react to the message see class documentation for the                  *                interceptors to react to the message see class documentation for the               
*                &lt;code&gt;Channel&lt;/code&gt; object.&lt;br&gt;                                    *                &lt;code&gt;Channel&lt;/code&gt; object.&lt;br&gt;                                 
* @param handler - callback object for error handling and completion notification,                     * @param handler - callback object for error handling and completion notification,                  
*                  used when a message is sent asynchronously using the                                *                  used when a message is sent asynchronously using the                             
*                  &lt;code&gt;Channel.SEND_OPTIONS_ASYNCHRONOUS&lt;/code&gt; flag enabled.            *                  &lt;code&gt;Channel.SEND_OPTIONS_ASYNCHRONOUS&lt;/code&gt; flag enabled.         
* @return UniqueId - the unique Id that was assigned to this message                                   * @return UniqueId - the unique Id that was assigned to this message                                
* @throws ChannelException - if an error occurs processing the message                                 * @throws ChannelException - if an error occurs processing the message                              
* @see org.apache.catalina.tribes.Channel                                                              * @see org.apache.catalina.tribes.Channel                                                           
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler) thro   public UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler) thro
if (msg == null)                                                                                     | if (msg == null) {                                                                                  
throw new ChannelException(sm.getString("groupChannel.nullMessage"));                                  throw new ChannelException(sm.getString("groupChannel.nullMessage"));                               
                                                                                                     | }                                                                                                   
XByteBuffer buffer = null;                                                                             XByteBuffer buffer = null;                                                                          
try {                                                                                                  try {                                                                                               
if (destination == null || destination.length == 0) {                                                  if (destination == null || destination.length == 0) {                                               
throw new ChannelException(sm.getString("groupChannel.noDestination"));                                throw new ChannelException(sm.getString("groupChannel.noDestination"));                             
}                                                                                                      }                                                                                                   
// generates a unique Id                                                                               // generates a unique Id                                                                            
ChannelData data = new ChannelData(true);                                                              ChannelData data = new ChannelData(true);                                                           
data.setAddress(getLocalMember(false));                                                                data.setAddress(getLocalMember(false));                                                             
data.setTimestamp(System.currentTimeMillis());                                                         data.setTimestamp(System.currentTimeMillis());                                                      
byte[] b = null;                                                                                       byte[] b = null;                                                                                    
if (msg instanceof ByteMessage) {                                                                      if (msg instanceof ByteMessage) {                                                                   
b = ((ByteMessage) msg).getMessage();                                                                  b = ((ByteMessage) msg).getMessage();                                                               
options = options | SEND_OPTIONS_BYTE_MESSAGE;                                                         options = options | SEND_OPTIONS_BYTE_MESSAGE;                                                      
} else {                                                                                               } else {                                                                                            
b = XByteBuffer.serialize(msg);                                                                        b = XByteBuffer.serialize(msg);                                                                     
options = options & (~SEND_OPTIONS_BYTE_MESSAGE);                                                      options = options & (~SEND_OPTIONS_BYTE_MESSAGE);                                                   
}                                                                                                      }                                                                                                   
data.setOptions(options);                                                                              data.setOptions(options);                                                                           
// XByteBuffer buffer = new XByteBuffer(b.length+128,false);                                           // XByteBuffer buffer = new XByteBuffer(b.length+128,false);                                        
buffer = BufferPool.getBufferPool().getBuffer(b.length + 128, false);                                  buffer = BufferPool.getBufferPool().getBuffer(b.length + 128, false);                               
buffer.append(b, 0, b.length);                                                                         buffer.append(b, 0, b.length);                                                                      
data.setMessage(buffer);                                                                               data.setMessage(buffer);                                                                            
InterceptorPayload payload = null;                                                                     InterceptorPayload payload = null;                                                                  
if (handler != null) {                                                                                 if (handler != null) {                                                                              
payload = new InterceptorPayload();                                                                    payload = new InterceptorPayload();                                                                 
payload.setErrorHandler(handler);                                                                      payload.setErrorHandler(handler);                                                                   
}                                                                                                      }                                                                                                   
getFirstInterceptor().sendMessage(destination, data, payload);                                         getFirstInterceptor().sendMessage(destination, data, payload);                                      
if (Logs.MESSAGES.isTraceEnabled()) {                                                                  if (Logs.MESSAGES.isTraceEnabled()) {                                                               
Logs.MESSAGES.trace("GroupChannel - Sent msg:" + new UniqueId(data.getUniqueId()) + " at " + new jav   Logs.MESSAGES.trace("GroupChannel - Sent msg:" + new UniqueId(data.getUniqueId()) + " at " + new jav
Logs.MESSAGES.trace("GroupChannel - Send Message:" + new UniqueId(data.getUniqueId()) + " is " + msg   Logs.MESSAGES.trace("GroupChannel - Send Message:" + new UniqueId(data.getUniqueId()) + " is " + msg
}                                                                                                      }                                                                                                   
return new UniqueId(data.getUniqueId());                                                               return new UniqueId(data.getUniqueId());                                                            
} catch (RuntimeException | IOException e) {                                                           } catch (RuntimeException | IOException e) {                                                        
throw new ChannelException(e);                                                                         throw new ChannelException(e);                                                                      
} finally {                                                                                            } finally {                                                                                         
if (buffer != null)                                                                                  | if (buffer != null) {                                                                               
BufferPool.getBufferPool().returnBuffer(buffer);                                                       BufferPool.getBufferPool().returnBuffer(buffer);                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
