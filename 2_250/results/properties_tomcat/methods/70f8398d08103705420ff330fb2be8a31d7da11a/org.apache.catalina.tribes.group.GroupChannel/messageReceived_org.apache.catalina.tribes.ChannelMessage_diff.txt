/**                                                                                                    /**                                                                                                 
* Callback from the interceptor stack. &lt;br&gt;                                                      * Callback from the interceptor stack. &lt;br&gt;                                                   
* When a message is received from a remote node, this method will be                                   * When a message is received from a remote node, this method will be                                
* invoked by the previous interceptor.&lt;br&gt;                                                       * invoked by the previous interceptor.&lt;br&gt;                                                    
* This method can also be used to send a message to other components                                   * This method can also be used to send a message to other components                                
* within the same application, but its an extreme case, and you're probably                            * within the same application, but its an extreme case, and you're probably                         
* better off doing that logic between the applications itself.                                         * better off doing that logic between the applications itself.                                      
* @param msg ChannelMessage                                                                            * @param msg ChannelMessage                                                                         
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public void messageReceived(ChannelMessage msg) {                                                      public void messageReceived(ChannelMessage msg) {                                                   
if (msg == null)                                                                                     | if (msg == null) {                                                                                  
return;                                                                                                return;                                                                                             
                                                                                                     | }                                                                                                   
try {                                                                                                  try {                                                                                               
if (Logs.MESSAGES.isTraceEnabled()) {                                                                  if (Logs.MESSAGES.isTraceEnabled()) {                                                               
Logs.MESSAGES.trace("GroupChannel - Received msg:" + new UniqueId(msg.getUniqueId()) + " at " + new    Logs.MESSAGES.trace("GroupChannel - Received msg:" + new UniqueId(msg.getUniqueId()) + " at " + new 
}                                                                                                      }                                                                                                   
Serializable fwd = null;                                                                               Serializable fwd = null;                                                                            
if ((msg.getOptions() & SEND_OPTIONS_BYTE_MESSAGE) == SEND_OPTIONS_BYTE_MESSAGE) {                     if ((msg.getOptions() & SEND_OPTIONS_BYTE_MESSAGE) == SEND_OPTIONS_BYTE_MESSAGE) {                  
fwd = new ByteMessage(msg.getMessage().getBytes());                                                    fwd = new ByteMessage(msg.getMessage().getBytes());                                                 
} else {                                                                                               } else {                                                                                            
try {                                                                                                  try {                                                                                               
fwd = XByteBuffer.deserialize(msg.getMessage().getBytesDirect(), 0, msg.getMessage().getLength());     fwd = XByteBuffer.deserialize(msg.getMessage().getBytesDirect(), 0, msg.getMessage().getLength());  
} catch (Exception sx) {                                                                               } catch (Exception sx) {                                                                            
log.error(sm.getString("groupChannel.unable.deserialize", msg), sx);                                   log.error(sm.getString("groupChannel.unable.deserialize", msg), sx);                                
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (Logs.MESSAGES.isTraceEnabled()) {                                                                  if (Logs.MESSAGES.isTraceEnabled()) {                                                               
Logs.MESSAGES.trace("GroupChannel - Receive Message:" + new UniqueId(msg.getUniqueId()) + " is " + f   Logs.MESSAGES.trace("GroupChannel - Receive Message:" + new UniqueId(msg.getUniqueId()) + " is " + f
}                                                                                                      }                                                                                                   
// get the actual member with the correct alive time                                                   // get the actual member with the correct alive time                                                
Member source = msg.getAddress();                                                                      Member source = msg.getAddress();                                                                   
boolean rx = false;                                                                                    boolean rx = false;                                                                                 
boolean delivered = false;                                                                             boolean delivered = false;                                                                          
for (ChannelListener channelListener : channelListeners) {                                             for (ChannelListener channelListener : channelListeners) {                                          
if (channelListener != null && channelListener.accept(fwd, source)) {                                  if (channelListener != null && channelListener.accept(fwd, source)) {                               
channelListener.messageReceived(fwd, source);                                                          channelListener.messageReceived(fwd, source);                                                       
delivered = true;                                                                                      delivered = true;                                                                                   
// if the message was accepted by an RPC channel, that channel                                         // if the message was accepted by an RPC channel, that channel                                      
// is responsible for returning the reply, otherwise we send an absence reply                          // is responsible for returning the reply, otherwise we send an absence reply                       
if (channelListener instanceof RpcChannel)                                                           | if (channelListener instanceof RpcChannel) {                                                        
rx = true;                                                                                             rx = true;                                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
// for                                                                                                 // for                                                                                              
if ((!rx) && (fwd instanceof RpcMessage)) {                                                            if ((!rx) && (fwd instanceof RpcMessage)) {                                                         
// if we have a message that requires a response,                                                      // if we have a message that requires a response,                                                   
// but none was given, send back an immediate one                                                      // but none was given, send back an immediate one                                                   
sendNoRpcChannelReply((RpcMessage) fwd, source);                                                       sendNoRpcChannelReply((RpcMessage) fwd, source);                                                    
}                                                                                                      }                                                                                                   
if (Logs.MESSAGES.isTraceEnabled()) {                                                                  if (Logs.MESSAGES.isTraceEnabled()) {                                                               
Logs.MESSAGES.trace("GroupChannel delivered[" + delivered + "] id:" + new UniqueId(msg.getUniqueId()   Logs.MESSAGES.trace("GroupChannel delivered[" + delivered + "] id:" + new UniqueId(msg.getUniqueId()
}                                                                                                      }                                                                                                   
} catch (Exception x) {                                                                                } catch (Exception x) {                                                                             
// this could be the channel listener throwing an exception, we should log it                          // this could be the channel listener throwing an exception, we should log it                       
// as a warning.                                                                                       // as a warning.                                                                                    
if (log.isWarnEnabled())                                                                             | if (log.isWarnEnabled()) {                                                                          
log.warn(sm.getString("groupChannel.receiving.error"), x);                                             log.warn(sm.getString("groupChannel.receiving.error"), x);                                          
                                                                                                     | }                                                                                                   
throw new RemoteProcessException(sm.getString("groupChannel.receiving.error"), x);                     throw new RemoteProcessException(sm.getString("groupChannel.receiving.error"), x);                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
