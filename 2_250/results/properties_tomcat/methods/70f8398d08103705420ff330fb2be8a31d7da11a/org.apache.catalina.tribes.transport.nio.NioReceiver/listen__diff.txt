/**                                                                                                    /**                                                                                                 
* Get data from channel and store in byte array                                                        * Get data from channel and store in byte array                                                     
* send it to cluster                                                                                   * send it to cluster                                                                                
* @throws IOException IO error                                                                         * @throws IOException IO error                                                                      
*/                                                                                                     */                                                                                                  
protected void listen() throws Exception {                                                             protected void listen() throws Exception {                                                          
if (doListen()) {                                                                                      if (doListen()) {                                                                                   
log.warn(sm.getString("nioReceiver.alreadyStarted"));                                                  log.warn(sm.getString("nioReceiver.alreadyStarted"));                                               
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
setListen(true);                                                                                       setListen(true);                                                                                    
// Avoid NPEs if selector is set to null on stop.                                                      // Avoid NPEs if selector is set to null on stop.                                                   
Selector selector = this.selector.get();                                                               Selector selector = this.selector.get();                                                            
if (selector != null && datagramChannel != null) {                                                     if (selector != null && datagramChannel != null) {                                                  
// max size for a datagram packet                                                                      // max size for a datagram packet                                                                   
ObjectReader oreader = new ObjectReader(MAX_UDP_SIZE);                                                 ObjectReader oreader = new ObjectReader(MAX_UDP_SIZE);                                              
registerChannel(selector, datagramChannel, SelectionKey.OP_READ, oreader);                             registerChannel(selector, datagramChannel, SelectionKey.OP_READ, oreader);                          
}                                                                                                      }                                                                                                   
while (doListen() && selector != null) {                                                               while (doListen() && selector != null) {                                                            
// this may block for a long time, upon return the                                                     // this may block for a long time, upon return the                                                  
// selected set contains keys of the ready channels                                                    // selected set contains keys of the ready channels                                                 
try {                                                                                                  try {                                                                                               
events();                                                                                              events();                                                                                           
socketTimeouts();                                                                                      socketTimeouts();                                                                                   
int n = selector.select(getSelectorTimeout());                                                         int n = selector.select(getSelectorTimeout());                                                      
if (n == 0) {                                                                                          if (n == 0) {                                                                                       
// there is a good chance that we got here                                                             // there is a good chance that we got here                                                          
// because the TcpReplicationThread called                                                             // because the TcpReplicationThread called                                                          
// selector wakeup().                                                                                  // selector wakeup().                                                                               
// if that happens, we must ensure that that                                                           // if that happens, we must ensure that that                                                        
// thread has enough time to call interestOps                                                          // thread has enough time to call interestOps                                                       
// synchronized (interestOpsMutex) {                                                                   // synchronized (interestOpsMutex) {                                                                
// if we got the lock, means there are no                                                              // if we got the lock, means there are no                                                           
// keys trying to register for the                                                                     // keys trying to register for the                                                                  
// interestOps method                                                                                  // interestOps method                                                                               
// }                                                                                                   // }                                                                                                
// nothing to do                                                                                       // nothing to do                                                                                    
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// get an iterator over the set of selected keys                                                       // get an iterator over the set of selected keys                                                    
Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();                                  Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();                               
// look at each key in the selected set                                                                // look at each key in the selected set                                                             
while (it != null && it.hasNext()) {                                                                   while (it != null && it.hasNext()) {                                                                
SelectionKey key = it.next();                                                                          SelectionKey key = it.next();                                                                       
// Is a new connection coming in?                                                                      // Is a new connection coming in?                                                                   
if (key.isAcceptable()) {                                                                              if (key.isAcceptable()) {                                                                           
ServerSocketChannel server = (ServerSocketChannel) key.channel();                                      ServerSocketChannel server = (ServerSocketChannel) key.channel();                                   
SocketChannel channel = server.accept();                                                               SocketChannel channel = server.accept();                                                            
channel.socket().setReceiveBufferSize(getRxBufSize());                                                 channel.socket().setReceiveBufferSize(getRxBufSize());                                              
channel.socket().setSendBufferSize(getTxBufSize());                                                    channel.socket().setSendBufferSize(getTxBufSize());                                                 
channel.socket().setTcpNoDelay(getTcpNoDelay());                                                       channel.socket().setTcpNoDelay(getTcpNoDelay());                                                    
channel.socket().setKeepAlive(getSoKeepAlive());                                                       channel.socket().setKeepAlive(getSoKeepAlive());                                                    
channel.socket().setOOBInline(getOoBInline());                                                         channel.socket().setOOBInline(getOoBInline());                                                      
channel.socket().setReuseAddress(getSoReuseAddress());                                                 channel.socket().setReuseAddress(getSoReuseAddress());                                              
channel.socket().setSoLinger(getSoLingerOn(), getSoLingerTime());                                      channel.socket().setSoLinger(getSoLingerOn(), getSoLingerTime());                                   
channel.socket().setSoTimeout(getTimeout());                                                           channel.socket().setSoTimeout(getTimeout());                                                        
Object attach = new ObjectReader(channel);                                                             Object attach = new ObjectReader(channel);                                                          
registerChannel(selector, channel, SelectionKey.OP_READ, attach);                                      registerChannel(selector, channel, SelectionKey.OP_READ, attach);                                   
}                                                                                                      }                                                                                                   
// is there data to read on this channel?                                                              // is there data to read on this channel?                                                           
if (key.isReadable()) {                                                                                if (key.isReadable()) {                                                                             
readDataFromSocket(key);                                                                               readDataFromSocket(key);                                                                            
} else {                                                                                               } else {                                                                                            
key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));                                         key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));                                      
}                                                                                                      }                                                                                                   
// remove key from selected set, it's been handled                                                     // remove key from selected set, it's been handled                                                  
it.remove();                                                                                           it.remove();                                                                                        
}                                                                                                      }                                                                                                   
} catch (java.nio.channels.ClosedSelectorException cse) {                                              } catch (java.nio.channels.ClosedSelectorException cse) {                                           
// ignore is normal at shutdown or stop listen socket                                                  // ignore is normal at shutdown or stop listen socket                                               
} catch (java.nio.channels.CancelledKeyException nx) {                                                 } catch (java.nio.channels.CancelledKeyException nx) {                                              
log.warn(sm.getString("nioReceiver.clientDisconnect"));                                                log.warn(sm.getString("nioReceiver.clientDisconnect"));                                             
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
log.error(sm.getString("nioReceiver.requestError"), t);                                                log.error(sm.getString("nioReceiver.requestError"), t);                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
serverChannel.close();                                                                                 serverChannel.close();                                                                              
if (datagramChannel != null) {                                                                         if (datagramChannel != null) {                                                                      
try {                                                                                                  try {                                                                                               
datagramChannel.close();                                                                               datagramChannel.close();                                                                            
} catch (Exception iox) {                                                                              } catch (Exception iox) {                                                                           
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("Unable to close datagram channel.", iox);                                                   log.debug("Unable to close datagram channel.", iox);                                                
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
datagramChannel = null;                                                                                datagramChannel = null;                                                                             
}                                                                                                      }                                                                                                   
closeSelector();                                                                                       closeSelector();                                                                                    
}                                                                                                      }                                                                                                   
