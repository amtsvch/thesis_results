// ----------------------------------------------------------                                          // ----------------------------------------------------------                                       
/**                                                                                                    /**                                                                                                 
* Sample data handler method for a channel with data ready to read.                                    * Sample data handler method for a channel with data ready to read.                                 
* @param key A SelectionKey object associated with a channel                                           * @param key A SelectionKey object associated with a channel                                        
*  determined by the selector to be ready for reading.  If the                                         *  determined by the selector to be ready for reading.  If the                                      
*  channel returns an EOF condition, it is closed here, which                                          *  channel returns an EOF condition, it is closed here, which                                       
*  automatically invalidates the associated key.  The selector                                         *  automatically invalidates the associated key.  The selector                                      
*  will then de-register the channel on the next select call.                                          *  will then de-register the channel on the next select call.                                       
* @throws Exception IO error with channel                                                              * @throws Exception IO error with channel                                                           
*/                                                                                                     */                                                                                                  
protected void readDataFromSocket(SelectionKey key) throws Exception {                                 protected void readDataFromSocket(SelectionKey key) throws Exception {                              
NioReplicationTask task = (NioReplicationTask) getTaskPool().getRxTask();                              NioReplicationTask task = (NioReplicationTask) getTaskPool().getRxTask();                           
if (task == null) {                                                                                    if (task == null) {                                                                                 
// No threads/tasks available, do nothing, the selection                                               // No threads/tasks available, do nothing, the selection                                            
// loop will keep calling this method until a                                                          // loop will keep calling this method until a                                                       
// thread becomes available, the thread pool itself has a waiting mechanism                            // thread becomes available, the thread pool itself has a waiting mechanism                         
// so we will not wait here.                                                                           // so we will not wait here.                                                                        
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("No TcpReplicationThread available");                                                        log.debug("No TcpReplicationThread available");                                                     
                                                                                                     | }                                                                                                   
} else {                                                                                               } else {                                                                                            
// invoking this wakes up the worker thread then returns                                               // invoking this wakes up the worker thread then returns                                            
// add task to thread pool                                                                             // add task to thread pool                                                                          
task.serviceChannel(key);                                                                              task.serviceChannel(key);                                                                           
getExecutor().execute(task);                                                                           getExecutor().execute(task);                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
