/**                                                                                                    /**                                                                                                 
* State machine to send data.                                                                          * State machine to send data.                                                                       
* @param key The key to use                                                                            * @param key The key to use                                                                         
* @param waitForAck Wait for an ack                                                                    * @param waitForAck Wait for an ack                                                                 
* @return &lt;code&gt;true&lt;/code&gt; if the processing was successful                               * @return &lt;code&gt;true&lt;/code&gt; if the processing was successful                            
* @throws IOException An IO error occurred                                                             * @throws IOException An IO error occurred                                                          
*/                                                                                                     */                                                                                                  
public boolean process(SelectionKey key, boolean waitForAck) throws IOException {                      public boolean process(SelectionKey key, boolean waitForAck) throws IOException {                   
int ops = key.readyOps();                                                                              int ops = key.readyOps();                                                                           
key.interestOps(key.interestOps() & ~ops);                                                             key.interestOps(key.interestOps() & ~ops);                                                          
// in case disconnect has been called                                                                  // in case disconnect has been called                                                               
if ((!isConnected()) && (!connecting))                                                               | if ((!isConnected()) && (!connecting)) {                                                            
throw new IOException(sm.getString("nioSender.sender.disconnected"));                                  throw new IOException(sm.getString("nioSender.sender.disconnected"));                               
if (!key.isValid())                                                                                  | }                                                                                                   
                                                                                                     | if (!key.isValid()) {                                                                               
throw new IOException(sm.getString("nioSender.key.inValid"));                                          throw new IOException(sm.getString("nioSender.key.inValid"));                                       
                                                                                                     | }                                                                                                   
if (key.isConnectable()) {                                                                             if (key.isConnectable()) {                                                                          
if (socketChannel.finishConnect()) {                                                                   if (socketChannel.finishConnect()) {                                                                
completeConnect();                                                                                     completeConnect();                                                                                  
if (current != null)                                                                                 | if (current != null) {                                                                              
key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);                                            key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);                                         
                                                                                                     | }                                                                                                   
return false;                                                                                          return false;                                                                                       
} else {                                                                                               } else {                                                                                            
// wait for the connection to finish                                                                   // wait for the connection to finish                                                                
key.interestOps(key.interestOps() | SelectionKey.OP_CONNECT);                                          key.interestOps(key.interestOps() | SelectionKey.OP_CONNECT);                                       
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
// end if                                                                                              // end if                                                                                           
} else if (key.isWritable()) {                                                                         } else if (key.isWritable()) {                                                                      
boolean writecomplete = write();                                                                       boolean writecomplete = write();                                                                    
if (writecomplete) {                                                                                   if (writecomplete) {                                                                                
// we are completed, should we read an ack?                                                            // we are completed, should we read an ack?                                                         
if (waitForAck) {                                                                                      if (waitForAck) {                                                                                   
// register to read the ack                                                                            // register to read the ack                                                                         
key.interestOps(key.interestOps() | SelectionKey.OP_READ);                                             key.interestOps(key.interestOps() | SelectionKey.OP_READ);                                          
} else {                                                                                               } else {                                                                                            
// if not, we are ready, setMessage will reregister us for another write interest                      // if not, we are ready, setMessage will reregister us for another write interest                   
// do a health check, we have no way of verify a disconnected                                          // do a health check, we have no way of verify a disconnected                                       
// socket since we don't register for OP_READ on waitForAck=false                                      // socket since we don't register for OP_READ on waitForAck=false                                   
// this causes overhead                                                                                // this causes overhead                                                                             
read();                                                                                                read();                                                                                             
setRequestCount(getRequestCount() + 1);                                                                setRequestCount(getRequestCount() + 1);                                                             
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// we are not complete, lets write some more                                                           // we are not complete, lets write some more                                                        
key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);                                            key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);                                         
}                                                                                                      }                                                                                                   
// end if                                                                                              // end if                                                                                           
} else if (key.isReadable()) {                                                                         } else if (key.isReadable()) {                                                                      
boolean readcomplete = read();                                                                         boolean readcomplete = read();                                                                      
if (readcomplete) {                                                                                    if (readcomplete) {                                                                                 
setRequestCount(getRequestCount() + 1);                                                                setRequestCount(getRequestCount() + 1);                                                             
return true;                                                                                           return true;                                                                                        
} else {                                                                                               } else {                                                                                            
key.interestOps(key.interestOps() | SelectionKey.OP_READ);                                             key.interestOps(key.interestOps() | SelectionKey.OP_READ);                                          
}                                                                                                      }                                                                                                   
// end if                                                                                              // end if                                                                                           
} else {                                                                                               } else {                                                                                            
// unknown state, should never happen                                                                  // unknown state, should never happen                                                               
log.warn(sm.getString("nioSender.unknown.state", Integer.toString(ops)));                              log.warn(sm.getString("nioSender.unknown.state", Integer.toString(ops)));                           
throw new IOException(sm.getString("nioSender.unknown.state", Integer.toString(ops)));                 throw new IOException(sm.getString("nioSender.unknown.state", Integer.toString(ops)));              
}                                                                                                      }                                                                                                   
// end if                                                                                              // end if                                                                                           
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
