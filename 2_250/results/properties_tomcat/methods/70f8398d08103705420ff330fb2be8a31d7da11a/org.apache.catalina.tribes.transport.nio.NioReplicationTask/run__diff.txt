// loop forever waiting for work to do                                                                 // loop forever waiting for work to do                                                              
@Override                                                                                              @Override                                                                                           
public synchronized void run() {                                                                       public synchronized void run() {                                                                    
if (buffer == null) {                                                                                  if (buffer == null) {                                                                               
int size = getRxBufSize();                                                                             int size = getRxBufSize();                                                                          
if (key.channel() instanceof DatagramChannel) {                                                        if (key.channel() instanceof DatagramChannel) {                                                     
size = ChannelReceiver.MAX_UDP_SIZE;                                                                   size = ChannelReceiver.MAX_UDP_SIZE;                                                                
}                                                                                                      }                                                                                                   
if ((getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER) {                                   if ((getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER) {                                
buffer = ByteBuffer.allocateDirect(size);                                                              buffer = ByteBuffer.allocateDirect(size);                                                           
} else {                                                                                               } else {                                                                                            
buffer = ByteBuffer.allocate(size);                                                                    buffer = ByteBuffer.allocate(size);                                                                 
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
buffer.clear();                                                                                        buffer.clear();                                                                                     
}                                                                                                      }                                                                                                   
if (key == null) {                                                                                     if (key == null) {                                                                                  
// just in case                                                                                        // just in case                                                                                     
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
if (log.isTraceEnabled())                                                                            | if (log.isTraceEnabled()) {                                                                         
log.trace("Servicing key:" + key);                                                                     log.trace("Servicing key:" + key);                                                                  
                                                                                                     | }                                                                                                   
try {                                                                                                  try {                                                                                               
ObjectReader reader = (ObjectReader) key.attachment();                                                 ObjectReader reader = (ObjectReader) key.attachment();                                              
if (reader == null) {                                                                                  if (reader == null) {                                                                               
if (log.isTraceEnabled())                                                                            | if (log.isTraceEnabled()) {                                                                         
log.trace("No object reader, cancelling:" + key);                                                      log.trace("No object reader, cancelling:" + key);                                                   
                                                                                                     | }                                                                                                   
cancelKey(key);                                                                                        cancelKey(key);                                                                                     
} else {                                                                                               } else {                                                                                            
if (log.isTraceEnabled())                                                                            | if (log.isTraceEnabled()) {                                                                         
log.trace("Draining channel:" + key);                                                                  log.trace("Draining channel:" + key);                                                               
                                                                                                     | }                                                                                                   
drainChannel(key, reader);                                                                             drainChannel(key, reader);                                                                          
}                                                                                                      }                                                                                                   
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
// this is common, since the sockets on the other                                                      // this is common, since the sockets on the other                                                   
// end expire after a certain time.                                                                    // end expire after a certain time.                                                                 
if (e instanceof CancelledKeyException) {                                                              if (e instanceof CancelledKeyException) {                                                           
// do nothing                                                                                          // do nothing                                                                                       
} else if (e instanceof IOException) {                                                                 } else if (e instanceof IOException) {                                                              
// don't spew out stack traces for IO exceptions unless debug is enabled.                              // don't spew out stack traces for IO exceptions unless debug is enabled.                           
if (log.isDebugEnabled())                                                                            | if (log.isDebugEnabled()) {                                                                         
log.debug("IOException in replication worker, unable to drain channel. Probable cause: Keep alive so   log.debug("IOException in replication worker, unable to drain channel. Probable cause: Keep alive so
else                                                                                                 | } else {                                                                                            
log.warn(sm.getString("nioReplicationTask.unable.drainChannel.ioe", e.getMessage()));                  log.warn(sm.getString("nioReplicationTask.unable.drainChannel.ioe", e.getMessage()));               
                                                                                                     | }                                                                                                   
} else if (log.isErrorEnabled()) {                                                                     } else if (log.isErrorEnabled()) {                                                                  
// this is a real error, log it.                                                                       // this is a real error, log it.                                                                    
log.error(sm.getString("nioReplicationTask.exception.drainChannel"), e);                               log.error(sm.getString("nioReplicationTask.exception.drainChannel"), e);                            
}                                                                                                      }                                                                                                   
cancelKey(key);                                                                                        cancelKey(key);                                                                                     
}                                                                                                      }                                                                                                   
key = null;                                                                                            key = null;                                                                                         
// done, ready for more, return to pool                                                                // done, ready for more, return to pool                                                             
getTaskPool().returnWorker(this);                                                                      getTaskPool().returnWorker(this);                                                                   
}                                                                                                      }                                                                                                   
