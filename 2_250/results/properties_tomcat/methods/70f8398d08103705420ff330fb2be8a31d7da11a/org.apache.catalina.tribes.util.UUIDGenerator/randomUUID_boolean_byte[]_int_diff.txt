public static byte[] randomUUID(boolean secure, byte[] into, int offset) {                             public static byte[] randomUUID(boolean secure, byte[] into, int offset) {                          
if ((offset + UUID_LENGTH) &gt; into.length)                                                         | if ((offset + UUID_LENGTH) &gt; into.length) {                                                      
throw new ArrayIndexOutOfBoundsException(sm.getString("uuidGenerator.unable.fit", Integer.toString(U   throw new ArrayIndexOutOfBoundsException(sm.getString("uuidGenerator.unable.fit", Integer.toString(U
                                                                                                     | }                                                                                                   
Random r = (secure && (secrand != null)) ? secrand : rand;                                             Random r = (secure && (secrand != null)) ? secrand : rand;                                          
nextBytes(into, offset, UUID_LENGTH, r);                                                               nextBytes(into, offset, UUID_LENGTH, r);                                                            
into[6 + offset] &= 0x0F;                                                                              into[6 + offset] &= 0x0F;                                                                           
into[6 + offset] |= (UUID_VERSION &lt;&lt; 4);                                                         into[6 + offset] |= (UUID_VERSION &lt;&lt; 4);                                                      
// 0011 1111                                                                                           // 0011 1111                                                                                        
into[8 + offset] &= 0x3F;                                                                              into[8 + offset] &= 0x3F;                                                                           
// 1000 0000                                                                                           // 1000 0000                                                                                        
into[8 + offset] |= 0x80;                                                                              into[8 + offset] |= 0x80;                                                                           
return into;                                                                                           return into;                                                                                        
}                                                                                                      }                                                                                                   
