private SendResult doLoop(long selectTimeOut, int maxAttempts, boolean waitForAck, ChannelMessage ms   private SendResult doLoop(long selectTimeOut, int maxAttempts, boolean waitForAck, ChannelMessage ms
SendResult result = new SendResult();                                                                  SendResult result = new SendResult();                                                               
int selectedKeys;                                                                                      int selectedKeys;                                                                                   
try {                                                                                                  try {                                                                                               
selectedKeys = selector.select(selectTimeOut);                                                         selectedKeys = selector.select(selectTimeOut);                                                      
} catch (IOException ioe) {                                                                            } catch (IOException ioe) {                                                                         
throw new ChannelException(sm.getString("parallelNioSender.send.failed"), ioe);                        throw new ChannelException(sm.getString("parallelNioSender.send.failed"), ioe);                     
}                                                                                                      }                                                                                                   
if (selectedKeys == 0) {                                                                               if (selectedKeys == 0) {                                                                            
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();                                  Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();                               
while (it.hasNext()) {                                                                                 while (it.hasNext()) {                                                                              
SelectionKey sk = it.next();                                                                           SelectionKey sk = it.next();                                                                        
it.remove();                                                                                           it.remove();                                                                                        
int readyOps = sk.readyOps();                                                                          int readyOps = sk.readyOps();                                                                       
sk.interestOps(sk.interestOps() & ~readyOps);                                                          sk.interestOps(sk.interestOps() & ~readyOps);                                                       
NioSender sender = (NioSender) sk.attachment();                                                        NioSender sender = (NioSender) sk.attachment();                                                     
try {                                                                                                  try {                                                                                               
if (sender.process(sk, waitForAck)) {                                                                  if (sender.process(sk, waitForAck)) {                                                               
sender.setComplete(true);                                                                              sender.setComplete(true);                                                                           
result.complete(sender);                                                                               result.complete(sender);                                                                            
if (Logs.MESSAGES.isTraceEnabled()) {                                                                  if (Logs.MESSAGES.isTraceEnabled()) {                                                               
Logs.MESSAGES.trace("ParallelNioSender - Sent msg:" + new UniqueId(msg.getUniqueId()) + " at " + new   Logs.MESSAGES.trace("ParallelNioSender - Sent msg:" + new UniqueId(msg.getUniqueId()) + " at " + new
}                                                                                                      }                                                                                                   
SenderState.getSenderState(sender.getDestination()).setReady();                                        SenderState.getSenderState(sender.getDestination()).setReady();                                     
}                                                                                                      }                                                                                                   
// end if                                                                                              // end if                                                                                           
} catch (Exception x) {                                                                                } catch (Exception x) {                                                                             
if (log.isTraceEnabled()) {                                                                            if (log.isTraceEnabled()) {                                                                         
log.trace("Error while processing send to " + sender.getDestination().getName(), x);                   log.trace("Error while processing send to " + sender.getDestination().getName(), x);                
}                                                                                                      }                                                                                                   
SenderState state = SenderState.getSenderState(sender.getDestination());                               SenderState state = SenderState.getSenderState(sender.getDestination());                            
int attempt = sender.getAttempt() + 1;                                                                 int attempt = sender.getAttempt() + 1;                                                              
boolean retry = (attempt &lt;= maxAttempts && maxAttempts &gt; 0);                                     boolean retry = (attempt &lt;= maxAttempts && maxAttempts &gt; 0);                                  
synchronized (state) {                                                                                 synchronized (state) {                                                                              
// sk.cancel();                                                                                        // sk.cancel();                                                                                     
if (state.isSuspect())                                                                               | if (state.isSuspect()) {                                                                            
state.setFailing();                                                                                    state.setFailing();                                                                                 
                                                                                                     | }                                                                                                   
if (state.isReady()) {                                                                                 if (state.isReady()) {                                                                              
state.setSuspect();                                                                                    state.setSuspect();                                                                                 
if (retry)                                                                                           | if (retry) {                                                                                        
log.warn(sm.getString("parallelNioSender.send.fail.retrying", sender.getDestination().getName()));     log.warn(sm.getString("parallelNioSender.send.fail.retrying", sender.getDestination().getName()));  
else                                                                                                 | } else {                                                                                            
log.warn(sm.getString("parallelNioSender.send.fail", sender.getDestination().getName()), x);           log.warn(sm.getString("parallelNioSender.send.fail", sender.getDestination().getName()), x);        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
if (!isConnected()) {                                                                                  if (!isConnected()) {                                                                               
log.warn(sm.getString("parallelNioSender.sender.disconnected.notRetry", sender.getDestination().getN   log.warn(sm.getString("parallelNioSender.sender.disconnected.notRetry", sender.getDestination().getN
ChannelException cx = new ChannelException(sm.getString("parallelNioSender.sender.disconnected.sendF   ChannelException cx = new ChannelException(sm.getString("parallelNioSender.sender.disconnected.sendF
cx.addFaultyMember(sender.getDestination(), x);                                                        cx.addFaultyMember(sender.getDestination(), x);                                                     
result.failed(cx);                                                                                     result.failed(cx);                                                                                  
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
byte[] data = sender.getMessage();                                                                     byte[] data = sender.getMessage();                                                                  
if (retry) {                                                                                           if (retry) {                                                                                        
try {                                                                                                  try {                                                                                               
sender.disconnect();                                                                                   sender.disconnect();                                                                                
sender.connect();                                                                                      sender.connect();                                                                                   
sender.setAttempt(attempt);                                                                            sender.setAttempt(attempt);                                                                         
sender.setMessage(data);                                                                               sender.setMessage(data);                                                                            
} catch (Exception ignore) {                                                                           } catch (Exception ignore) {                                                                        
state.setFailing();                                                                                    state.setFailing();                                                                                 
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
ChannelException cx = new ChannelException(sm.getString("parallelNioSender.sendFailed.attempt", Inte   ChannelException cx = new ChannelException(sm.getString("parallelNioSender.sendFailed.attempt", Inte
cx.addFaultyMember(sender.getDestination(), x);                                                        cx.addFaultyMember(sender.getDestination(), x);                                                     
result.failed(cx);                                                                                     result.failed(cx);                                                                                  
}                                                                                                      }                                                                                                   
// end if                                                                                              // end if                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
