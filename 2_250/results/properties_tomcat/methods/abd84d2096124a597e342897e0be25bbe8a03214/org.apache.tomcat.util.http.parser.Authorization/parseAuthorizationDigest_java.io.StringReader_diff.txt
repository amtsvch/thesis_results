/**
 * Parses an HTTP Authorization header for DIGEST authentication as per RFC
 * 2617 section 3.2.2.
 *
 * @param input The header value to parse
 *
 * @return  A map of directives and values as {@link String}s or
 *          <code>null</code> if a parsing error occurs. Although the
 *          values returned are {@link String}s they will have been
 *          validated to ensure that they conform to RFC 2617.
 *
 * @throws IllegalArgumentException If the header does not conform to RFC
 *                                  2617
 * @throws java.io.IOException If an error occurs while reading the input
 */
public static Map<String, String> parseAuthorizationDigest(StringReader input) throws IllegalArgumentException, IOException {
    Map<String, String> result = new HashMap<>();
    if (HttpParser.skipConstant(input, "Digest") != SkipResult.FOUND) {
        return null;
    }
    // All field names are valid tokens
    String field = HttpParser.readToken(input);
    if (field == null) {
        return null;
    }
    while (!field.equals("")) {
        if (HttpParser.skipConstant(input, "=") != SkipResult.FOUND) {
            return null;
        }
        String value = null;
        FieldType type = fieldTypes.get(field.toLowerCase(Locale.ENGLISH));
        if (type == null) {
            // auth-param = token "=" ( token | quoted-string )
            type = FieldType.TOKEN_OR_QUOTED_STRING;
        }
        switch(type) {
            case QUOTED_STRING:
                value = HttpParser.readQuotedString(input, false);
                break;
            case TOKEN_OR_QUOTED_STRING:
                value = HttpParser.readTokenOrQuotedString(input, false);
                break;
            case LHEX:
                value = HttpParser.readLhex(input);
                break;
            case QUOTED_TOKEN:
                value = HttpParser.readQuotedToken(input);
                break;
        }
        if (value == null) {
            return null;
        }
        result.put(field, value);
        if (HttpParser.skipConstant(input, ",") == SkipResult.NOT_FOUND) {
            return null;
        }
        field = HttpParser.readToken(input);
        if (field == null) {
            return null;
        }
    }
    return result;
}