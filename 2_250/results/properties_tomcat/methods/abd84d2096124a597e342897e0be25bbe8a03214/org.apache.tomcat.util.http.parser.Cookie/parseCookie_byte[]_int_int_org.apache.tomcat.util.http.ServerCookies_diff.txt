public static void parseCookie(byte[] bytes, int offset, int len, ServerCookies serverCookies) {
    // ByteBuffer is used throughout this parser as it allows the byte[]
    // and position information to be easily passed between parsing methods
    ByteBuffer bb = new ByteBuffer(bytes, offset, len);
    // Using RFC6265 parsing rules, check to see if the header starts with a
    // version marker. An RFC2109 version marker may be read using RFC6265
    // parsing rules. If version 1, use RFC2109. Else use RFC6265.
    skipLWS(bb);
    // Record position in case we need to return.
    int mark = bb.position();
    SkipResult skipResult = skipBytes(bb, VERSION_BYTES);
    if (skipResult != SkipResult.FOUND) {
        // No need to reset position since skipBytes() will have done it
        parseCookieRfc6265(bb, serverCookies);
        return;
    }
    skipLWS(bb);
    skipResult = skipByte(bb, EQUALS_BYTE);
    if (skipResult != SkipResult.FOUND) {
        // Need to reset position as skipByte() will only have reset to
        // position before it was called
        bb.position(mark);
        parseCookieRfc6265(bb, serverCookies);
        return;
    }
    skipLWS(bb);
    ByteBuffer value = readCookieValue(bb);
    if (value != null && value.remaining() == 1) {
        int version = value.get() - '0';
        if (version == 1 || version == 0) {
            // $Version=1 -> RFC2109
            // $Version=0 -> RFC2109
            skipLWS(bb);
            byte b = bb.get();
            if (b == SEMICOLON_BYTE || b == COMMA_BYTE) {
                parseCookieRfc2109(bb, serverCookies, version);
            }
        } else {
            // Unrecognised version.
            // Ignore this header.
            value.rewind();
            logInvalidVersion(value);
        }
    } else {
        // Unrecognised version.
        // Ignore this header.
        logInvalidVersion(value);
    }
}