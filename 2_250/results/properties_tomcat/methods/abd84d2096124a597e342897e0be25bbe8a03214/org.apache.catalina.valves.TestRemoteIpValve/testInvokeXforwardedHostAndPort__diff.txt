@Test
public void testInvokeXforwardedHostAndPort() throws Exception {
    // PREPARE
    RemoteIpValve remoteIpValve = new RemoteIpValve();
    remoteIpValve.setHostHeader("x-forwarded-host");
    remoteIpValve.setPortHeader("x-forwarded-port");
    remoteIpValve.setProtocolHeader("x-forwarded-proto");
    RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();
    remoteIpValve.setNext(remoteAddrAndHostTrackerValve);
    Request request = new MockRequest();
    request.setCoyoteRequest(new org.apache.coyote.Request());
    // client ip
    request.setRemoteAddr("192.168.0.10");
    request.setRemoteHost("192.168.0.10");
    // protocol
    request.setSecure(false);
    request.setServerPort(8080);
    request.getCoyoteRequest().scheme().setString("http");
    // host and port
    request.getCoyoteRequest().serverName().setString("10.0.0.1");
    request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-host").setString("example.com");
    request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-port").setString("8443");
    request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-proto").setString("https");
    // TEST
    remoteIpValve.invoke(request, null);
    // VERIFY
    // protocol
    String actualServerName = remoteAddrAndHostTrackerValve.getServerName();
    Assert.assertEquals("tracked serverName", "example.com", actualServerName);
    String actualScheme = remoteAddrAndHostTrackerValve.getScheme();
    Assert.assertEquals("tracked scheme", "https", actualScheme);
    int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();
    Assert.assertEquals("tracked serverPort", 8443, actualServerPort);
    boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();
    Assert.assertTrue("tracked secure", actualSecure);
    String actualPostInvokeServerName = request.getServerName();
    Assert.assertEquals("postInvoke serverName", "10.0.0.1", actualPostInvokeServerName);
    boolean actualPostInvokeSecure = request.isSecure();
    Assert.assertFalse("postInvoke secure", actualPostInvokeSecure);
    int actualPostInvokeServerPort = request.getServerPort();
    Assert.assertEquals("postInvoke serverPort", 8080, actualPostInvokeServerPort);
    String actualPostInvokeScheme = request.getScheme();
    Assert.assertEquals("postInvoke scheme", "http", actualPostInvokeScheme);
}