/**
 * @return the next token type and initializes any state variables
 * accordingly.
 */
public int nextToken() {
    // Skip any leading white space
    while (index < length && Character.isWhitespace(expr[index])) {
        index++;
    }
    // Clear the current token val
    tokenVal = null;
    if (index == length) {
        // End of string
        return TOKEN_END;
    }
    int start = index;
    char currentChar = expr[index];
    char nextChar = (char) 0;
    index++;
    if (index < length) {
        nextChar = expr[index];
    }
    // Check for a known token start
    switch(currentChar) {
        case '(':
            return TOKEN_LBRACE;
        case ')':
            return TOKEN_RBRACE;
        case '=':
            return TOKEN_EQ;
        case '!':
            if (nextChar == '=') {
                index++;
                return TOKEN_NOT_EQ;
            }
            return TOKEN_NOT;
        case '|':
            if (nextChar == '|') {
                index++;
                return TOKEN_OR;
            }
            break;
        case '&':
            if (nextChar == '&') {
                index++;
                return TOKEN_AND;
            }
            break;
        case '>':
            if (nextChar == '=') {
                index++;
                // Greater than or equal
                return TOKEN_GE;
            }
            // Greater than
            return TOKEN_GT;
        case '<':
            if (nextChar == '=') {
                index++;
                // Less than or equal
                return TOKEN_LE;
            }
            // Less than
            return TOKEN_LT;
        default:
            // Otherwise it's a string
            break;
    }
    int end = index;
    if (currentChar == '"' || currentChar == '\'') {
        // It's a quoted string and the end is the next unescaped quote
        char endChar = currentChar;
        boolean escaped = false;
        start++;
        for (; index < length; index++) {
            if (expr[index] == '\\' && !escaped) {
                escaped = true;
                continue;
            }
            if (expr[index] == endChar && !escaped) {
                break;
            }
            escaped = false;
        }
        end = index;
        // Skip the end quote
        index++;
    } else if (currentChar == '/') {
        // It's a regular expression and the end is the next unescaped /
        char endChar = currentChar;
        boolean escaped = false;
        for (; index < length; index++) {
            if (expr[index] == '\\' && !escaped) {
                escaped = true;
                continue;
            }
            if (expr[index] == endChar && !escaped) {
                break;
            }
            escaped = false;
        }
        end = ++index;
    } else {
        // End is the next whitespace character
        for (; index < length; index++) {
            if (isMetaChar(expr[index])) {
                break;
            }
        }
        end = index;
    }
    // Extract the string from the array
    this.tokenVal = new String(expr, start, end - start);
    return TOKEN_STRING;
}