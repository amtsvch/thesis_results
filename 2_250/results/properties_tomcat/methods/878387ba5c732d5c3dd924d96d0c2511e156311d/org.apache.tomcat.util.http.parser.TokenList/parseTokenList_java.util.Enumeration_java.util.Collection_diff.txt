/**                                                                                                    /**                                                                                                 
* Parses an enumeration of header values of the form 1#token, forcing all                              * Parses an enumeration of header values of the form 1#token, forcing all                           
* parsed values to lower case.                                                                         * parsed values to lower case.                                                                      
*                                                                                                      *                                                                                                   
* @param inputs     The headers to parse                                                               * @param inputs     The headers to parse                                                            
* @param collection The Collection (usually a list of a set) to which the                            | * @param collection The Collection (usually a list or a set) to which the                           
*                       parsed tokens should be added                                                  *                       parsed tokens should be added                                               
*                                                                                                      *                                                                                                   
* @return {@code} true if the header values were parsed cleanly, otherwise                           | * @return {@code} true if the header values were parsed cleanly and at                              
*         {@code false} (e.g. if a non-token value was encountered)                                  | *         least one token was found, otherwise {@code false} (e.g. if a                             
                                                                                                     | *         non-token value was encountered)                                                          
*                                                                                                      *                                                                                                   
* @throws IOException If an I/O error occurs reading the header                                        * @throws IOException If an I/O error occurs reading the header                                     
*/                                                                                                     */                                                                                                  
public static boolean parseTokenList(Enumeration&lt;String&gt; inputs, Collection&lt;String&gt; coll   public static boolean parseTokenList(Enumeration&lt;String&gt; inputs, Collection&lt;String&gt; coll
boolean result = true;                                                                                 boolean result = true;                                                                              
while (inputs.hasMoreElements()) {                                                                     while (inputs.hasMoreElements()) {                                                                  
String nextHeaderValue = inputs.nextElement();                                                         String nextHeaderValue = inputs.nextElement();                                                      
if (nextHeaderValue != null) {                                                                         if (nextHeaderValue != null) {                                                                      
if (!TokenList.parseTokenList(new StringReader(nextHeaderValue), collection)) {                        if (!TokenList.parseTokenList(new StringReader(nextHeaderValue), collection)) {                     
result = false;                                                                                        result = false;                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
