/**                                                                                                    /**                                                                                                 
* Parses a header of the form 1#token, forcing all parsed values to lower                              * Parses a header of the form 1#token, forcing all parsed values to lower                           
* case. This is typically used when header values are case-insensitive.                              | * case.                                                                                             
*                                                                                                      *                                                                                                   
* @param input      The header to parse                                                                * @param input      The header to parse                                                             
* @param collection The Collection (usually a list of a set) to which the                            | * @param collection The Collection (usually a list or a set) to which the                           
*                       parsed tokens should be added                                                  *                       parsed tokens should be added                                               
*                                                                                                      *                                                                                                   
* @return {@code} true if the header was parsed cleanly, otherwise                                   | * @return {@code} true if the header values were parsed cleanly and at                              
*         {@code false} (e.g. if a non-token value was encountered)                                  | *         least one token was found, otherwise {@code false} (e.g. if a                             
                                                                                                     | *         non-token value was encountered)                                                          
*                                                                                                      *                                                                                                   
* @throws IOException If an I/O error occurs reading the header                                        * @throws IOException If an I/O error occurs reading the header                                     
*/                                                                                                     */                                                                                                  
public static boolean parseTokenList(Reader input, Collection&lt;String&gt; collection) throws IOExc   public static boolean parseTokenList(Reader input, Collection&lt;String&gt; collection) throws IOExc
boolean invalid = false;                                                                               boolean invalid = false;                                                                            
boolean valid = false;                                                                                 boolean valid = false;                                                                              
do {                                                                                                   do {                                                                                                
String fieldName = HttpParser.readToken(input);                                                      | String element = HttpParser.readToken(input);                                                       
if (fieldName == null) {                                                                             | if (element == null) {                                                                              
// Invalid field-name, skip to the next one                                                          | // No token found. Could be empty element (which is OK for                                          
                                                                                                     | // 1#token - see RFC 7230 section 7) or a non-token.                                                
                                                                                                     | if (HttpParser.skipConstant(input, ",") != SkipResult.FOUND) {                                      
                                                                                                     | // Non-token element, skip to the next one                                                          
invalid = true;                                                                                        invalid = true;                                                                                     
HttpParser.skipUntil(input, 0, ',');                                                                   HttpParser.skipUntil(input, 0, ',');                                                                
                                                                                                     | }                                                                                                   
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (fieldName.length() == 0) {                                                                       | if (element.length() == 0) {                                                                        
// Unexpected EOF. Should have been a token.                                                         | // EOF after empty element                                                                          
invalid = true;                                                                                      |                                                                                                     
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
SkipResult skipResult = HttpParser.skipConstant(input, ",");                                           SkipResult skipResult = HttpParser.skipConstant(input, ",");                                        
if (skipResult == SkipResult.EOF) {                                                                    if (skipResult == SkipResult.EOF) {                                                                 
// EOF                                                                                                 // EOF                                                                                              
valid = true;                                                                                          valid = true;                                                                                       
collection.add(fieldName.toLowerCase(Locale.ENGLISH));                                               | collection.add(element.toLowerCase(Locale.ENGLISH));                                                
break;                                                                                                 break;                                                                                              
} else if (skipResult == SkipResult.FOUND) {                                                           } else if (skipResult == SkipResult.FOUND) {                                                        
valid = true;                                                                                          valid = true;                                                                                       
collection.add(fieldName.toLowerCase(Locale.ENGLISH));                                               | collection.add(element.toLowerCase(Locale.ENGLISH));                                                
continue;                                                                                              continue;                                                                                           
} else {                                                                                               } else {                                                                                            
// Not a token - ignore it                                                                             // Not a token - ignore it                                                                          
invalid = true;                                                                                        invalid = true;                                                                                     
HttpParser.skipUntil(input, 0, ',');                                                                   HttpParser.skipUntil(input, 0, ',');                                                                
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
} while (true);                                                                                        } while (true);                                                                                     
// Only return true if at least one valid token was read and no invalid                                // Only return true if at least one valid token was read and no invalid                             
// entries were found                                                                                | // elements were found                                                                              
return valid && !invalid;                                                                              return valid && !invalid;                                                                           
}                                                                                                      }                                                                                                   
