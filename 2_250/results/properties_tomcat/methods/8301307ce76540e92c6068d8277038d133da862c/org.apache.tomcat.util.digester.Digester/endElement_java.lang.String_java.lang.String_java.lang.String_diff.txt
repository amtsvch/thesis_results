/**
 * Process notification of the end of an XML element being reached.
 *
 * @param namespaceURI - The Namespace URI, or the empty string if the
 *   element has no Namespace URI or if Namespace processing is not
 *   being performed.
 * @param localName - The local name (without prefix), or the empty
 *   string if Namespace processing is not being performed.
 * @param qName - The qualified XML 1.0 name (with prefix), or the
 *   empty string if qualified names are not available.
 * @exception SAXException if a parsing error is to be reported
 */
@Override
public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
    boolean debug = log.isDebugEnabled();
    if (debug) {
        if (saxLog.isDebugEnabled()) {
            saxLog.debug("endElement(" + namespaceURI + "," + localName + "," + qName + ")");
        }
        log.debug("  match='" + match + "'");
        log.debug("  bodyText='" + bodyText + "'");
    }
    // Parse system properties
    bodyText = updateBodyText(bodyText);
    // the actual element name is either in localName or qName, depending
    // on whether the parser is namespace aware
    String name = localName;
    if ((name == null) || (name.length() < 1)) {
        name = qName;
    }
    // Fire "body" events for all relevant rules
    List<Rule> rules = matches.pop();
    if ((rules != null) && (rules.size() > 0)) {
        String bodyText = this.bodyText.toString().intern();
        for (Rule value : rules) {
            try {
                Rule rule = value;
                if (debug) {
                    log.debug("  Fire body() for " + rule);
                }
                rule.body(namespaceURI, name, bodyText);
            } catch (Exception e) {
                log.error(sm.getString("digester.error.body"), e);
                throw createSAXException(e);
            } catch (Error e) {
                log.error(sm.getString("digester.error.body"), e);
                throw e;
            }
        }
    } else {
        if (debug) {
            log.debug(sm.getString("digester.noRulesFound", match));
        }
        if (rulesValidation) {
            log.warn(sm.getString("digester.noRulesFound", match));
        }
    }
    // Recover the body text from the surrounding element
    bodyText = bodyTexts.pop();
    // Fire "end" events for all relevant rules in reverse order
    if (rules != null) {
        for (int i = 0; i < rules.size(); i++) {
            int j = (rules.size() - i) - 1;
            try {
                Rule rule = rules.get(j);
                if (debug) {
                    log.debug("  Fire end() for " + rule);
                }
                rule.end(namespaceURI, name);
            } catch (Exception e) {
                log.error(sm.getString("digester.error.end"), e);
                throw createSAXException(e);
            } catch (Error e) {
                log.error(sm.getString("digester.error.end"), e);
                throw e;
            }
        }
    }
    // Recover the previous match expression
    int slash = match.lastIndexOf('/');
    if (slash >= 0) {
        match = match.substring(0, slash);
    } else {
        match = "";
    }
}