@Override                                                                                              @Override                                                                                           
public Object getValue(EvaluationContext ctx) throws ELException {                                     public Object getValue(EvaluationContext ctx) throws ELException {                                  
FunctionMapper fnMapper = ctx.getFunctionMapper();                                                     FunctionMapper fnMapper = ctx.getFunctionMapper();                                                  
// quickly validate again for this request                                                             // quickly validate again for this request                                                          
if (fnMapper == null) {                                                                                if (fnMapper == null) {                                                                             
throw new ELException(MessageFactory.get("error.fnMapper.null"));                                      throw new ELException(MessageFactory.get("error.fnMapper.null"));                                   
}                                                                                                      }                                                                                                   
Method m = fnMapper.resolveFunction(this.prefix, this.localName);                                      Method m = fnMapper.resolveFunction(this.prefix, this.localName);                                   
if (m == null && this.prefix.length() == 0) {                                                          if (m == null && this.prefix.length() == 0) {                                                       
// TODO: Do we need to think about precedence of the various ways                                      // TODO: Do we need to think about precedence of the various ways                                   
// a lambda expression may be obtained from something that                                             // a lambda expression may be obtained from something that                                          
// the parser thinks is a function?                                                                    // the parser thinks is a function?                                                                 
Object obj = null;                                                                                     Object obj = null;                                                                                  
if (ctx.isLambdaArgument(this.localName)) {                                                            if (ctx.isLambdaArgument(this.localName)) {                                                         
obj = ctx.getLambdaArgument(this.localName);                                                           obj = ctx.getLambdaArgument(this.localName);                                                        
}                                                                                                      }                                                                                                   
if (obj == null) {                                                                                     if (obj == null) {                                                                                  
VariableMapper varMapper = ctx.getVariableMapper();                                                    VariableMapper varMapper = ctx.getVariableMapper();                                                 
if (varMapper != null) {                                                                               if (varMapper != null) {                                                                            
obj = varMapper.resolveVariable(this.localName);                                                       obj = varMapper.resolveVariable(this.localName);                                                    
if (obj instanceof ValueExpression) {                                                                  if (obj instanceof ValueExpression) {                                                               
// See if this returns a LambdaExpression                                                              // See if this returns a LambdaExpression                                                           
obj = ((ValueExpression) obj).getValue(ctx);                                                           obj = ((ValueExpression) obj).getValue(ctx);                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (obj == null) {                                                                                     if (obj == null) {                                                                                  
obj = ctx.getELResolver().getValue(ctx, null, this.localName);                                         obj = ctx.getELResolver().getValue(ctx, null, this.localName);                                      
}                                                                                                      }                                                                                                   
if (obj instanceof LambdaExpression) {                                                                 if (obj instanceof LambdaExpression) {                                                              
// Build arguments                                                                                     // Build arguments                                                                                  
int i = 0;                                                                                             int i = 0;                                                                                          
while (obj instanceof LambdaExpression && i &lt; jjtGetNumChildren()) {                                while (obj instanceof LambdaExpression && i &lt; jjtGetNumChildren()) {                             
Node args = jjtGetChild(i);                                                                            Node args = jjtGetChild(i);                                                                         
obj = ((LambdaExpression) obj).invoke(((AstMethodParameters) args).getParameters(ctx));                obj = ((LambdaExpression) obj).invoke(((AstMethodParameters) args).getParameters(ctx));             
i++;                                                                                                   i++;                                                                                                
}                                                                                                      }                                                                                                   
if (i &lt; jjtGetNumChildren()) {                                                                      if (i &lt; jjtGetNumChildren()) {                                                                   
// Haven't consumed all the sets of parameters therefore                                               // Haven't consumed all the sets of parameters therefore                                            
// there were too many sets of parameters                                                              // there were too many sets of parameters                                                           
throw new ELException(MessageFactory.get("error.lambda.tooManyMethodParameterSets"));                  throw new ELException(MessageFactory.get("error.lambda.tooManyMethodParameterSets"));               
}                                                                                                      }                                                                                                   
return obj;                                                                                            return obj;                                                                                         
}                                                                                                      }                                                                                                   
// Call to a constructor or a static method                                                            // Call to a constructor or a static method                                                         
obj = ctx.getImportHandler().resolveClass(this.localName);                                             obj = ctx.getImportHandler().resolveClass(this.localName);                                          
if (obj != null) {                                                                                     if (obj != null) {                                                                                  
return ctx.getELResolver().invoke(ctx, new ELClass((Class&lt;?&gt;) obj), "&lt;init&gt;", null, ((As   return ctx.getELResolver().invoke(ctx, new ELClass((Class&lt;?&gt;) obj), "&lt;init&gt;", null, ((As
}                                                                                                      }                                                                                                   
obj = ctx.getImportHandler().resolveStatic(this.localName);                                            obj = ctx.getImportHandler().resolveStatic(this.localName);                                         
if (obj != null) {                                                                                     if (obj != null) {                                                                                  
return ctx.getELResolver().invoke(ctx, new ELClass((Class&lt;?&gt;) obj), this.localName, null, ((As   return ctx.getELResolver().invoke(ctx, new ELClass((Class&lt;?&gt;) obj), this.localName, null, ((As
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (m == null) {                                                                                       if (m == null) {                                                                                    
throw new ELException(MessageFactory.get("error.fnMapper.method", this.getOutputName()));              throw new ELException(MessageFactory.get("error.fnMapper.method", this.getOutputName()));           
}                                                                                                      }                                                                                                   
// Not a lambda expression so must be a function. Check there is just a                                // Not a lambda expression so must be a function. Check there is just a                             
// single set of method parameters                                                                     // single set of method parameters                                                                  
if (this.jjtGetNumChildren() != 1) {                                                                   if (this.jjtGetNumChildren() != 1) {                                                                
throw new ELException(MessageFactory.get("error.function.tooManyMethodParameterSets", getOutputName(   throw new ELException(MessageFactory.get("error.function.tooManyMethodParameterSets", getOutputName(
}                                                                                                      }                                                                                                   
Node parameters = jjtGetChild(0);                                                                      Node parameters = jjtGetChild(0);                                                                   
Class&lt;?&gt;[] paramTypes = m.getParameterTypes();                                                   Class&lt;?&gt;[] paramTypes = m.getParameterTypes();                                                
Object[] params = null;                                                                                Object[] params = null;                                                                             
Object result = null;                                                                                  Object result = null;                                                                               
int inputParameterCount = parameters.jjtGetNumChildren();                                              int inputParameterCount = parameters.jjtGetNumChildren();                                           
int methodParameterCount = paramTypes.length;                                                          int methodParameterCount = paramTypes.length;                                                       
if (inputParameterCount == 0 && methodParameterCount == 1 && m.isVarArgs()) {                          if (inputParameterCount == 0 && methodParameterCount == 1 && m.isVarArgs()) {                       
params = new Object[] { null };                                                                        params = new Object[] { null };                                                                     
} else if (inputParameterCount &gt; 0) {                                                               } else if (inputParameterCount &gt; 0) {                                                            
params = new Object[methodParameterCount];                                                             params = new Object[methodParameterCount];                                                          
try {                                                                                                  try {                                                                                               
for (int i = 0; i &lt; methodParameterCount; i++) {                                                    for (int i = 0; i &lt; methodParameterCount; i++) {                                                 
if (m.isVarArgs() && i == methodParameterCount - 1) {                                                  if (m.isVarArgs() && i == methodParameterCount - 1) {                                               
if (inputParameterCount &lt; methodParameterCount) {                                                   if (inputParameterCount &lt; methodParameterCount) {                                                
params[i] = new Object[] { null };                                                                     params[i] = new Object[] { null };                                                                  
} else if (inputParameterCount == methodParameterCount && paramTypes[i].isArray()) {                   } else if (inputParameterCount == methodParameterCount && paramTypes[i].isArray()) {                
params[i] = parameters.jjtGetChild(i).getValue(ctx);                                                   params[i] = parameters.jjtGetChild(i).getValue(ctx);                                                
} else {                                                                                               } else {                                                                                            
Object[] varargs = new Object[inputParameterCount - methodParameterCount + 1];                         Object[] varargs = new Object[inputParameterCount - methodParameterCount + 1];                      
Class&lt;?&gt; target = paramTypes[i].getComponentType();                                              Class&lt;?&gt; target = paramTypes[i].getComponentType();                                           
for (int j = i; j &lt; inputParameterCount; j++) {                                                     for (int j = i; j &lt; inputParameterCount; j++) {                                                  
varargs[j - i] = parameters.jjtGetChild(j).getValue(ctx);                                              varargs[j - i] = parameters.jjtGetChild(j).getValue(ctx);                                           
varargs[j - i] = coerceToType(ctx, varargs[j - i], target);                                          | varargs[j - i] = ELSupport.coerceToType(ctx, varargs[j - i], target);                               
}                                                                                                      }                                                                                                   
params[i] = varargs;                                                                                   params[i] = varargs;                                                                                
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
params[i] = parameters.jjtGetChild(i).getValue(ctx);                                                   params[i] = parameters.jjtGetChild(i).getValue(ctx);                                                
}                                                                                                      }                                                                                                   
params[i] = coerceToType(ctx, params[i], paramTypes[i]);                                             | params[i] = ELSupport.coerceToType(ctx, params[i], paramTypes[i]);                                  
}                                                                                                      }                                                                                                   
} catch (ELException ele) {                                                                            } catch (ELException ele) {                                                                         
throw new ELException(MessageFactory.get("error.function", this.getOutputName()), ele);                throw new ELException(MessageFactory.get("error.function", this.getOutputName()), ele);             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
result = m.invoke(null, params);                                                                       result = m.invoke(null, params);                                                                    
} catch (IllegalAccessException iae) {                                                                 } catch (IllegalAccessException iae) {                                                              
throw new ELException(MessageFactory.get("error.function", this.getOutputName()), iae);                throw new ELException(MessageFactory.get("error.function", this.getOutputName()), iae);             
} catch (InvocationTargetException ite) {                                                              } catch (InvocationTargetException ite) {                                                           
Throwable cause = ite.getCause();                                                                      Throwable cause = ite.getCause();                                                                   
if (cause instanceof ThreadDeath) {                                                                    if (cause instanceof ThreadDeath) {                                                                 
throw (ThreadDeath) cause;                                                                             throw (ThreadDeath) cause;                                                                          
}                                                                                                      }                                                                                                   
if (cause instanceof VirtualMachineError) {                                                            if (cause instanceof VirtualMachineError) {                                                         
throw (VirtualMachineError) cause;                                                                     throw (VirtualMachineError) cause;                                                                  
}                                                                                                      }                                                                                                   
throw new ELException(MessageFactory.get("error.function", this.getOutputName()), cause);              throw new ELException(MessageFactory.get("error.function", this.getOutputName()), cause);           
}                                                                                                      }                                                                                                   
return result;                                                                                         return result;                                                                                      
}                                                                                                      }                                                                                                   
