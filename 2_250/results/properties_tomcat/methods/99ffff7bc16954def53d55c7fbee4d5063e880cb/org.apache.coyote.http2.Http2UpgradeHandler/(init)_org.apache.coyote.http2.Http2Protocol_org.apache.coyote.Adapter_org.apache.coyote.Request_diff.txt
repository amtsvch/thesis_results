Http2UpgradeHandler(Http2Protocol protocol, Adapter adapter, Request coyoteRequest) {                  Http2UpgradeHandler(Http2Protocol protocol, Adapter adapter, Request coyoteRequest) {               
super(STREAM_ID_ZERO);                                                                                 super(STREAM_ID_ZERO);                                                                              
this.protocol = protocol;                                                                              this.protocol = protocol;                                                                           
this.adapter = adapter;                                                                                this.adapter = adapter;                                                                             
this.connectionId = Integer.toString(connectionIdGenerator.getAndIncrement());                         this.connectionId = Integer.toString(connectionIdGenerator.getAndIncrement());                      
                                                                                                     | // Defaults to -10 * the count factor.                                                              
                                                                                                     | // i.e. when the connection opens, 10 'overhead' frames in a row will                               
                                                                                                     | // cause the connection to be closed.                                                               
                                                                                                     | // Over time the count should be a slowly decreasing negative number.                               
                                                                                                     | // Therefore, the longer a connection is 'well-behaved', the greater                                
                                                                                                     | // tolerance it will have for a period of 'bad' behaviour.                                          
                                                                                                     | overheadCount = new AtomicLong(-10 * protocol.getOverheadCountFactor());                            
lastNonFinalDataPayload = protocol.getOverheadDataThreshold() * 2;                                     lastNonFinalDataPayload = protocol.getOverheadDataThreshold() * 2;                                  
lastWindowUpdate = protocol.getOverheadWindowUpdateThreshold() * 2;                                    lastWindowUpdate = protocol.getOverheadWindowUpdateThreshold() * 2;                                 
remoteSettings = new ConnectionSettingsRemote(connectionId);                                           remoteSettings = new ConnectionSettingsRemote(connectionId);                                        
localSettings = new ConnectionSettingsLocal(connectionId);                                             localSettings = new ConnectionSettingsLocal(connectionId);                                          
localSettings.set(Setting.MAX_CONCURRENT_STREAMS, protocol.getMaxConcurrentStreams());                 localSettings.set(Setting.MAX_CONCURRENT_STREAMS, protocol.getMaxConcurrentStreams());              
localSettings.set(Setting.INITIAL_WINDOW_SIZE, protocol.getInitialWindowSize());                       localSettings.set(Setting.INITIAL_WINDOW_SIZE, protocol.getInitialWindowSize());                    
pingManager.initiateDisabled = protocol.getInitiatePingDisabled();                                     pingManager.initiateDisabled = protocol.getInitiatePingDisabled();                                  
// Initial HTTP request becomes stream 1.                                                              // Initial HTTP request becomes stream 1.                                                           
if (coyoteRequest != null) {                                                                           if (coyoteRequest != null) {                                                                        
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug(sm.getString("upgradeHandler.upgrade", connectionId));                                       log.debug(sm.getString("upgradeHandler.upgrade", connectionId));                                    
}                                                                                                      }                                                                                                   
Integer key = Integer.valueOf(1);                                                                      Integer key = Integer.valueOf(1);                                                                   
Stream stream = new Stream(key, this, coyoteRequest);                                                  Stream stream = new Stream(key, this, coyoteRequest);                                               
streams.put(key, stream);                                                                              streams.put(key, stream);                                                                           
maxActiveRemoteStreamId = 1;                                                                           maxActiveRemoteStreamId = 1;                                                                        
activeRemoteStreamCount.set(1);                                                                        activeRemoteStreamCount.set(1);                                                                     
maxProcessedStreamId = 1;                                                                              maxProcessedStreamId = 1;                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
