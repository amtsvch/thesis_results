/**
 * Remove an existing child Container from association with this parent
 * Container.
 *
 * @param child Existing child Container to be removed
 */
@Override
public void removeChild(Container child) {
    if (child == null) {
        return;
    }
    try {
        if (child.getState().isAvailable()) {
            child.stop();
        }
    } catch (LifecycleException e) {
        log.error(sm.getString("containerBase.child.stop"), e);
    }
    boolean destroy = false;
    try {
        // child.destroy() may have already been called which would have
        // triggered this call. If that is the case, no need to destroy the
        // child again.
        if (!LifecycleState.DESTROYING.equals(child.getState())) {
            child.destroy();
            destroy = true;
        }
    } catch (LifecycleException e) {
        log.error(sm.getString("containerBase.child.destroy"), e);
    }
    if (!destroy) {
        fireContainerEvent(REMOVE_CHILD_EVENT, child);
    }
    synchronized (children) {
        if (children.get(child.getName()) == null) {
            return;
        }
        children.remove(child.getName());
    }
}