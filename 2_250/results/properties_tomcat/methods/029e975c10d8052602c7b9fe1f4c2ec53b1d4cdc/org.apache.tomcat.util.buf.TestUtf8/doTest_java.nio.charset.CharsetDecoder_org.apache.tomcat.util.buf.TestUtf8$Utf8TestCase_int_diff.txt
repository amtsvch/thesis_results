private void doTest(CharsetDecoder decoder, Utf8TestCase testCase, int flags) {                        private void doTest(CharsetDecoder decoder, Utf8TestCase testCase, int flags) {                     
int len = testCase.input.length;                                                                       int len = testCase.input.length;                                                                    
ByteBuffer bb = ByteBuffer.allocate(len);                                                              ByteBuffer bb = ByteBuffer.allocate(len);                                                           
CharBuffer cb = CharBuffer.allocate(len);                                                              CharBuffer cb = CharBuffer.allocate(len);                                                           
// Configure decoder to fail on an error                                                               // Configure decoder to fail on an error                                                            
decoder.reset();                                                                                       decoder.reset();                                                                                    
decoder.onMalformedInput(CodingErrorAction.REPORT);                                                    decoder.onMalformedInput(CodingErrorAction.REPORT);                                                 
decoder.onUnmappableCharacter(CodingErrorAction.REPORT);                                               decoder.onUnmappableCharacter(CodingErrorAction.REPORT);                                            
// Add each byte one at a time. The decoder should fail as soon as                                     // Add each byte one at a time. The decoder should fail as soon as                                  
// an invalid sequence has been provided                                                               // an invalid sequence has been provided                                                            
for (int i = 0; i &lt; len; i++) {                                                                     for (int i = 0; i &lt; len; i++) {                                                                  
bb.put((byte) testCase.input[i]);                                                                      bb.put((byte) testCase.input[i]);                                                                   
bb.flip();                                                                                             bb.flip();                                                                                          
CoderResult cr = decoder.decode(bb, cb, false);                                                        CoderResult cr = decoder.decode(bb, cb, false);                                                     
if (cr.isError()) {                                                                                    if (cr.isError()) {                                                                                 
int expected = testCase.invalidIndex;                                                                  int expected = testCase.invalidIndex;                                                               
if ((flags & ERROR_POS_PLUS1) != 0) {                                                                  if ((flags & ERROR_POS_PLUS1) != 0) {                                                               
expected += 1;                                                                                         expected += 1;                                                                                      
}                                                                                                      }                                                                                                   
if ((flags & ERROR_POS_PLUS2) != 0) {                                                                  if ((flags & ERROR_POS_PLUS2) != 0) {                                                               
expected += 2;                                                                                         expected += 2;                                                                                      
}                                                                                                      }                                                                                                   
if ((flags & ERROR_POS_PLUS4) != 0) {                                                                  if ((flags & ERROR_POS_PLUS4) != 0) {                                                               
expected += 4;                                                                                         expected += 4;                                                                                      
}                                                                                                      }                                                                                                   
Assert.assertEquals(testCase.description, expected, i);                                                Assert.assertEquals(testCase.description, expected, i);                                             
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
bb.compact();                                                                                          bb.compact();                                                                                       
}                                                                                                      }                                                                                                   
// Configure decoder to replace on an error                                                            // Configure decoder to replace on an error                                                         
decoder.reset();                                                                                       decoder.reset();                                                                                    
decoder.onMalformedInput(CodingErrorAction.REPLACE);                                                   decoder.onMalformedInput(CodingErrorAction.REPLACE);                                                
decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);                                              decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);                                           
// Add each byte one at a time.                                                                        // Add each byte one at a time.                                                                     
bb.clear();                                                                                            bb.clear();                                                                                         
cb.clear();                                                                                            cb.clear();                                                                                         
for (int i = 0; i &lt; len; i++) {                                                                     for (int i = 0; i &lt; len; i++) {                                                                  
bb.put((byte) testCase.input[i]);                                                                      bb.put((byte) testCase.input[i]);                                                                   
bb.flip();                                                                                             bb.flip();                                                                                          
CoderResult cr = decoder.decode(bb, cb, false);                                                        CoderResult cr = decoder.decode(bb, cb, false);                                                     
if (cr.isError()) {                                                                                    if (cr.isError()) {                                                                                 
Assert.fail(testCase.description);                                                                     Assert.fail(testCase.description);                                                                  
}                                                                                                      }                                                                                                   
bb.compact();                                                                                          bb.compact();                                                                                       
}                                                                                                      }                                                                                                   
// For incomplete sequences at the end of the input need to tell                                       // For incomplete sequences at the end of the input need to tell                                    
// the decoder the input has ended                                                                     // the decoder the input has ended                                                                  
bb.flip();                                                                                             bb.flip();                                                                                          
CoderResult cr = decoder.decode(bb, cb, true);                                                         CoderResult cr = decoder.decode(bb, cb, true);                                                      
if (cr.isError()) {                                                                                    if (cr.isError()) {                                                                                 
Assert.fail(testCase.description);                                                                     Assert.fail(testCase.description);                                                                  
}                                                                                                      }                                                                                                   
cb.flip();                                                                                             cb.flip();                                                                                          
String expected = testCase.outputReplaced;                                                             String expected = testCase.outputReplaced;                                                          
if ((flags & REPLACE_SWALLOWS_TRAILER) != 0) {                                                         if ((flags & REPLACE_SWALLOWS_TRAILER) != 0) {                                                      
expected = expected.substring(0, expected.length() - 1);                                               expected = expected.substring(0, expected.length() - 1);                                            
}                                                                                                      }                                                                                                   
if ((flags & REPLACE_MISSING1) != 0) {                                                                 if ((flags & REPLACE_MISSING1) != 0) {                                                              
expected = expected.substring(0, 1) + expected.substring(2, expected.length());                      | expected = expected.substring(0, 1) + expected.substring(2);                                        
}                                                                                                      }                                                                                                   
if ((flags & REPLACE_MISSING2) != 0) {                                                                 if ((flags & REPLACE_MISSING2) != 0) {                                                              
expected = expected.substring(0, 1) + expected.substring(3, expected.length());                      | expected = expected.substring(0, 1) + expected.substring(3);                                        
}                                                                                                      }                                                                                                   
if ((flags & REPLACE_MISSING4) != 0) {                                                                 if ((flags & REPLACE_MISSING4) != 0) {                                                              
expected = expected.substring(0, 1) + expected.substring(5, expected.length());                      | expected = expected.substring(0, 1) + expected.substring(5);                                        
}                                                                                                      }                                                                                                   
Assert.assertEquals(testCase.description, expected, cb.toString());                                    Assert.assertEquals(testCase.description, expected, cb.toString());                                 
}                                                                                                      }                                                                                                   
