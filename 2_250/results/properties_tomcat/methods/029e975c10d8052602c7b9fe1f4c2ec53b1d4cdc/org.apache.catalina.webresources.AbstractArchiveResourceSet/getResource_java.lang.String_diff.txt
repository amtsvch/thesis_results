@Override                                                                                              @Override                                                                                           
public final WebResource getResource(String path) {                                                    public final WebResource getResource(String path) {                                                 
checkPath(path);                                                                                       checkPath(path);                                                                                    
String webAppMount = getWebAppMount();                                                                 String webAppMount = getWebAppMount();                                                              
WebResourceRoot root = getRoot();                                                                      WebResourceRoot root = getRoot();                                                                   
/*                                                                                                     /*                                                                                                  
* If jarContents reports that this resource definitely does not contain                                * If jarContents reports that this resource definitely does not contain                             
* the path, we can end this method and move on to the next jar.                                        * the path, we can end this method and move on to the next jar.                                     
*/                                                                                                     */                                                                                                  
if (jarContents != null && !jarContents.mightContainResource(path, webAppMount)) {                     if (jarContents != null && !jarContents.mightContainResource(path, webAppMount)) {                  
return new EmptyResource(root, path);                                                                  return new EmptyResource(root, path);                                                               
}                                                                                                      }                                                                                                   
/*                                                                                                     /*                                                                                                  
* Implementation notes                                                                                 * Implementation notes                                                                              
*                                                                                                      *                                                                                                   
* The path parameter passed into this method always starts with '/'.                                   * The path parameter passed into this method always starts with '/'.                                
*                                                                                                      *                                                                                                   
* The path parameter passed into this method may or may not end with a                                 * The path parameter passed into this method may or may not end with a                              
* '/'. JarFile.getEntry() will return a matching directory entry                                       * '/'. JarFile.getEntry() will return a matching directory entry                                    
* whether or not the name ends in a '/'. However, if the entry is                                      * whether or not the name ends in a '/'. However, if the entry is                                   
* requested without the '/' subsequent calls to JarEntry.isDirectory()                                 * requested without the '/' subsequent calls to JarEntry.isDirectory()                              
* will return false.                                                                                   * will return false.                                                                                
*                                                                                                      *                                                                                                   
* Paths in JARs never start with '/'. Leading '/' need to be removed                                   * Paths in JARs never start with '/'. Leading '/' need to be removed                                
* before any JarFile.getEntry() call.                                                                  * before any JarFile.getEntry() call.                                                               
*/                                                                                                     */                                                                                                  
// If the JAR has been mounted below the web application root, return                                  // If the JAR has been mounted below the web application root, return                               
// an empty resource for requests outside of the mount point.                                          // an empty resource for requests outside of the mount point.                                       
if (path.startsWith(webAppMount)) {                                                                    if (path.startsWith(webAppMount)) {                                                                 
String pathInJar = getInternalPath() + path.substring(webAppMount.length(), path.length());          | String pathInJar = getInternalPath() + path.substring(webAppMount.length());                        
// Always strip off the leading '/' to get the JAR path                                                // Always strip off the leading '/' to get the JAR path                                             
if (pathInJar.length() &gt; 0 && pathInJar.charAt(0) == '/') {                                         if (pathInJar.length() &gt; 0 && pathInJar.charAt(0) == '/') {                                      
pathInJar = pathInJar.substring(1);                                                                    pathInJar = pathInJar.substring(1);                                                                 
}                                                                                                      }                                                                                                   
if (pathInJar.equals("")) {                                                                            if (pathInJar.equals("")) {                                                                         
// Special case                                                                                        // Special case                                                                                     
// This is a directory resource so the path must end with /                                            // This is a directory resource so the path must end with /                                         
if (!path.endsWith("/")) {                                                                             if (!path.endsWith("/")) {                                                                          
path = path + "/";                                                                                     path = path + "/";                                                                                  
}                                                                                                      }                                                                                                   
return new JarResourceRoot(root, new File(getBase()), baseUrlString, path);                            return new JarResourceRoot(root, new File(getBase()), baseUrlString, path);                         
} else {                                                                                               } else {                                                                                            
JarEntry jarEntry = null;                                                                              JarEntry jarEntry = null;                                                                           
if (isMultiRelease()) {                                                                                if (isMultiRelease()) {                                                                             
// Calls JarFile.getJarEntry() which is multi-release aware                                            // Calls JarFile.getJarEntry() which is multi-release aware                                         
jarEntry = getArchiveEntry(pathInJar);                                                                 jarEntry = getArchiveEntry(pathInJar);                                                              
} else {                                                                                               } else {                                                                                            
Map&lt;String, JarEntry&gt; jarEntries = getArchiveEntries(true);                                      Map&lt;String, JarEntry&gt; jarEntries = getArchiveEntries(true);                                   
if (!(pathInJar.charAt(pathInJar.length() - 1) == '/')) {                                              if (!(pathInJar.charAt(pathInJar.length() - 1) == '/')) {                                           
if (jarEntries == null) {                                                                              if (jarEntries == null) {                                                                           
jarEntry = getArchiveEntry(pathInJar + '/');                                                           jarEntry = getArchiveEntry(pathInJar + '/');                                                        
} else {                                                                                               } else {                                                                                            
jarEntry = jarEntries.get(pathInJar + '/');                                                            jarEntry = jarEntries.get(pathInJar + '/');                                                         
}                                                                                                      }                                                                                                   
if (jarEntry != null) {                                                                                if (jarEntry != null) {                                                                             
path = path + '/';                                                                                     path = path + '/';                                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (jarEntry == null) {                                                                                if (jarEntry == null) {                                                                             
if (jarEntries == null) {                                                                              if (jarEntries == null) {                                                                           
jarEntry = getArchiveEntry(pathInJar);                                                                 jarEntry = getArchiveEntry(pathInJar);                                                              
} else {                                                                                               } else {                                                                                            
jarEntry = jarEntries.get(pathInJar);                                                                  jarEntry = jarEntries.get(pathInJar);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (jarEntry == null) {                                                                                if (jarEntry == null) {                                                                             
return new EmptyResource(root, path);                                                                  return new EmptyResource(root, path);                                                               
} else {                                                                                               } else {                                                                                            
return createArchiveResource(jarEntry, path, getManifest());                                           return createArchiveResource(jarEntry, path, getManifest());                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
return new EmptyResource(root, path);                                                                  return new EmptyResource(root, path);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
