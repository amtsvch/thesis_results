private static <T> T coerceToFunctionalInterface(final ELContext ctx, final LambdaExpression lambdaExpression, final Class<T> type) {
    // Create a dynamic proxy for the functional interface
    @SuppressWarnings("unchecked")
    T result = (T) Proxy.newProxyInstance(type.getClassLoader(), new Class[] { type }, (Object obj, Method method, Object[] args) -> {
        // Functional interfaces have a single, abstract method
        if (!Modifier.isAbstract(method.getModifiers())) {
            // TODO
            throw new ELException(MessageFactory.get("elSupport.coerce.nonAbstract", type, method));
        }
        return lambdaExpression.invoke(ctx, args);
    });
    return result;
}