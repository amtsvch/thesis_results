/*                                                                                                     /*                                                                                                  
* This test isn't guaranteed to catch any multithreaded issues, but it                                 * This test isn't guaranteed to catch any multithreaded issues, but it                              
* gives a good exercise.                                                                               * gives a good exercise.                                                                            
*/                                                                                                     */                                                                                                  
@Test                                                                                                  @Test                                                                                               
public void testMultithreaded() throws Exception {                                                     public void testMultithreaded() throws Exception {                                                  
String inputValue = "A test string to fight over.";                                                    String inputValue = "A test string to fight over.";                                                 
final byte[] bytes = inputValue.getBytes("UTF-8");                                                     final byte[] bytes = inputValue.getBytes("UTF-8");                                                  
int numThreads = 100;                                                                                  int numThreads = 100;                                                                               
final int messagesPerThread = 10;                                                                      final int messagesPerThread = 10;                                                                   
dest.setPrevious(new ValuesCaptureInterceptor());                                                      dest.setPrevious(new ValuesCaptureInterceptor());                                                   
src.start(Channel.SND_TX_SEQ);                                                                         src.start(Channel.SND_TX_SEQ);                                                                      
dest.start(Channel.SND_TX_SEQ);                                                                        dest.start(Channel.SND_TX_SEQ);                                                                     
Runnable job = new Runnable() {                                                                        Runnable job = new Runnable() {                                                                     
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void run() {                                                                                    public void run() {                                                                                 
try {                                                                                                  try {                                                                                               
ChannelData msg = new ChannelData(false);                                                              ChannelData msg = new ChannelData(false);                                                           
XByteBuffer xbb = new XByteBuffer(1024, false);                                                        XByteBuffer xbb = new XByteBuffer(1024, false);                                                     
xbb.append(bytes, 0, bytes.length);                                                                    xbb.append(bytes, 0, bytes.length);                                                                 
msg.setMessage(xbb);                                                                                   msg.setMessage(xbb);                                                                                
for (int i = 0; i &lt; messagesPerThread; ++i) src.sendMessage(null, msg, null);                     | for (int i = 0; i &lt; messagesPerThread; ++i) {                                                    
                                                                                                     | src.sendMessage(null, msg, null);                                                                   
                                                                                                     | }                                                                                                   
} catch (ChannelException e) {                                                                         } catch (ChannelException e) {                                                                      
Assert.fail("Encountered exception sending messages: " + e.getMessage());                              Assert.fail("Encountered exception sending messages: " + e.getMessage());                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
};                                                                                                     };                                                                                                  
Thread[] threads = new Thread[numThreads];                                                             Thread[] threads = new Thread[numThreads];                                                          
for (int i = 0; i &lt; numThreads; ++i) {                                                              for (int i = 0; i &lt; numThreads; ++i) {                                                           
threads[i] = new Thread(job);                                                                          threads[i] = new Thread(job);                                                                       
threads[i].setName("Message-Thread-" + i);                                                             threads[i].setName("Message-Thread-" + i);                                                          
}                                                                                                      }                                                                                                   
for (int i = 0; i &lt; numThreads; ++i) threads[i].start();                                          | for (int i = 0; i &lt; numThreads; ++i) {                                                           
for (int i = 0; i &lt; numThreads; ++i) threads[i].join();                                           | threads[i].start();                                                                                 
                                                                                                     | }                                                                                                   
                                                                                                     | for (int i = 0; i &lt; numThreads; ++i) {                                                           
                                                                                                     | threads[i].join();                                                                                  
                                                                                                     | }                                                                                                   
// Check all received messages to make sure they are not corrupted                                     // Check all received messages to make sure they are not corrupted                                  
Collection&lt;byte[]&gt; messages = ((ValuesCaptureInterceptor) dest.getPrevious()).getValues();       Collection&lt;byte[]&gt; messages = ((ValuesCaptureInterceptor) dest.getPrevious()).getValues();    
Assert.assertEquals("Did not receive all expected messages", numThreads * messagesPerThread, message   Assert.assertEquals("Did not receive all expected messages", numThreads * messagesPerThread, message
for (byte[] message : messages) Assert.assertArrayEquals("Message is corrupted", message, bytes);    | for (byte[] message : messages) {                                                                   
                                                                                                     | Assert.assertArrayEquals("Message is corrupted", message, bytes);                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
