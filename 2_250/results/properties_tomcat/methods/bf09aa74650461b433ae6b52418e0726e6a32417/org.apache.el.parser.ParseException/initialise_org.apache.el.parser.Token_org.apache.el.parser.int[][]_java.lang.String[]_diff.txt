/**                                                                                                    /**                                                                                                 
* It uses "currentToken" and "expectedTokenSequences" to generate a parse                              * It uses "currentToken" and "expectedTokenSequences" to generate a parse                           
* error message and returns it.  If this object has been created                                       * error message and returns it.  If this object has been created                                    
* due to a parse error, and you do not catch it (it gets thrown                                        * due to a parse error, and you do not catch it (it gets thrown                                     
* from the parser) the correct error message                                                           * from the parser) the correct error message                                                        
* gets displayed.                                                                                      * gets displayed.                                                                                   
*/                                                                                                     */                                                                                                  
private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenI   private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenI
StringBuffer expected = new StringBuffer();                                                            StringBuffer expected = new StringBuffer();                                                         
int maxSize = 0;                                                                                       int maxSize = 0;                                                                                    
for (int i = 0; i &lt; expectedTokenSequences.length; i++) {                                           for (int i = 0; i &lt; expectedTokenSequences.length; i++) {                                        
if (maxSize &lt; expectedTokenSequences[i].length) {                                                   if (maxSize &lt; expectedTokenSequences[i].length) {                                                
maxSize = expectedTokenSequences[i].length;                                                            maxSize = expectedTokenSequences[i].length;                                                         
}                                                                                                      }                                                                                                   
for (int j = 0; j &lt; expectedTokenSequences[i].length; j++) {                                        for (int j = 0; j &lt; expectedTokenSequences[i].length; j++) {                                     
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');                                 expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');                              
}                                                                                                      }                                                                                                   
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {                            if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {                         
expected.append("...");                                                                                expected.append("...");                                                                             
}                                                                                                      }                                                                                                   
expected.append(System.lineSeparator()).append("    ");                                                expected.append(System.lineSeparator()).append("    ");                                             
}                                                                                                      }                                                                                                   
String retval = "Encountered \"";                                                                      String retval = "Encountered \"";                                                                   
Token tok = currentToken.next;                                                                         Token tok = currentToken.next;                                                                      
for (int i = 0; i &lt; maxSize; i++) {                                                                 for (int i = 0; i &lt; maxSize; i++) {                                                              
if (i != 0)                                                                                          | if (i != 0) {                                                                                       
retval += " ";                                                                                         retval += " ";                                                                                      
                                                                                                     | }                                                                                                   
if (tok.kind == 0) {                                                                                   if (tok.kind == 0) {                                                                                
retval += tokenImage[0];                                                                               retval += tokenImage[0];                                                                            
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
retval += " " + tokenImage[tok.kind];                                                                  retval += " " + tokenImage[tok.kind];                                                               
retval += " \"";                                                                                       retval += " \"";                                                                                    
retval += add_escapes(tok.image);                                                                      retval += add_escapes(tok.image);                                                                   
retval += " \"";                                                                                       retval += " \"";                                                                                    
tok = tok.next;                                                                                        tok = tok.next;                                                                                     
}                                                                                                      }                                                                                                   
retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;   retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
retval += "." + System.lineSeparator();                                                                retval += "." + System.lineSeparator();                                                             
if (expectedTokenSequences.length == 1) {                                                              if (expectedTokenSequences.length == 1) {                                                           
retval += "Was expecting:" + System.lineSeparator() + "    ";                                          retval += "Was expecting:" + System.lineSeparator() + "    ";                                       
} else {                                                                                               } else {                                                                                            
retval += "Was expecting one of:" + System.lineSeparator() + "    ";                                   retval += "Was expecting one of:" + System.lineSeparator() + "    ";                                
}                                                                                                      }                                                                                                   
retval += expected.toString();                                                                         retval += expected.toString();                                                                      
return retval;                                                                                         return retval;                                                                                      
}                                                                                                      }                                                                                                   
