/*                                                                                                     /*                                                                                                  
* Possible invocation of lambda expression. Invocations must be bracketed but                          * Possible invocation of lambda expression. Invocations must be bracketed but                       
* being bracketed does not mean it is an invocation.                                                   * being bracketed does not mean it is an invocation.                                                
*/                                                                                                     */                                                                                                  
final public void LambdaExpressionOrInvocation() throws ParseException {                               final public void LambdaExpressionOrInvocation() throws ParseException {                            
/*@bgen(jjtree) LambdaExpression */                                                                    /*@bgen(jjtree) LambdaExpression */                                                                 
AstLambdaExpression jjtn000 = new AstLambdaExpression(JJTLAMBDAEXPRESSION);                            AstLambdaExpression jjtn000 = new AstLambdaExpression(JJTLAMBDAEXPRESSION);                         
boolean jjtc000 = true;                                                                                boolean jjtc000 = true;                                                                             
jjtree.openNodeScope(jjtn000);                                                                         jjtree.openNodeScope(jjtn000);                                                                      
try {                                                                                                  try {                                                                                               
jj_consume_token(LPAREN);                                                                              jj_consume_token(LPAREN);                                                                           
LambdaParameters();                                                                                    LambdaParameters();                                                                                 
jj_consume_token(ARROW);                                                                               jj_consume_token(ARROW);                                                                            
if (jj_2_4(3)) {                                                                                       if (jj_2_4(3)) {                                                                                    
LambdaExpression();                                                                                    LambdaExpression();                                                                                 
} else {                                                                                               } else {                                                                                            
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                           switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                        
case START_SET_OR_MAP:                                                                                 case START_SET_OR_MAP:                                                                              
case INTEGER_LITERAL:                                                                                  case INTEGER_LITERAL:                                                                               
case FLOATING_POINT_LITERAL:                                                                           case FLOATING_POINT_LITERAL:                                                                        
case STRING_LITERAL:                                                                                   case STRING_LITERAL:                                                                                
case TRUE:                                                                                             case TRUE:                                                                                          
case FALSE:                                                                                            case FALSE:                                                                                         
case NULL:                                                                                             case NULL:                                                                                          
case LPAREN:                                                                                           case LPAREN:                                                                                        
case LBRACK:                                                                                           case LBRACK:                                                                                        
case NOT0:                                                                                             case NOT0:                                                                                          
case NOT1:                                                                                             case NOT1:                                                                                          
case EMPTY:                                                                                            case EMPTY:                                                                                         
case MINUS:                                                                                            case MINUS:                                                                                         
case IDENTIFIER:                                                                                       case IDENTIFIER:                                                                                    
Choice();                                                                                              Choice();                                                                                           
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
jj_la1[8] = jj_gen;                                                                                    jj_la1[8] = jj_gen;                                                                                 
jj_consume_token(-1);                                                                                  jj_consume_token(-1);                                                                               
throw new ParseException();                                                                            throw new ParseException();                                                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
jj_consume_token(RPAREN);                                                                              jj_consume_token(RPAREN);                                                                           
label_5: while (true) {                                                                                label_5: while (true) {                                                                             
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                           switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                        
case LPAREN:                                                                                           case LPAREN:                                                                                        
;                                                                                                      ;                                                                                                   
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
jj_la1[9] = jj_gen;                                                                                    jj_la1[9] = jj_gen;                                                                                 
break label_5;                                                                                         break label_5;                                                                                      
}                                                                                                      }                                                                                                   
MethodParameters();                                                                                    MethodParameters();                                                                                 
}                                                                                                      }                                                                                                   
} catch (Throwable jjte000) {                                                                          } catch (Throwable jjte000) {                                                                       
if (jjtc000) {                                                                                         if (jjtc000) {                                                                                      
jjtree.clearNodeScope(jjtn000);                                                                        jjtree.clearNodeScope(jjtn000);                                                                     
jjtc000 = false;                                                                                       jjtc000 = false;                                                                                    
} else {                                                                                               } else {                                                                                            
jjtree.popNode();                                                                                      jjtree.popNode();                                                                                   
}                                                                                                      }                                                                                                   
if (jjte000 instanceof RuntimeException) {                                                             if (jjte000 instanceof RuntimeException) {                                                          
{                                                                                                      {                                                                                                   
if (true)                                                                                            | if (true) {                                                                                         
throw (RuntimeException) jjte000;                                                                      throw (RuntimeException) jjte000;                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
if (jjte000 instanceof ParseException) {                                                               if (jjte000 instanceof ParseException) {                                                            
{                                                                                                      {                                                                                                   
if (true)                                                                                            | if (true) {                                                                                         
throw (ParseException) jjte000;                                                                        throw (ParseException) jjte000;                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
{                                                                                                      {                                                                                                   
if (true)                                                                                            | if (true) {                                                                                         
throw (Error) jjte000;                                                                                 throw (Error) jjte000;                                                                              
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
if (jjtc000) {                                                                                         if (jjtc000) {                                                                                      
jjtree.closeNodeScope(jjtn000, true);                                                                  jjtree.closeNodeScope(jjtn000, true);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
