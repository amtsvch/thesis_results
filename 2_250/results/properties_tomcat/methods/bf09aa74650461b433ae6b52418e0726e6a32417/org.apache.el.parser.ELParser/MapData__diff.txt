/*                                                                                                     /*                                                                                                  
* Note that both an empty Set and an empty Map are represented by {}. The                              * Note that both an empty Set and an empty Map are represented by {}. The                           
* parser will always parse {} as an empty Set and special handling is required                         * parser will always parse {} as an empty Set and special handling is required                      
* to convert it to an empty Map when appropriate.                                                      * to convert it to an empty Map when appropriate.                                                   
*/                                                                                                     */                                                                                                  
final public void MapData() throws ParseException {                                                    final public void MapData() throws ParseException {                                                 
/*@bgen(jjtree) MapData */                                                                             /*@bgen(jjtree) MapData */                                                                          
AstMapData jjtn000 = new AstMapData(JJTMAPDATA);                                                       AstMapData jjtn000 = new AstMapData(JJTMAPDATA);                                                    
boolean jjtc000 = true;                                                                                boolean jjtc000 = true;                                                                             
jjtree.openNodeScope(jjtn000);                                                                         jjtree.openNodeScope(jjtn000);                                                                      
try {                                                                                                  try {                                                                                               
jj_consume_token(START_SET_OR_MAP);                                                                    jj_consume_token(START_SET_OR_MAP);                                                                 
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                           switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                        
case START_SET_OR_MAP:                                                                                 case START_SET_OR_MAP:                                                                              
case INTEGER_LITERAL:                                                                                  case INTEGER_LITERAL:                                                                               
case FLOATING_POINT_LITERAL:                                                                           case FLOATING_POINT_LITERAL:                                                                        
case STRING_LITERAL:                                                                                   case STRING_LITERAL:                                                                                
case TRUE:                                                                                             case TRUE:                                                                                          
case FALSE:                                                                                            case FALSE:                                                                                         
case NULL:                                                                                             case NULL:                                                                                          
case LPAREN:                                                                                           case LPAREN:                                                                                        
case LBRACK:                                                                                           case LBRACK:                                                                                        
case NOT0:                                                                                             case NOT0:                                                                                          
case NOT1:                                                                                             case NOT1:                                                                                          
case EMPTY:                                                                                            case EMPTY:                                                                                         
case MINUS:                                                                                            case MINUS:                                                                                         
case IDENTIFIER:                                                                                       case IDENTIFIER:                                                                                    
MapEntry();                                                                                            MapEntry();                                                                                         
label_18: while (true) {                                                                               label_18: while (true) {                                                                            
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                           switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                        
case COMMA:                                                                                            case COMMA:                                                                                         
;                                                                                                      ;                                                                                                   
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
jj_la1[46] = jj_gen;                                                                                   jj_la1[46] = jj_gen;                                                                                
break label_18;                                                                                        break label_18;                                                                                     
}                                                                                                      }                                                                                                   
jj_consume_token(COMMA);                                                                               jj_consume_token(COMMA);                                                                            
MapEntry();                                                                                            MapEntry();                                                                                         
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
jj_la1[47] = jj_gen;                                                                                   jj_la1[47] = jj_gen;                                                                                
;                                                                                                      ;                                                                                                   
}                                                                                                      }                                                                                                   
jj_consume_token(RBRACE);                                                                              jj_consume_token(RBRACE);                                                                           
} catch (Throwable jjte000) {                                                                          } catch (Throwable jjte000) {                                                                       
if (jjtc000) {                                                                                         if (jjtc000) {                                                                                      
jjtree.clearNodeScope(jjtn000);                                                                        jjtree.clearNodeScope(jjtn000);                                                                     
jjtc000 = false;                                                                                       jjtc000 = false;                                                                                    
} else {                                                                                               } else {                                                                                            
jjtree.popNode();                                                                                      jjtree.popNode();                                                                                   
}                                                                                                      }                                                                                                   
if (jjte000 instanceof RuntimeException) {                                                             if (jjte000 instanceof RuntimeException) {                                                          
{                                                                                                      {                                                                                                   
if (true)                                                                                            | if (true) {                                                                                         
throw (RuntimeException) jjte000;                                                                      throw (RuntimeException) jjte000;                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
if (jjte000 instanceof ParseException) {                                                               if (jjte000 instanceof ParseException) {                                                            
{                                                                                                      {                                                                                                   
if (true)                                                                                            | if (true) {                                                                                         
throw (ParseException) jjte000;                                                                        throw (ParseException) jjte000;                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
{                                                                                                      {                                                                                                   
if (true)                                                                                            | if (true) {                                                                                         
throw (Error) jjte000;                                                                                 throw (Error) jjte000;                                                                              
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
if (jjtc000) {                                                                                         if (jjtc000) {                                                                                      
jjtree.closeNodeScope(jjtn000, true);                                                                  jjtree.closeNodeScope(jjtn000, true);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
