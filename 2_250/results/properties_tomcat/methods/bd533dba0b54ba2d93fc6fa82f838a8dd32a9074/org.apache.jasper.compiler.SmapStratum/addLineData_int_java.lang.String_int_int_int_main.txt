/**
 * Adds complete information about a simple line mapping.  Specify
 * all the fields in this method; the back-end machinery takes care
 * of printing only those that are necessary in the final SMAP.
 * (My view is that fields are optional primarily for spatial efficiency,
 * not for programmer convenience.  Could always add utility methods
 * later.)
 *
 * @param inputStartLine starting line in the source file
 *        (SMAP <code>InputStartLine</code>)
 * @param inputFileName the filepath (or name) from which the input comes
 *        (yields SMAP <code>LineFileID</code>)  Use unqualified names
 *        carefully, and only when they uniquely identify a file.
 * @param inputLineCount the number of lines in the input to map
 *        (SMAP <code>LineFileCount</code>)
 * @param outputStartLine starting line in the output file
 *        (SMAP <code>OutputStartLine</code>)
 * @param outputLineIncrement number of output lines to map to each
 *        input line (SMAP <code>OutputLineIncrement</code>).  <i>Given the
 *        fact that the name starts with "output", I continuously have
 *        the subconscious urge to call this field
 *        <code>OutputLineExcrement</code>.</i>
 */
public void addLineData(int inputStartLine, String inputFileName, int inputLineCount, int outputStartLine, int outputLineIncrement) {
    // check the input - what are you doing here??
    int fileIndex = filePathList.indexOf(inputFileName);
    if (fileIndex == -1) {
        throw new IllegalArgumentException("inputFileName: " + inputFileName);
    }
    // Jasper incorrectly SMAPs certain Nodes, giving them an
    // outputStartLine of 0.  This can cause a fatal error in
    // optimizeLineSection, making it impossible for Jasper to
    // compile the JSP.  Until we can fix the underlying
    // SMAPping problem, we simply ignore the flawed SMAP entries.
    if (outputStartLine == 0) {
        return;
    }
    // build the LineInfo
    LineInfo li = new LineInfo();
    li.setInputStartLine(inputStartLine);
    li.setInputLineCount(inputLineCount);
    li.setOutputStartLine(outputStartLine);
    li.setOutputLineIncrement(outputLineIncrement);
    if (fileIndex != lastFileID) {
        li.setLineFileID(fileIndex);
    }
    lastFileID = fileIndex;
    // save it
    lineData.add(li);
}