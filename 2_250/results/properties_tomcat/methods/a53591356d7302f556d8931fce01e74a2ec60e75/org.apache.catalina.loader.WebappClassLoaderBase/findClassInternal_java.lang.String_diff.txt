/**                                                                                                    /**                                                                                                 
* Find specified class in local repositories.                                                          * Find specified class in local repositories.                                                       
*                                                                                                      *                                                                                                   
* @param name The binary name of the class to be loaded                                                * @param name The binary name of the class to be loaded                                             
*                                                                                                      *                                                                                                   
* @return the loaded class, or null if the class isn't found                                           * @return the loaded class, or null if the class isn't found                                        
*/                                                                                                     */                                                                                                  
                                                                                                     | /*                                                                                                  
                                                                                                     | * The use of getPackage() is appropriate given that the code is checking                            
                                                                                                     | * if the package is sealed. Therefore, parent class loaders need to be                              
                                                                                                     | * checked.                                                                                          
                                                                                                     | */                                                                                                  
                                                                                                     | @SuppressWarnings("deprecation")                                                                    
protected Class&lt;?&gt; findClassInternal(String name) {                                              protected Class&lt;?&gt; findClassInternal(String name) {                                           
checkStateForResourceLoading(name);                                                                    checkStateForResourceLoading(name);                                                                 
if (name == null) {                                                                                    if (name == null) {                                                                                 
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
String path = binaryNameToPath(name, true);                                                            String path = binaryNameToPath(name, true);                                                         
ResourceEntry entry = resourceEntries.get(path);                                                       ResourceEntry entry = resourceEntries.get(path);                                                    
WebResource resource = null;                                                                           WebResource resource = null;                                                                        
if (entry == null) {                                                                                   if (entry == null) {                                                                                
resource = resources.getClassLoaderResource(path);                                                     resource = resources.getClassLoaderResource(path);                                                  
if (!resource.exists()) {                                                                              if (!resource.exists()) {                                                                           
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
entry = new ResourceEntry();                                                                           entry = new ResourceEntry();                                                                        
entry.lastModified = resource.getLastModified();                                                       entry.lastModified = resource.getLastModified();                                                    
// Add the entry in the local resource repository                                                      // Add the entry in the local resource repository                                                   
synchronized (resourceEntries) {                                                                       synchronized (resourceEntries) {                                                                    
// Ensures that all the threads which may be in a race to load                                         // Ensures that all the threads which may be in a race to load                                      
// a particular class all end up with the same ResourceEntry                                           // a particular class all end up with the same ResourceEntry                                        
// instance                                                                                            // instance                                                                                         
ResourceEntry entry2 = resourceEntries.get(path);                                                      ResourceEntry entry2 = resourceEntries.get(path);                                                   
if (entry2 == null) {                                                                                  if (entry2 == null) {                                                                               
resourceEntries.put(path, entry);                                                                      resourceEntries.put(path, entry);                                                                   
} else {                                                                                               } else {                                                                                            
entry = entry2;                                                                                        entry = entry2;                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
Class&lt;?&gt; clazz = entry.loadedClass;                                                              Class&lt;?&gt; clazz = entry.loadedClass;                                                           
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
synchronized (JreCompat.isGraalAvailable() ? this : getClassLoadingLock(name)) {                       synchronized (JreCompat.isGraalAvailable() ? this : getClassLoadingLock(name)) {                    
clazz = entry.loadedClass;                                                                             clazz = entry.loadedClass;                                                                          
if (clazz != null) {                                                                                   if (clazz != null) {                                                                                
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
if (resource == null) {                                                                                if (resource == null) {                                                                             
resource = resources.getClassLoaderResource(path);                                                     resource = resources.getClassLoaderResource(path);                                                  
}                                                                                                      }                                                                                                   
if (!resource.exists()) {                                                                              if (!resource.exists()) {                                                                           
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
byte[] binaryContent = resource.getContent();                                                          byte[] binaryContent = resource.getContent();                                                       
if (binaryContent == null) {                                                                           if (binaryContent == null) {                                                                        
// Something went wrong reading the class bytes (and will have                                         // Something went wrong reading the class bytes (and will have                                      
// been logged at debug level).                                                                        // been logged at debug level).                                                                     
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
Manifest manifest = resource.getManifest();                                                            Manifest manifest = resource.getManifest();                                                         
URL codeBase = resource.getCodeBase();                                                                 URL codeBase = resource.getCodeBase();                                                              
Certificate[] certificates = resource.getCertificates();                                               Certificate[] certificates = resource.getCertificates();                                            
if (transformers.size() &gt; 0) {                                                                      if (transformers.size() &gt; 0) {                                                                   
// If the resource is a class just being loaded, decorate it                                           // If the resource is a class just being loaded, decorate it                                        
// with any attached transformers                                                                      // with any attached transformers                                                                   
// Ignore leading '/' and trailing CLASS_FILE_SUFFIX                                                   // Ignore leading '/' and trailing CLASS_FILE_SUFFIX                                                
// Should be cheaper than replacing '.' by '/' in class name.                                          // Should be cheaper than replacing '.' by '/' in class name.                                       
String internalName = path.substring(1, path.length() - CLASS_FILE_SUFFIX.length());                   String internalName = path.substring(1, path.length() - CLASS_FILE_SUFFIX.length());                
for (ClassFileTransformer transformer : this.transformers) {                                           for (ClassFileTransformer transformer : this.transformers) {                                        
try {                                                                                                  try {                                                                                               
byte[] transformed = transformer.transform(this, internalName, null, null, binaryContent);             byte[] transformed = transformer.transform(this, internalName, null, null, binaryContent);          
if (transformed != null) {                                                                             if (transformed != null) {                                                                          
binaryContent = transformed;                                                                           binaryContent = transformed;                                                                        
}                                                                                                      }                                                                                                   
} catch (IllegalClassFormatException e) {                                                              } catch (IllegalClassFormatException e) {                                                           
log.error(sm.getString("webappClassLoader.transformError", name), e);                                  log.error(sm.getString("webappClassLoader.transformError", name), e);                               
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (securityManager != null) {                                                                         if (securityManager != null) {                                                                      
// Looking up the package                                                                              // Looking up the package                                                                           
int pos = name.lastIndexOf('.');                                                                       int pos = name.lastIndexOf('.');                                                                    
if (pos != -1) {                                                                                       if (pos != -1) {                                                                                    
String packageName = name.substring(0, pos);                                                           String packageName = name.substring(0, pos);                                                        
Package pkg = getPackage(packageName);                                                                 Package pkg = getPackage(packageName);                                                              
// Define the package (if null)                                                                        // Define the package (if null)                                                                     
if (pkg == null) {                                                                                     if (pkg == null) {                                                                                  
try {                                                                                                  try {                                                                                               
if (manifest == null) {                                                                                if (manifest == null) {                                                                             
definePackage(packageName, null, null, null, null, null, null, null);                                  definePackage(packageName, null, null, null, null, null, null, null);                               
} else {                                                                                               } else {                                                                                            
definePackage(packageName, manifest, codeBase);                                                        definePackage(packageName, manifest, codeBase);                                                     
}                                                                                                      }                                                                                                   
} catch (IllegalArgumentException e) {                                                                 } catch (IllegalArgumentException e) {                                                              
// Ignore: normal error due to dual definition of package                                              // Ignore: normal error due to dual definition of package                                           
}                                                                                                      }                                                                                                   
pkg = getPackage(packageName);                                                                         pkg = getPackage(packageName);                                                                      
}                                                                                                      }                                                                                                   
// Checking sealing                                                                                    // Checking sealing                                                                                 
if (pkg != null) {                                                                                     if (pkg != null) {                                                                                  
boolean sealCheck = true;                                                                              boolean sealCheck = true;                                                                           
if (pkg.isSealed()) {                                                                                  if (pkg.isSealed()) {                                                                               
sealCheck = pkg.isSealed(codeBase);                                                                    sealCheck = pkg.isSealed(codeBase);                                                                 
} else {                                                                                               } else {                                                                                            
sealCheck = (manifest == null) || !isPackageSealed(packageName, manifest);                             sealCheck = (manifest == null) || !isPackageSealed(packageName, manifest);                          
}                                                                                                      }                                                                                                   
if (!sealCheck) {                                                                                      if (!sealCheck) {                                                                                   
throw new SecurityException("Sealing violation loading " + name + " : Package " + packageName + " is   throw new SecurityException("Sealing violation loading " + name + " : Package " + packageName + " is
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
clazz = defineClass(name, binaryContent, 0, binaryContent.length, new CodeSource(codeBase, certifica   clazz = defineClass(name, binaryContent, 0, binaryContent.length, new CodeSource(codeBase, certifica
} catch (UnsupportedClassVersionError ucve) {                                                          } catch (UnsupportedClassVersionError ucve) {                                                       
throw new UnsupportedClassVersionError(ucve.getLocalizedMessage() + " " + sm.getString("webappClassL   throw new UnsupportedClassVersionError(ucve.getLocalizedMessage() + " " + sm.getString("webappClassL
}                                                                                                      }                                                                                                   
entry.loadedClass = clazz;                                                                             entry.loadedClass = clazz;                                                                          
}                                                                                                      }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
