/**                                                                                                    /**                                                                                                 
* Handles CORS pre-flight request.                                                                     * Handles CORS pre-flight request.                                                                  
*                                                                                                      *                                                                                                   
* @param request The {@link HttpServletRequest} object.                                                * @param request The {@link HttpServletRequest} object.                                             
* @param response The {@link HttpServletResponse} object.                                              * @param response The {@link HttpServletResponse} object.                                           
* @param filterChain The {@link FilterChain} object.                                                   * @param filterChain The {@link FilterChain} object.                                                
* @throws IOException an IO error occurred                                                             * @throws IOException an IO error occurred                                                          
* @throws ServletException Servlet error propagation                                                   * @throws ServletException Servlet error propagation                                                
*/                                                                                                     */                                                                                                  
protected void handlePreflightCORS(final HttpServletRequest request, final HttpServletResponse respo   protected void handlePreflightCORS(final HttpServletRequest request, final HttpServletResponse respo
CORSRequestType requestType = checkRequestType(request);                                               CORSRequestType requestType = checkRequestType(request);                                            
if (requestType != CORSRequestType.PRE_FLIGHT) {                                                       if (requestType != CORSRequestType.PRE_FLIGHT) {                                                    
throw new IllegalArgumentException(sm.getString("corsFilter.wrongType1", CORSRequestType.PRE_FLIGHT.   throw new IllegalArgumentException(sm.getString("corsFilter.wrongType1", CORSRequestType.PRE_FLIGHT.
}                                                                                                      }                                                                                                   
final String origin = request.getHeader(CorsFilter.REQUEST_HEADER_ORIGIN);                             final String origin = request.getHeader(CorsFilter.REQUEST_HEADER_ORIGIN);                          
// Section 6.2.2                                                                                       // Section 6.2.2                                                                                    
if (!isOriginAllowed(origin)) {                                                                        if (!isOriginAllowed(origin)) {                                                                     
handleInvalidCORS(request, response, filterChain);                                                     handleInvalidCORS(request, response, filterChain);                                                  
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Section 6.2.3                                                                                       // Section 6.2.3                                                                                    
String accessControlRequestMethod = request.getHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUE   String accessControlRequestMethod = request.getHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUE
if (accessControlRequestMethod == null) {                                                              if (accessControlRequestMethod == null) {                                                           
handleInvalidCORS(request, response, filterChain);                                                     handleInvalidCORS(request, response, filterChain);                                                  
return;                                                                                                return;                                                                                             
} else {                                                                                               } else {                                                                                            
accessControlRequestMethod = accessControlRequestMethod.trim();                                        accessControlRequestMethod = accessControlRequestMethod.trim();                                     
}                                                                                                      }                                                                                                   
// Section 6.2.4                                                                                       // Section 6.2.4                                                                                    
String accessControlRequestHeadersHeader = request.getHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTRO   String accessControlRequestHeadersHeader = request.getHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTRO
List&lt;String&gt; accessControlRequestHeaders = new LinkedList&lt;&gt;();                             List&lt;String&gt; accessControlRequestHeaders = new LinkedList&lt;&gt;();                          
if (accessControlRequestHeadersHeader != null && !accessControlRequestHeadersHeader.trim().isEmpty()   if (accessControlRequestHeadersHeader != null && !accessControlRequestHeadersHeader.trim().isEmpty()
String[] headers = accessControlRequestHeadersHeader.trim().split(",");                                String[] headers = accessControlRequestHeadersHeader.trim().split(",");                             
for (String header : headers) {                                                                        for (String header : headers) {                                                                     
accessControlRequestHeaders.add(header.trim().toLowerCase(Locale.ENGLISH));                            accessControlRequestHeaders.add(header.trim().toLowerCase(Locale.ENGLISH));                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Section 6.2.5                                                                                       // Section 6.2.5                                                                                    
if (!allowedHttpMethods.contains(accessControlRequestMethod)) {                                      | if (!getAllowedHttpMethods().contains(accessControlRequestMethod)) {                                
handleInvalidCORS(request, response, filterChain);                                                     handleInvalidCORS(request, response, filterChain);                                                  
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Section 6.2.6                                                                                       // Section 6.2.6                                                                                    
if (!accessControlRequestHeaders.isEmpty()) {                                                          if (!accessControlRequestHeaders.isEmpty()) {                                                       
for (String header : accessControlRequestHeaders) {                                                    for (String header : accessControlRequestHeaders) {                                                 
if (!allowedHttpHeaders.contains(header)) {                                                          | if (!getAllowedHttpHeaders().contains(header)) {                                                    
handleInvalidCORS(request, response, filterChain);                                                     handleInvalidCORS(request, response, filterChain);                                                  
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
addStandardHeaders(request, response);                                                                 addStandardHeaders(request, response);                                                              
// Do not forward the request down the filter chain.                                                   // Do not forward the request down the filter chain.                                                
}                                                                                                      }                                                                                                   
