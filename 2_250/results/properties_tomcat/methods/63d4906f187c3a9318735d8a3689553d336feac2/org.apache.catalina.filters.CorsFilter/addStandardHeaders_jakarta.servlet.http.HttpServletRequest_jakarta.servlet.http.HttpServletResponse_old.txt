/*
     * Sets a standard set of headers to reduce response variation which in turn
     * is intended to aid caching.
     */
private void addStandardHeaders(final HttpServletRequest request, final HttpServletResponse response) {
    final String method = request.getMethod();
    final String origin = request.getHeader(CorsFilter.REQUEST_HEADER_ORIGIN);
    if (!anyOriginAllowed) {
        // If only specific origins are allowed, the response will vary by
        // origin
        ResponseUtil.addVaryFieldName(response, CorsFilter.REQUEST_HEADER_ORIGIN);
    }
    // CORS requests (SIMPLE, ACTUAL, PRE_FLIGHT) set the following headers
    // although non-CORS requests do not need to. The headers are always set
    // as a) they do no harm in the non-CORS case and b) it allows the same
    // response to be cached for CORS and non-CORS requests.
    // Add a single Access-Control-Allow-Origin header.
    if (anyOriginAllowed) {
        // If any origin is allowed, return header with '*'.
        response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, "*");
    } else {
        // Add a single Access-Control-Allow-Origin header, with the value
        // of the Origin header as value.
        response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, origin);
    }
    // If the resource supports credentials, add a single
    // Access-Control-Allow-Credentials header with the case-sensitive
    // string "true" as value.
    if (supportsCredentials) {
        response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");
    }
    // If the list of exposed headers is not empty add one or more
    // Access-Control-Expose-Headers headers, with as values the header
    // field names given in the list of exposed headers.
    if ((exposedHeaders != null) && (exposedHeaders.size() > 0)) {
        String exposedHeadersString = join(exposedHeaders, ",");
        response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS, exposedHeadersString);
    }
    if ("OPTIONS".equals(method)) {
        // For an OPTIONS request, the response will vary based on the
        // value or absence of the following headers. Hence they need be be
        // included in the Vary header.
        ResponseUtil.addVaryFieldName(response, CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD);
        ResponseUtil.addVaryFieldName(response, CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);
        // CORS PRE_FLIGHT (OPTIONS) requests set the following headers although
        // non-CORS OPTIONS requests do not need to. The headers are always set
        // as a) they do no harm in the non-CORS case and b) it allows the same
        // response to be cached for CORS and non-CORS requests.
        if (preflightMaxAge > 0) {
            response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_MAX_AGE, String.valueOf(preflightMaxAge));
        }
        if ((allowedHttpMethods != null) && (!allowedHttpMethods.isEmpty())) {
            response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_METHODS, join(allowedHttpMethods, ","));
        }
        if ((allowedHttpHeaders != null) && (!allowedHttpHeaders.isEmpty())) {
            response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_HEADERS, join(allowedHttpHeaders, ","));
        }
    }
}