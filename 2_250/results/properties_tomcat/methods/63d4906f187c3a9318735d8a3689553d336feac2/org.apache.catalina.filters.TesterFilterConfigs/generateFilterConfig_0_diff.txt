private static FilterConfig generateFilterConfig(final String allowedHttpHeaders, final String allowedHttpMethods, final String allowedOrigins, final String exposedHeaders, final String supportCredentials, final String preflightMaxAge, final String decorateRequest) {
    FilterConfig filterConfig = new FilterConfig() {

        @Override
        public String getFilterName() {
            return "cors-filter";
        }

        @Override
        public ServletContext getServletContext() {
            return mockServletContext;
        }

        @Override
        public String getInitParameter(String name) {
            if (CorsFilter.PARAM_CORS_ALLOWED_HEADERS.equalsIgnoreCase(name)) {
                return allowedHttpHeaders;
            } else if (CorsFilter.PARAM_CORS_ALLOWED_METHODS.equalsIgnoreCase(name)) {
                return allowedHttpMethods;
            } else if (CorsFilter.PARAM_CORS_ALLOWED_ORIGINS.equalsIgnoreCase(name)) {
                return allowedOrigins;
            } else if (CorsFilter.PARAM_CORS_EXPOSED_HEADERS.equalsIgnoreCase(name)) {
                return exposedHeaders;
            } else if (CorsFilter.PARAM_CORS_SUPPORT_CREDENTIALS.equalsIgnoreCase(name)) {
                return supportCredentials;
            } else if (CorsFilter.PARAM_CORS_PREFLIGHT_MAXAGE.equalsIgnoreCase(name)) {
                return preflightMaxAge;
            } else if (CorsFilter.PARAM_CORS_REQUEST_DECORATE.equalsIgnoreCase(name)) {
                return decorateRequest;
            }
            return null;
        }

        @Override
        public Enumeration<String> getInitParameterNames() {
            return null;
        }
    };
    return filterConfig;
}