protected WebResource getResource(String path, boolean useClassLoaderResources) {
    if (noCache(path)) {
        return root.getResourceInternal(path, useClassLoaderResources);
    }
    lookupCount.incrementAndGet();
    CachedResource cacheEntry = resourceCache.get(path);
    if (cacheEntry != null && !cacheEntry.validateResource(useClassLoaderResources)) {
        removeCacheEntry(path);
        cacheEntry = null;
    }
    if (cacheEntry == null) {
        // Local copy to ensure consistency
        int objectMaxSizeBytes = getObjectMaxSizeBytes();
        CachedResource newCacheEntry = new CachedResource(this, root, path, getTtl(), objectMaxSizeBytes, useClassLoaderResources);
        // Concurrent callers will end up with the same CachedResource
        // instance
        cacheEntry = resourceCache.putIfAbsent(path, newCacheEntry);
        if (cacheEntry == null) {
            // newCacheEntry was inserted into the cache - validate it
            cacheEntry = newCacheEntry;
            cacheEntry.validateResource(useClassLoaderResources);
            // Even if the resource content larger than objectMaxSizeBytes
            // there is still benefit in caching the resource metadata
            long delta = cacheEntry.getSize();
            size.addAndGet(delta);
            if (size.get() > maxSize) {
                // Process resources unordered for speed. Trades cache
                // efficiency (younger entries may be evicted before older
                // ones) for speed since this is on the critical path for
                // request processing
                long targetSize = maxSize * (100 - TARGET_FREE_PERCENT_GET) / 100;
                long newSize = evict(targetSize, resourceCache.values().iterator());
                if (newSize > maxSize) {
                    // Unable to create sufficient space for this resource
                    // Remove it from the cache
                    removeCacheEntry(path);
                    log.warn(sm.getString("cache.addFail", path, root.getContext().getName()));
                }
            }
        } else {
            // Another thread added the entry to the cache
            if (cacheEntry.usesClassLoaderResources() != useClassLoaderResources) {
                // Race condition adding cache entries with the same path
                // but differing values for useClassLoaderResources.
                // Cache only supports one entry per path with one value of
                // useClassLoaderResources.
                // Let the other thread "win" and add the resource to the
                // cache. This thread will receive a cacheEntry instance
                // that isn't added to the cache.
                // There are assumptions here. They are:
                // - refactoring the Cache to use a combined key of
                // path+useClassLoaderResources adds unnecessary
                // complexity
                // - the race condition is rare (over the lifetime of an
                // application)
                // - it would be rare for an application to need to cache a
                // resource for both values of useClassLoaderResources
                cacheEntry = newCacheEntry;
            }
            // Make sure it is validated
            cacheEntry.validateResource(useClassLoaderResources);
        }
    } else {
        hitCount.incrementAndGet();
    }
    return cacheEntry;
}