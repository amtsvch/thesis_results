protected final File file(String name, boolean mustExist) {                                            protected final File file(String name, boolean mustExist) {                                         
if (name.equals("/")) {                                                                                if (name.equals("/")) {                                                                             
name = "";                                                                                             name = "";                                                                                          
}                                                                                                      }                                                                                                   
File file = new File(fileBase, name);                                                                  File file = new File(fileBase, name);                                                               
// If the requested names ends in '/', the Java File API will return a                                 // If the requested names ends in '/', the Java File API will return a                              
// matching file if one exists. This isn't what we want as it is not                                   // matching file if one exists. This isn't what we want as it is not                                
// consistent with the Servlet spec rules for request mapping.                                         // consistent with the Servlet spec rules for request mapping.                                      
if (name.endsWith("/") && file.isFile()) {                                                             if (name.endsWith("/") && file.isFile()) {                                                          
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// If the file/dir must exist but the identified file/dir can't be read                                // If the file/dir must exist but the identified file/dir can't be read                             
// then signal that the resource was not found                                                         // then signal that the resource was not found                                                      
if (mustExist && !file.canRead()) {                                                                    if (mustExist && !file.canRead()) {                                                                 
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// If allow linking is enabled, files are not limited to being located                                 // If allow linking is enabled, files are not limited to being located                              
// under the fileBase so all further checks are disabled.                                              // under the fileBase so all further checks are disabled.                                           
if (getRoot().getAllowLinking()) {                                                                     if (getRoot().getAllowLinking()) {                                                                  
return file;                                                                                           return file;                                                                                        
}                                                                                                      }                                                                                                   
// Additional Windows specific checks to handle known problems with                                    // Additional Windows specific checks to handle known problems with                                 
// File.getCanonicalPath()                                                                             // File.getCanonicalPath()                                                                          
if (JrePlatform.IS_WINDOWS && isInvalidWindowsFilename(name)) {                                        if (JrePlatform.IS_WINDOWS && isInvalidWindowsFilename(name)) {                                     
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// Check that this file is located under the WebResourceSet's base                                     // Check that this file is located under the WebResourceSet's base                                  
String canPath = null;                                                                                 String canPath = null;                                                                              
try {                                                                                                  try {                                                                                               
canPath = file.getCanonicalPath();                                                                     canPath = file.getCanonicalPath();                                                                  
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
if (canPath == null || !canPath.startsWith(canonicalBase)) {                                           if (canPath == null || !canPath.startsWith(canonicalBase)) {                                        
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// Ensure that the file is not outside the fileBase. This should not be                                // Ensure that the file is not outside the fileBase. This should not be                             
// possible for standard requests (the request is normalized early in                                  // possible for standard requests (the request is normalized early in                               
// the request processing) but might be possible for some access via the                               // the request processing) but might be possible for some access via the                            
// Servlet API (RequestDispatcher, HTTP/2 push etc.) therefore these                                   // Servlet API (RequestDispatcher, HTTP/2 push etc.) therefore these                                
// checks are retained as an additional safety measure                                                 // checks are retained as an additional safety measure                                              
// absoluteBase has been normalized so absPath needs to be normalized as                               // absoluteBase has been normalized so absPath needs to be normalized as                            
// well.                                                                                               // well.                                                                                            
String absPath = normalize(file.getAbsolutePath());                                                    String absPath = normalize(file.getAbsolutePath());                                                 
if (absoluteBase.length() &gt; absPath.length()) {                                                     if (absoluteBase.length() &gt; absPath.length()) {                                                  
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// Remove the fileBase location from the start of the paths since that                                 // Remove the fileBase location from the start of the paths since that                              
// was not part of the requested path and the remaining check only                                     // was not part of the requested path and the remaining check only                                  
// applies to the request path                                                                         // applies to the request path                                                                      
absPath = absPath.substring(absoluteBase.length());                                                  | absPath = removeAbsoluteBase(absPath);                                                              
canPath = canPath.substring(canonicalBase.length());                                                 | canPath = removeCanonicalBase(canPath);                                                             
// Case sensitivity check                                                                              // Case sensitivity check                                                                           
// The normalized requested path should be an exact match the equivalent                               // The normalized requested path should be an exact match the equivalent                            
// canonical path. If it is not, possible reasons include:                                             // canonical path. If it is not, possible reasons include:                                          
// - case differences on case insensitive file systems                                                 // - case differences on case insensitive file systems                                              
// - Windows removing a trailing ' ' or '.' from the file name                                         // - Windows removing a trailing ' ' or '.' from the file name                                      
//                                                                                                     //                                                                                                  
// In all cases, a mis-match here results in the resource not being                                    // In all cases, a mis-match here results in the resource not being                                 
// found                                                                                               // found                                                                                            
//                                                                                                     //                                                                                                  
// absPath is normalized so canPath needs to be normalized as well                                     // absPath is normalized so canPath needs to be normalized as well                                  
// Can't normalize canPath earlier as canonicalBase is not normalized                                  // Can't normalize canPath earlier as canonicalBase is not normalized                               
if (canPath.length() &gt; 0) {                                                                         if (canPath.length() &gt; 0) {                                                                      
canPath = normalize(canPath);                                                                          canPath = normalize(canPath);                                                                       
}                                                                                                      }                                                                                                   
if (!canPath.equals(absPath)) {                                                                        if (!canPath.equals(absPath)) {                                                                     
if (!canPath.equalsIgnoreCase(absPath)) {                                                              if (!canPath.equalsIgnoreCase(absPath)) {                                                           
// Typically means symlinks are in use but being ignored. Given                                        // Typically means symlinks are in use but being ignored. Given                                     
// the symlink was likely created for a reason, log a warning                                          // the symlink was likely created for a reason, log a warning                                       
// that it was ignored.                                                                                // that it was ignored.                                                                             
logIgnoredSymlink(getRoot().getContext().getName(), absPath, canPath);                                 logIgnoredSymlink(getRoot().getContext().getName(), absPath, canPath);                              
}                                                                                                      }                                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
return file;                                                                                           return file;                                                                                        
}                                                                                                      }                                                                                                   
