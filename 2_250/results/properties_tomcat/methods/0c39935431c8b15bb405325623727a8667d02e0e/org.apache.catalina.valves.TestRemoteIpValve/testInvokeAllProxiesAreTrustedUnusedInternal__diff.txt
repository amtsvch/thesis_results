@Test                                                                                                  @Test                                                                                               
public void testInvokeAllProxiesAreTrustedUnusedInternal() throws Exception {                          public void testInvokeAllProxiesAreTrustedUnusedInternal() throws Exception {                       
// PREPARE                                                                                             // PREPARE                                                                                          
RemoteIpValve remoteIpValve = new RemoteIpValve();                                                     RemoteIpValve remoteIpValve = new RemoteIpValve();                                                  
remoteIpValve.setTrustedProxies("proxy1|proxy2|proxy3");                                               remoteIpValve.setTrustedProxies("proxy1|proxy2|proxy3");                                            
remoteIpValve.setRemoteIpHeader("x-forwarded-for");                                                    remoteIpValve.setRemoteIpHeader("x-forwarded-for");                                                 
remoteIpValve.setProxiesHeader("x-forwarded-by");                                                      remoteIpValve.setProxiesHeader("x-forwarded-by");                                                   
RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();     RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();  
remoteIpValve.setNext(remoteAddrAndHostTrackerValve);                                                  remoteIpValve.setNext(remoteAddrAndHostTrackerValve);                                               
Request request = new MockRequest();                                                                   Request request = new MockRequest();                                                                
request.setCoyoteRequest(new org.apache.coyote.Request());                                             request.setCoyoteRequest(new org.apache.coyote.Request());                                          
request.setRemoteAddr("proxy3");                                                                       request.setRemoteAddr("proxy3");                                                                    
request.setRemoteHost("remote-host-original-value");                                                   request.setRemoteHost("remote-host-original-value");                                                
request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130, p   request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130, p
// TEST                                                                                                // TEST                                                                                             
remoteIpValve.invoke(request, null);                                                                   remoteIpValve.invoke(request, null);                                                                
// VERIFY                                                                                              // VERIFY                                                                                           
String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();                          String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();                       
Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);       Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);    
String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();                            String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();                         
Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1, proxy2,  | Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2,pr
String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();                               String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();                            
Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);                                 Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);                              
String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();                               String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();                            
Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);                                 Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);                              
String actualPostInvokeRemoteAddr = request.getRemoteAddr();                                           String actualPostInvokeRemoteAddr = request.getRemoteAddr();                                        
Assert.assertEquals("postInvoke remoteAddr", "proxy3", actualPostInvokeRemoteAddr);                    Assert.assertEquals("postInvoke remoteAddr", "proxy3", actualPostInvokeRemoteAddr);                 
String actualPostInvokeRemoteHost = request.getRemoteHost();                                           String actualPostInvokeRemoteHost = request.getRemoteHost();                                        
Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHos   Assert.assertEquals("postInvoke remoteAddr", "remote-host-original-value", actualPostInvokeRemoteHos
}                                                                                                      }                                                                                                   
