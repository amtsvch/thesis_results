/**                                                                                                    /**                                                                                                 
* {@inheritDoc}                                                                                        * {@inheritDoc}                                                                                     
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public void invoke(Request request, Response response) throws IOException, ServletException {          public void invoke(Request request, Response response) throws IOException, ServletException {       
final String originalRemoteAddr = request.getRemoteAddr();                                             final String originalRemoteAddr = request.getRemoteAddr();                                          
final String originalRemoteHost = request.getRemoteHost();                                             final String originalRemoteHost = request.getRemoteHost();                                          
final String originalScheme = request.getScheme();                                                     final String originalScheme = request.getScheme();                                                  
final boolean originalSecure = request.isSecure();                                                     final boolean originalSecure = request.isSecure();                                                  
final String originalServerName = request.getServerName();                                             final String originalServerName = request.getServerName();                                          
final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;                  final String originalLocalName = isChangeLocalName() ? request.getLocalName() : null;               
final int originalServerPort = request.getServerPort();                                                final int originalServerPort = request.getServerPort();                                             
final int originalLocalPort = request.getLocalPort();                                                  final int originalLocalPort = request.getLocalPort();                                               
final String originalProxiesHeader = request.getHeader(proxiesHeader);                                 final String originalProxiesHeader = request.getHeader(proxiesHeader);                              
final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);                               final String originalRemoteIpHeader = request.getHeader(remoteIpHeader);                            
boolean isInternal = internalProxies != null && internalProxies.matcher(originalRemoteAddr).matches(   boolean isInternal = internalProxies != null && internalProxies.matcher(originalRemoteAddr).matches(
if (isInternal || (trustedProxies != null && trustedProxies.matcher(originalRemoteAddr).matches()))    if (isInternal || (trustedProxies != null && trustedProxies.matcher(originalRemoteAddr).matches())) 
String remoteIp = null;                                                                                String remoteIp = null;                                                                             
// In java 6, proxiesHeaderValue should be declared as a java.util.Deque                               // In java 6, proxiesHeaderValue should be declared as a java.util.Deque                            
LinkedList&lt;String&gt; proxiesHeaderValue = new LinkedList&lt;&gt;();                                LinkedList&lt;String&gt; proxiesHeaderValue = new LinkedList&lt;&gt;();                             
StringBuilder concatRemoteIpHeaderValue = new StringBuilder();                                         StringBuilder concatRemoteIpHeaderValue = new StringBuilder();                                      
for (Enumeration&lt;String&gt; e = request.getHeaders(remoteIpHeader); e.hasMoreElements(); ) {        for (Enumeration&lt;String&gt; e = request.getHeaders(remoteIpHeader); e.hasMoreElements(); ) {     
if (concatRemoteIpHeaderValue.length() &gt; 0) {                                                       if (concatRemoteIpHeaderValue.length() &gt; 0) {                                                    
concatRemoteIpHeaderValue.append(", ");                                                                concatRemoteIpHeaderValue.append(", ");                                                             
}                                                                                                      }                                                                                                   
concatRemoteIpHeaderValue.append(e.nextElement());                                                     concatRemoteIpHeaderValue.append(e.nextElement());                                                  
}                                                                                                      }                                                                                                   
String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString())   String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString())
int idx;                                                                                               int idx;                                                                                            
if (!isInternal) {                                                                                     if (!isInternal) {                                                                                  
proxiesHeaderValue.addFirst(originalRemoteAddr);                                                       proxiesHeaderValue.addFirst(originalRemoteAddr);                                                    
}                                                                                                      }                                                                                                   
// loop on remoteIpHeaderValue to find the first trusted remote ip and to build the proxies chain      // loop on remoteIpHeaderValue to find the first trusted remote ip and to build the proxies chain   
for (idx = remoteIpHeaderValue.length - 1; idx &gt;= 0; idx--) {                                       for (idx = remoteIpHeaderValue.length - 1; idx &gt;= 0; idx--) {                                    
String currentRemoteIp = remoteIpHeaderValue[idx];                                                     String currentRemoteIp = remoteIpHeaderValue[idx];                                                  
remoteIp = currentRemoteIp;                                                                            remoteIp = currentRemoteIp;                                                                         
if (internalProxies != null && internalProxies.matcher(currentRemoteIp).matches()) {                   if (internalProxies != null && internalProxies.matcher(currentRemoteIp).matches()) {                
// do nothing, internalProxies IPs are not appended to the                                             // do nothing, internalProxies IPs are not appended to the                                          
} else if (trustedProxies != null && trustedProxies.matcher(currentRemoteIp).matches()) {              } else if (trustedProxies != null && trustedProxies.matcher(currentRemoteIp).matches()) {           
proxiesHeaderValue.addFirst(currentRemoteIp);                                                          proxiesHeaderValue.addFirst(currentRemoteIp);                                                       
} else {                                                                                               } else {                                                                                            
// decrement idx because break statement doesn't do it                                                 // decrement idx because break statement doesn't do it                                              
idx--;                                                                                                 idx--;                                                                                              
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// continue to loop on remoteIpHeaderValue to build the new value of the remoteIpHeader                // continue to loop on remoteIpHeaderValue to build the new value of the remoteIpHeader             
LinkedList&lt;String&gt; newRemoteIpHeaderValue = new LinkedList&lt;&gt;();                            LinkedList&lt;String&gt; newRemoteIpHeaderValue = new LinkedList&lt;&gt;();                         
for (; idx &gt;= 0; idx--) {                                                                           for (; idx &gt;= 0; idx--) {                                                                        
String currentRemoteIp = remoteIpHeaderValue[idx];                                                     String currentRemoteIp = remoteIpHeaderValue[idx];                                                  
newRemoteIpHeaderValue.addFirst(currentRemoteIp);                                                      newRemoteIpHeaderValue.addFirst(currentRemoteIp);                                                   
}                                                                                                      }                                                                                                   
if (remoteIp != null) {                                                                                if (remoteIp != null) {                                                                             
request.setRemoteAddr(remoteIp);                                                                       request.setRemoteAddr(remoteIp);                                                                    
if (request.getConnector().getEnableLookups()) {                                                       if (request.getConnector().getEnableLookups()) {                                                    
// This isn't a lazy lookup but that would be a little more                                            // This isn't a lazy lookup but that would be a little more                                         
// invasive - mainly in Request.getRemoteHost() - and if                                               // invasive - mainly in Request.getRemoteHost() - and if                                            
// enableLookups is true it seems reasonable that the                                                  // enableLookups is true it seems reasonable that the                                               
// hotsname will be required so look it up here.                                                       // hotsname will be required so look it up here.                                                    
try {                                                                                                  try {                                                                                               
InetAddress inetAddress = InetAddress.getByName(remoteIp);                                             InetAddress inetAddress = InetAddress.getByName(remoteIp);                                          
// We know we need a DNS look up so use getCanonicalHostName()                                         // We know we need a DNS look up so use getCanonicalHostName()                                      
request.setRemoteHost(inetAddress.getCanonicalHostName());                                             request.setRemoteHost(inetAddress.getCanonicalHostName());                                          
} catch (UnknownHostException e) {                                                                     } catch (UnknownHostException e) {                                                                  
log.debug(sm.getString("remoteIpValve.invalidRemoteAddress", remoteIp), e);                            log.debug(sm.getString("remoteIpValve.invalidRemoteAddress", remoteIp), e);                         
request.setRemoteHost(remoteIp);                                                                       request.setRemoteHost(remoteIp);                                                                    
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
request.setRemoteHost(remoteIp);                                                                       request.setRemoteHost(remoteIp);                                                                    
}                                                                                                      }                                                                                                   
if (proxiesHeaderValue.size() == 0) {                                                                  if (proxiesHeaderValue.size() == 0) {                                                               
request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);                               request.getCoyoteRequest().getMimeHeaders().removeHeader(proxiesHeader);                            
} else {                                                                                               } else {                                                                                            
String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);                 | String commaDelimitedListOfProxies = StringUtils.join(proxiesHeaderValue);                          
request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfPr   request.getCoyoteRequest().getMimeHeaders().setValue(proxiesHeader).setString(commaDelimitedListOfPr
}                                                                                                      }                                                                                                   
if (newRemoteIpHeaderValue.size() == 0) {                                                              if (newRemoteIpHeaderValue.size() == 0) {                                                           
request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);                              request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);                           
} else {                                                                                               } else {                                                                                            
String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);       | String commaDelimitedRemoteIpHeaderValue = StringUtils.join(newRemoteIpHeaderValue);                
request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteI   request.getCoyoteRequest().getMimeHeaders().setValue(remoteIpHeader).setString(commaDelimitedRemoteI
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (protocolHeader != null) {                                                                          if (protocolHeader != null) {                                                                       
String protocolHeaderValue = request.getHeader(protocolHeader);                                        String protocolHeaderValue = request.getHeader(protocolHeader);                                     
if (protocolHeaderValue == null) {                                                                     if (protocolHeaderValue == null) {                                                                  
// Don't modify the secure, scheme and serverPort attributes                                           // Don't modify the secure, scheme and serverPort attributes                                        
// of the request                                                                                      // of the request                                                                                   
} else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {                                   } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {                                
request.setSecure(true);                                                                               request.setSecure(true);                                                                            
request.getCoyoteRequest().scheme().setString("https");                                                request.getCoyoteRequest().scheme().setString("https");                                             
setPorts(request, httpsServerPort);                                                                    setPorts(request, httpsServerPort);                                                                 
} else {                                                                                               } else {                                                                                            
request.setSecure(false);                                                                              request.setSecure(false);                                                                           
request.getCoyoteRequest().scheme().setString("http");                                                 request.getCoyoteRequest().scheme().setString("http");                                              
setPorts(request, httpServerPort);                                                                     setPorts(request, httpServerPort);                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (hostHeader != null) {                                                                              if (hostHeader != null) {                                                                           
String hostHeaderValue = request.getHeader(hostHeader);                                                String hostHeaderValue = request.getHeader(hostHeader);                                             
if (hostHeaderValue != null) {                                                                         if (hostHeaderValue != null) {                                                                      
try {                                                                                                  try {                                                                                               
int portIndex = Host.parse(hostHeaderValue);                                                           int portIndex = Host.parse(hostHeaderValue);                                                        
if (portIndex &gt; -1) {                                                                               if (portIndex &gt; -1) {                                                                            
log.debug(sm.getString("remoteIpValve.invalidHostWithPort", hostHeaderValue, hostHeader));             log.debug(sm.getString("remoteIpValve.invalidHostWithPort", hostHeaderValue, hostHeader));          
hostHeaderValue = hostHeaderValue.substring(0, portIndex);                                             hostHeaderValue = hostHeaderValue.substring(0, portIndex);                                          
}                                                                                                      }                                                                                                   
request.getCoyoteRequest().serverName().setString(hostHeaderValue);                                    request.getCoyoteRequest().serverName().setString(hostHeaderValue);                                 
if (isChangeLocalName()) {                                                                             if (isChangeLocalName()) {                                                                          
request.getCoyoteRequest().localName().setString(hostHeaderValue);                                     request.getCoyoteRequest().localName().setString(hostHeaderValue);                                  
}                                                                                                      }                                                                                                   
} catch (IllegalArgumentException iae) {                                                               } catch (IllegalArgumentException iae) {                                                            
log.debug(sm.getString("remoteIpValve.invalidHostHeader", hostHeaderValue, hostHeader));               log.debug(sm.getString("remoteIpValve.invalidHostHeader", hostHeaderValue, hostHeader));            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);                               request.setAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE, Boolean.TRUE);                            
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug("Incoming request " + request.getRequestURI() + " with originalRemoteAddr [" + originalRem   log.debug("Incoming request " + request.getRequestURI() + " with originalRemoteAddr [" + originalRem
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug("Skip RemoteIpValve for request " + request.getRequestURI() + " with originalRemoteAddr '"   log.debug("Skip RemoteIpValve for request " + request.getRequestURI() + " with originalRemoteAddr '"
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (requestAttributesEnabled) {                                                                        if (requestAttributesEnabled) {                                                                     
request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE, request.getRemoteAddr());                        request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE, request.getRemoteAddr());                     
request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE, request.getRemoteAddr());                          request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE, request.getRemoteAddr());                       
request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE, request.getRemoteHost());                        request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE, request.getRemoteHost());                     
request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE, request.getProtocol());                             request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE, request.getProtocol());                          
request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE, request.getServerName());                        request.setAttribute(AccessLog.SERVER_NAME_ATTRIBUTE, request.getServerName());                     
request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE, Integer.valueOf(request.getServerPort()));       request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE, Integer.valueOf(request.getServerPort()));    
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
getNext().invoke(request, response);                                                                   getNext().invoke(request, response);                                                                
} finally {                                                                                            } finally {                                                                                         
request.setRemoteAddr(originalRemoteAddr);                                                             request.setRemoteAddr(originalRemoteAddr);                                                          
request.setRemoteHost(originalRemoteHost);                                                             request.setRemoteHost(originalRemoteHost);                                                          
request.setSecure(originalSecure);                                                                     request.setSecure(originalSecure);                                                                  
request.getCoyoteRequest().scheme().setString(originalScheme);                                         request.getCoyoteRequest().scheme().setString(originalScheme);                                      
request.getCoyoteRequest().serverName().setString(originalServerName);                                 request.getCoyoteRequest().serverName().setString(originalServerName);                              
if (isChangeLocalName()) {                                                                             if (isChangeLocalName()) {                                                                          
request.getCoyoteRequest().localName().setString(originalLocalName);                                   request.getCoyoteRequest().localName().setString(originalLocalName);                                
}                                                                                                      }                                                                                                   
request.setServerPort(originalServerPort);                                                             request.setServerPort(originalServerPort);                                                          
request.setLocalPort(originalLocalPort);                                                               request.setLocalPort(originalLocalPort);                                                            
MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();                                     MimeHeaders headers = request.getCoyoteRequest().getMimeHeaders();                                  
if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {                            if (originalProxiesHeader == null || originalProxiesHeader.length() == 0) {                         
headers.removeHeader(proxiesHeader);                                                                   headers.removeHeader(proxiesHeader);                                                                
} else {                                                                                               } else {                                                                                            
headers.setValue(proxiesHeader).setString(originalProxiesHeader);                                      headers.setValue(proxiesHeader).setString(originalProxiesHeader);                                   
}                                                                                                      }                                                                                                   
if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {                          if (originalRemoteIpHeader == null || originalRemoteIpHeader.length() == 0) {                       
headers.removeHeader(remoteIpHeader);                                                                  headers.removeHeader(remoteIpHeader);                                                               
} else {                                                                                               } else {                                                                                            
headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);                                    headers.setValue(remoteIpHeader).setString(originalRemoteIpHeader);                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
