void addEndpoint(ServerEndpointConfig sec, boolean fromAnnotatedPojo) throws DeploymentException {     void addEndpoint(ServerEndpointConfig sec, boolean fromAnnotatedPojo) throws DeploymentException {  
if (enforceNoAddAfterHandshake && !addAllowed) {                                                       if (enforceNoAddAfterHandshake && !addAllowed) {                                                    
throw new DeploymentException(sm.getString("serverContainer.addNotAllowed"));                          throw new DeploymentException(sm.getString("serverContainer.addNotAllowed"));                       
}                                                                                                      }                                                                                                   
if (servletContext == null) {                                                                          if (servletContext == null) {                                                                       
throw new DeploymentException(sm.getString("serverContainer.servletContextMissing"));                  throw new DeploymentException(sm.getString("serverContainer.servletContextMissing"));               
}                                                                                                      }                                                                                                   
if (deploymentFailed) {                                                                                if (deploymentFailed) {                                                                             
throw new DeploymentException(sm.getString("serverContainer.failedDeployment", servletContext.getCon   throw new DeploymentException(sm.getString("serverContainer.failedDeployment", servletContext.getCon
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
String path = sec.getPath();                                                                           String path = sec.getPath();                                                                        
// Add method mapping to user properties                                                               // Add method mapping to user properties                                                            
PojoMethodMapping methodMapping = new PojoMethodMapping(sec.getEndpointClass(), sec.getDecoders(), p | PojoMethodMapping methodMapping = new PojoMethodMapping(sec.getEndpointClass(), sec.getDecoders(), p
if (methodMapping.getOnClose() != null || methodMapping.getOnOpen() != null || methodMapping.getOnEr   if (methodMapping.getOnClose() != null || methodMapping.getOnOpen() != null || methodMapping.getOnEr
sec.getUserProperties().put(org.apache.tomcat.websocket.pojo.Constants.POJO_METHOD_MAPPING_KEY, meth   sec.getUserProperties().put(org.apache.tomcat.websocket.pojo.Constants.POJO_METHOD_MAPPING_KEY, meth
}                                                                                                      }                                                                                                   
UriTemplate uriTemplate = new UriTemplate(path);                                                       UriTemplate uriTemplate = new UriTemplate(path);                                                    
if (uriTemplate.hasParameters()) {                                                                     if (uriTemplate.hasParameters()) {                                                                  
Integer key = Integer.valueOf(uriTemplate.getSegmentCount());                                          Integer key = Integer.valueOf(uriTemplate.getSegmentCount());                                       
ConcurrentSkipListMap&lt;String, TemplatePathMatch&gt; templateMatches = configTemplateMatchMap.get(   ConcurrentSkipListMap&lt;String, TemplatePathMatch&gt; templateMatches = configTemplateMatchMap.get(
if (templateMatches == null) {                                                                         if (templateMatches == null) {                                                                      
// Ensure that if concurrent threads execute this block they                                           // Ensure that if concurrent threads execute this block they                                        
// all end up using the same ConcurrentSkipListMap instance                                            // all end up using the same ConcurrentSkipListMap instance                                         
templateMatches = new ConcurrentSkipListMap&lt;&gt;();                                                 templateMatches = new ConcurrentSkipListMap&lt;&gt;();                                              
configTemplateMatchMap.putIfAbsent(key, templateMatches);                                              configTemplateMatchMap.putIfAbsent(key, templateMatches);                                           
templateMatches = configTemplateMatchMap.get(key);                                                     templateMatches = configTemplateMatchMap.get(key);                                                  
}                                                                                                      }                                                                                                   
TemplatePathMatch newMatch = new TemplatePathMatch(sec, uriTemplate, fromAnnotatedPojo);               TemplatePathMatch newMatch = new TemplatePathMatch(sec, uriTemplate, fromAnnotatedPojo);            
TemplatePathMatch oldMatch = templateMatches.putIfAbsent(uriTemplate.getNormalizedPath(), newMatch);   TemplatePathMatch oldMatch = templateMatches.putIfAbsent(uriTemplate.getNormalizedPath(), newMatch);
if (oldMatch != null) {                                                                                if (oldMatch != null) {                                                                             
// Note: This depends on Endpoint instances being added                                                // Note: This depends on Endpoint instances being added                                             
// before POJOs in WsSci#onStartup()                                                                   // before POJOs in WsSci#onStartup()                                                                
if (oldMatch.isFromAnnotatedPojo() && !newMatch.isFromAnnotatedPojo() && oldMatch.getConfig().getEnd   if (oldMatch.isFromAnnotatedPojo() && !newMatch.isFromAnnotatedPojo() && oldMatch.getConfig().getEnd
// The WebSocket spec says to ignore the new match in this case                                        // The WebSocket spec says to ignore the new match in this case                                     
templateMatches.put(path, oldMatch);                                                                   templateMatches.put(path, oldMatch);                                                                
} else {                                                                                               } else {                                                                                            
// Duplicate uriTemplate;                                                                              // Duplicate uriTemplate;                                                                           
throw new DeploymentException(sm.getString("serverContainer.duplicatePaths", path, sec.getEndpointCl   throw new DeploymentException(sm.getString("serverContainer.duplicatePaths", path, sec.getEndpointCl
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// Exact match                                                                                         // Exact match                                                                                      
ExactPathMatch newMatch = new ExactPathMatch(sec, fromAnnotatedPojo);                                  ExactPathMatch newMatch = new ExactPathMatch(sec, fromAnnotatedPojo);                               
ExactPathMatch oldMatch = configExactMatchMap.put(path, newMatch);                                     ExactPathMatch oldMatch = configExactMatchMap.put(path, newMatch);                                  
if (oldMatch != null) {                                                                                if (oldMatch != null) {                                                                             
// Note: This depends on Endpoint instances being added                                                // Note: This depends on Endpoint instances being added                                             
// before POJOs in WsSci#onStartup()                                                                   // before POJOs in WsSci#onStartup()                                                                
if (oldMatch.isFromAnnotatedPojo() && !newMatch.isFromAnnotatedPojo() && oldMatch.getConfig().getEnd   if (oldMatch.isFromAnnotatedPojo() && !newMatch.isFromAnnotatedPojo() && oldMatch.getConfig().getEnd
// The WebSocket spec says to ignore the new match in this case                                        // The WebSocket spec says to ignore the new match in this case                                     
configExactMatchMap.put(path, oldMatch);                                                               configExactMatchMap.put(path, oldMatch);                                                            
} else {                                                                                               } else {                                                                                            
// Duplicate path mappings                                                                             // Duplicate path mappings                                                                          
throw new DeploymentException(sm.getString("serverContainer.duplicatePaths", path, oldMatch.getConfi   throw new DeploymentException(sm.getString("serverContainer.duplicatePaths", path, oldMatch.getConfi
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
endpointsRegistered = true;                                                                            endpointsRegistered = true;                                                                         
} catch (DeploymentException de) {                                                                     } catch (DeploymentException de) {                                                                  
failDeployment();                                                                                      failDeployment();                                                                                   
throw de;                                                                                              throw de;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
