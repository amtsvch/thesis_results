/**
 * Ensures that this object is in a valid state to serve resources, checks
 * that the path is a String that starts with '/' and checks that the path
 * can be normalized without stepping outside of the root.
 *
 * @param path
 * @return  the normalized path
 */
private String validate(String path) {
    if (!getState().isAvailable()) {
        throw new IllegalStateException(sm.getString("standardRoot.checkStateNotStarted"));
    }
    if (path == null || path.length() == 0 || !path.startsWith("/")) {
        throw new IllegalArgumentException(sm.getString("standardRoot.invalidPath", path));
    }
    String result;
    if (File.separatorChar == '\\') {
        // On Windows '\\' is a separator so in case a Windows style
        // separator has managed to make it into the path, replace it.
        result = RequestUtil.normalize(path, true);
    } else {
        // On UNIX and similar systems, '\\' is a valid file name so do not
        // convert it to '/'
        result = RequestUtil.normalize(path, false);
    }
    if (result == null || result.length() == 0 || !result.startsWith("/")) {
        throw new IllegalArgumentException(sm.getString("standardRoot.invalidPathNormal", path, result));
    }
    return result;
}