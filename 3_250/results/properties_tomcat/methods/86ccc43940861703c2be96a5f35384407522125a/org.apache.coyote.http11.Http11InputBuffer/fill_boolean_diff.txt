// --------------------------------------------------------- Private Methods                           // --------------------------------------------------------- Private Methods                        
/**                                                                                                    /**                                                                                                 
* Attempts to read some data into the input buffer.                                                    * Attempts to read some data into the input buffer.                                                 
*                                                                                                      *                                                                                                   
* @return &lt;code&gt;true&lt;/code&gt; if more data was added to the input buffer                     * @return &lt;code&gt;true&lt;/code&gt; if more data was added to the input buffer                  
*         otherwise &lt;code&gt;false&lt;/code&gt;                                                     *         otherwise &lt;code&gt;false&lt;/code&gt;                                                  
*/                                                                                                     */                                                                                                  
private boolean fill(boolean block) throws IOException {                                               private boolean fill(boolean block) throws IOException {                                            
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug("Before fill(): [" + parsingHeader + "], parsingRequestLine: [" + parsingRequestLine + "], | log.debug("Before fill(): parsingHeader: [" + parsingHeader + "], parsingRequestLine: [" + parsingRe
}                                                                                                      }                                                                                                   
if (parsingHeader) {                                                                                   if (parsingHeader) {                                                                                
if (byteBuffer.limit() &gt;= headerBufferSize) {                                                       if (byteBuffer.limit() &gt;= headerBufferSize) {                                                    
if (parsingRequestLine) {                                                                              if (parsingRequestLine) {                                                                           
// Avoid unknown protocol triggering an additional error                                               // Avoid unknown protocol triggering an additional error                                            
request.protocol().setString(Constants.HTTP_11);                                                       request.protocol().setString(Constants.HTTP_11);                                                    
}                                                                                                      }                                                                                                   
throw new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"));                   throw new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"));                
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
byteBuffer.limit(end).position(end);                                                                   byteBuffer.limit(end).position(end);                                                                
}                                                                                                      }                                                                                                   
                                                                                                     | int nRead = -1;                                                                                     
byteBuffer.mark();                                                                                     byteBuffer.mark();                                                                                  
                                                                                                     | try {                                                                                               
if (byteBuffer.position() &lt; byteBuffer.limit()) {                                                   if (byteBuffer.position() &lt; byteBuffer.limit()) {                                                
byteBuffer.position(byteBuffer.limit());                                                               byteBuffer.position(byteBuffer.limit());                                                            
}                                                                                                      }                                                                                                   
byteBuffer.limit(byteBuffer.capacity());                                                               byteBuffer.limit(byteBuffer.capacity());                                                            
SocketWrapperBase&lt;?&gt; socketWrapper = this.wrapper;                                               SocketWrapperBase&lt;?&gt; socketWrapper = this.wrapper;                                            
int nRead = -1;                                                                                      |                                                                                                     
if (socketWrapper != null) {                                                                           if (socketWrapper != null) {                                                                        
nRead = socketWrapper.read(block, byteBuffer);                                                         nRead = socketWrapper.read(block, byteBuffer);                                                      
} else {                                                                                               } else {                                                                                            
throw new CloseNowException(sm.getString("iib.eof.error"));                                            throw new CloseNowException(sm.getString("iib.eof.error"));                                         
}                                                                                                      }                                                                                                   
                                                                                                     | } finally {                                                                                         
                                                                                                     | // Ensure that the buffer limit and position are returned to a                                      
                                                                                                     | // consistent "ready for read" state if an error occurs during in                                   
                                                                                                     | // the above code block.                                                                            
byteBuffer.limit(byteBuffer.position()).reset();                                                       byteBuffer.limit(byteBuffer.position()).reset();                                                    
                                                                                                     | }                                                                                                   
if (log.isDebugEnabled()) {                                                                            if (log.isDebugEnabled()) {                                                                         
log.debug("Received [" + new String(byteBuffer.array(), byteBuffer.position(), byteBuffer.remaining(   log.debug("Received [" + new String(byteBuffer.array(), byteBuffer.position(), byteBuffer.remaining(
}                                                                                                      }                                                                                                   
if (nRead &gt; 0) {                                                                                    if (nRead &gt; 0) {                                                                                 
return true;                                                                                           return true;                                                                                        
} else if (nRead == -1) {                                                                              } else if (nRead == -1) {                                                                           
throw new EOFException(sm.getString("iib.eof.error"));                                                 throw new EOFException(sm.getString("iib.eof.error"));                                              
} else {                                                                                               } else {                                                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
