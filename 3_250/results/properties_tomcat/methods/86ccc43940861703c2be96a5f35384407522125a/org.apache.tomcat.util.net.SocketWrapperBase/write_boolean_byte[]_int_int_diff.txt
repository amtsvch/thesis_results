/**
 * Writes the provided data to the socket write buffer. If the socket write
 * buffer fills during the write, the content of the socket write buffer is
 * written to the network and this method starts to fill the socket write
 * buffer again. Depending on the size of the data to write, there may be
 * multiple writes to the network.
 * <p>
 * Non-blocking writes must return immediately and the byte array holding
 * the data to be written must be immediately available for re-use. It may
 * not be possible to write sufficient data to the network to allow this to
 * happen. In this case data that cannot be written to the network and
 * cannot be held by the socket buffer is stored in the non-blocking write
 * buffer.
 * <p>
 * Note: There is an implementation assumption that, before switching from
 *       non-blocking writes to blocking writes, any data remaining in the
 *       non-blocking write buffer will have been written to the network.
 *
 * @param block <code>true</code> if a blocking write should be used,
 *                  otherwise a non-blocking write will be used
 * @param buf   The byte array containing the data to be written
 * @param off   The offset within the byte array of the data to be written
 * @param len   The length of the data to be written
 *
 * @throws IOException If an IO error occurs during the write
 */
public final void write(boolean block, byte[] buf, int off, int len) throws IOException {
    if (len == 0 || buf == null) {
        return;
    }
    /*
         * While the implementations for blocking and non-blocking writes are
         * very similar they have been split into separate methods:
         * - To allow sub-classes to override them individually. NIO2, for
         *   example, overrides the non-blocking write but not the blocking
         *   write.
         * - To enable a marginally more efficient implemented for blocking
         *   writes which do not require the additional checks related to the
         *   use of the non-blocking write buffer
         */
    if (block) {
        writeBlocking(buf, off, len);
    } else {
        writeNonBlocking(buf, off, len);
    }
}