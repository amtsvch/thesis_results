@Override
public final void action(ActionCode actionCode, Object param) {
    switch(actionCode) {
        // 'Normal' servlet support
        case COMMIT:
            {
                if (!response.isCommitted()) {
                    try {
                        // Validate and write response headers
                        prepareResponse();
                    } catch (IOException e) {
                        handleIOException(e);
                    }
                }
                break;
            }
        case CLOSE:
            {
                action(ActionCode.COMMIT, null);
                try {
                    finishResponse();
                } catch (IOException e) {
                    handleIOException(e);
                }
                break;
            }
        case ACK:
            {
                ack((ContinueResponseTiming) param);
                break;
            }
        case CLIENT_FLUSH:
            {
                action(ActionCode.COMMIT, null);
                try {
                    flush();
                } catch (IOException e) {
                    handleIOException(e);
                    response.setErrorException(e);
                }
                break;
            }
        case AVAILABLE:
            {
                request.setAvailable(available(Boolean.TRUE.equals(param)));
                break;
            }
        case REQ_SET_BODY_REPLAY:
            {
                ByteChunk body = (ByteChunk) param;
                setRequestBody(body);
                break;
            }
        // Error handling
        case IS_ERROR:
            {
                ((AtomicBoolean) param).set(getErrorState().isError());
                break;
            }
        case IS_IO_ALLOWED:
            {
                ((AtomicBoolean) param).set(getErrorState().isIoAllowed());
                break;
            }
        case CLOSE_NOW:
            {
                // Prevent further writes to the response
                setSwallowResponse();
                if (param instanceof Throwable) {
                    setErrorState(ErrorState.CLOSE_NOW, (Throwable) param);
                } else {
                    setErrorState(ErrorState.CLOSE_NOW, null);
                }
                break;
            }
        case DISABLE_SWALLOW_INPUT:
            {
                // Cancelled upload or similar.
                // No point reading the remainder of the request.
                disableSwallowRequest();
                // This is an error state. Make sure it is marked as such.
                setErrorState(ErrorState.CLOSE_CLEAN, null);
                break;
            }
        // Request attribute support
        case REQ_HOST_ADDR_ATTRIBUTE:
            {
                if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
                    request.remoteAddr().setString(socketWrapper.getRemoteAddr());
                }
                break;
            }
        case REQ_PEER_ADDR_ATTRIBUTE:
            {
                if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
                    request.peerAddr().setString(socketWrapper.getRemoteAddr());
                }
                break;
            }
        case REQ_HOST_ATTRIBUTE:
            {
                populateRequestAttributeRemoteHost();
                break;
            }
        case REQ_LOCALPORT_ATTRIBUTE:
            {
                if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
                    request.setLocalPort(socketWrapper.getLocalPort());
                }
                break;
            }
        case REQ_LOCAL_ADDR_ATTRIBUTE:
            {
                if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
                    request.localAddr().setString(socketWrapper.getLocalAddr());
                }
                break;
            }
        case REQ_LOCAL_NAME_ATTRIBUTE:
            {
                if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
                    request.localName().setString(socketWrapper.getLocalName());
                }
                break;
            }
        case REQ_REMOTEPORT_ATTRIBUTE:
            {
                if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
                    request.setRemotePort(socketWrapper.getRemotePort());
                }
                break;
            }
        // SSL request attribute support
        case REQ_SSL_ATTRIBUTE:
            {
                populateSslRequestAttributes();
                break;
            }
        case REQ_SSL_CERTIFICATE:
            {
                try {
                    sslReHandShake();
                } catch (IOException ioe) {
                    setErrorState(ErrorState.CLOSE_CONNECTION_NOW, ioe);
                }
                break;
            }
        // Servlet 3.0 asynchronous support
        case ASYNC_START:
            {
                asyncStateMachine.asyncStart((AsyncContextCallback) param);
                break;
            }
        case ASYNC_COMPLETE:
            {
                clearDispatches();
                if (asyncStateMachine.asyncComplete()) {
                    processSocketEvent(SocketEvent.OPEN_READ, true);
                }
                break;
            }
        case ASYNC_DISPATCH:
            {
                if (asyncStateMachine.asyncDispatch()) {
                    processSocketEvent(SocketEvent.OPEN_READ, true);
                }
                break;
            }
        case ASYNC_DISPATCHED:
            {
                asyncStateMachine.asyncDispatched();
                break;
            }
        case ASYNC_ERROR:
            {
                asyncStateMachine.asyncError();
                break;
            }
        case ASYNC_IS_ASYNC:
            {
                ((AtomicBoolean) param).set(asyncStateMachine.isAsync());
                break;
            }
        case ASYNC_IS_COMPLETING:
            {
                ((AtomicBoolean) param).set(asyncStateMachine.isCompleting());
                break;
            }
        case ASYNC_IS_DISPATCHING:
            {
                ((AtomicBoolean) param).set(asyncStateMachine.isAsyncDispatching());
                break;
            }
        case ASYNC_IS_ERROR:
            {
                ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
                break;
            }
        case ASYNC_IS_STARTED:
            {
                ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());
                break;
            }
        case ASYNC_IS_TIMINGOUT:
            {
                ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());
                break;
            }
        case ASYNC_RUN:
            {
                asyncStateMachine.asyncRun((Runnable) param);
                break;
            }
        case ASYNC_SETTIMEOUT:
            {
                if (param == null) {
                    return;
                }
                long timeout = ((Long) param).longValue();
                setAsyncTimeout(timeout);
                break;
            }
        case ASYNC_TIMEOUT:
            {
                AtomicBoolean result = (AtomicBoolean) param;
                result.set(asyncStateMachine.asyncTimeout());
                break;
            }
        case ASYNC_POST_PROCESS:
            {
                asyncStateMachine.asyncPostProcess();
                break;
            }
        // Servlet 3.1 non-blocking I/O
        case REQUEST_BODY_FULLY_READ:
            {
                AtomicBoolean result = (AtomicBoolean) param;
                result.set(isRequestBodyFullyRead());
                break;
            }
        case NB_READ_INTEREST:
            {
                AtomicBoolean isReady = (AtomicBoolean) param;
                isReady.set(isReadyForRead());
                break;
            }
        case NB_WRITE_INTEREST:
            {
                AtomicBoolean isReady = (AtomicBoolean) param;
                isReady.set(isReadyForWrite());
                break;
            }
        case DISPATCH_READ:
            {
                addDispatch(DispatchType.NON_BLOCKING_READ);
                break;
            }
        case DISPATCH_WRITE:
            {
                addDispatch(DispatchType.NON_BLOCKING_WRITE);
                break;
            }
        case DISPATCH_EXECUTE:
            {
                executeDispatches();
                break;
            }
        // Servlet 3.1 HTTP Upgrade
        case UPGRADE:
            {
                doHttpUpgrade((UpgradeToken) param);
                break;
            }
        // Servlet 4.0 Push requests
        case IS_PUSH_SUPPORTED:
            {
                AtomicBoolean result = (AtomicBoolean) param;
                result.set(isPushSupported());
                break;
            }
        case PUSH_REQUEST:
            {
                doPush((Request) param);
                break;
            }
        // Servlet 4.0 Trailers
        case IS_TRAILER_FIELDS_READY:
            {
                AtomicBoolean result = (AtomicBoolean) param;
                result.set(isTrailerFieldsReady());
                break;
            }
        case IS_TRAILER_FIELDS_SUPPORTED:
            {
                AtomicBoolean result = (AtomicBoolean) param;
                result.set(isTrailerFieldsSupported());
                break;
            }
        // Identifiers associated with multiplexing protocols like HTTP/2
        case CONNECTION_ID:
            {
                @SuppressWarnings("unchecked")
                AtomicReference<Object> result = (AtomicReference<Object>) param;
                result.set(getConnectionID());
                break;
            }
        case STREAM_ID:
            {
                @SuppressWarnings("unchecked")
                AtomicReference<Object> result = (AtomicReference<Object>) param;
                result.set(getStreamID());
                break;
            }
    }
}