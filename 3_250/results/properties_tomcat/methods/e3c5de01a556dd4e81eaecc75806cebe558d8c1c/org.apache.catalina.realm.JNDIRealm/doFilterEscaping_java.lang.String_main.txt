/**
 * Given an LDAP search string, returns the string with certain characters
 * escaped according to RFC 2254 guidelines.
 * The character mapping is as follows:
 *     char -&gt;  Replacement
 *    ---------------------------
 *     *  -&gt; \2a
 *     (  -&gt; \28
 *     )  -&gt; \29
 *     \  -&gt; \5c
 *     \0 -&gt; \00
 *
 * @param inString string to escape according to RFC 2254 guidelines
 *
 * @return String the escaped/encoded result
 */
protected String doFilterEscaping(String inString) {
    StringBuilder buf = new StringBuilder(inString.length());
    for (int i = 0; i < inString.length(); i++) {
        char c = inString.charAt(i);
        switch(c) {
            case '\\':
                buf.append("\\5c");
                break;
            case '*':
                buf.append("\\2a");
                break;
            case '(':
                buf.append("\\28");
                break;
            case ')':
                buf.append("\\29");
                break;
            case '\0':
                buf.append("\\00");
                break;
            default:
                buf.append(c);
                break;
        }
    }
    return buf.toString();
}