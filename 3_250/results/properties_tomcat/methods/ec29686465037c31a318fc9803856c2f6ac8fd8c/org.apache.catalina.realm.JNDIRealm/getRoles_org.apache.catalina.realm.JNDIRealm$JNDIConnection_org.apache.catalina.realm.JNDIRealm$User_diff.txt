/**                                                                                                    /**                                                                                                 
* Return a List of roles associated with the given User.  Any                                          * Return a List of roles associated with the given User.  Any                                       
* roles present in the user's directory entry are supplemented by                                      * roles present in the user's directory entry are supplemented by                                   
* a directory search. If no roles are associated with this user,                                       * a directory search. If no roles are associated with this user,                                    
* a zero-length List is returned.                                                                      * a zero-length List is returned.                                                                   
*                                                                                                      *                                                                                                   
* @param connection The directory context we are searching                                             * @param connection The directory context we are searching                                          
* @param user The User to be checked                                                                   * @param user The User to be checked                                                                
* @return the list of role names                                                                       * @return the list of role names                                                                    
* @exception NamingException if a directory server error occurs                                        * @exception NamingException if a directory server error occurs                                     
*/                                                                                                     */                                                                                                  
protected List&lt;String&gt; getRoles(JNDIConnection connection, User user) throws NamingException {   protected List&lt;String&gt; getRoles(JNDIConnection connection, User user) throws NamingException {
if (user == null)                                                                                    | if (user == null) {                                                                                 
return null;                                                                                           return null;                                                                                        
                                                                                                     | }                                                                                                   
String dn = user.getDN();                                                                              String dn = user.getDN();                                                                           
String username = user.getUserName();                                                                  String username = user.getUserName();                                                               
String userRoleId = user.getUserRoleId();                                                              String userRoleId = user.getUserRoleId();                                                           
if (dn == null || username == null)                                                                  | if (dn == null || username == null) {                                                               
return null;                                                                                           return null;                                                                                        
if (containerLog.isTraceEnabled())                                                                   | }                                                                                                   
                                                                                                     | if (containerLog.isTraceEnabled()) {                                                                
containerLog.trace("  getRoles(" + dn + ")");                                                          containerLog.trace("  getRoles(" + dn + ")");                                                       
                                                                                                     | }                                                                                                   
// Start with roles retrieved from the user entry                                                      // Start with roles retrieved from the user entry                                                   
List&lt;String&gt; list = new ArrayList&lt;&gt;();                                                     List&lt;String&gt; list = new ArrayList&lt;&gt;();                                                  
List&lt;String&gt; userRoles = user.getRoles();                                                        List&lt;String&gt; userRoles = user.getRoles();                                                     
if (userRoles != null) {                                                                               if (userRoles != null) {                                                                            
list.addAll(userRoles);                                                                                list.addAll(userRoles);                                                                             
}                                                                                                      }                                                                                                   
if (commonRole != null)                                                                              | if (commonRole != null) {                                                                           
list.add(commonRole);                                                                                  list.add(commonRole);                                                                               
                                                                                                     | }                                                                                                   
if (containerLog.isTraceEnabled()) {                                                                   if (containerLog.isTraceEnabled()) {                                                                
containerLog.trace("  Found " + list.size() + " user internal roles");                                 containerLog.trace("  Found " + list.size() + " user internal roles");                              
containerLog.trace("  Found user internal roles " + list.toString());                                  containerLog.trace("  Found user internal roles " + list.toString());                               
}                                                                                                      }                                                                                                   
// Are we configured to do role searches?                                                              // Are we configured to do role searches?                                                           
if ((connection.roleFormat == null) || (roleName == null))                                           | if ((connection.roleFormat == null) || (roleName == null)) {                                        
return list;                                                                                           return list;                                                                                        
                                                                                                     | }                                                                                                   
// Set up parameters for an appropriate search                                                         // Set up parameters for an appropriate search                                                      
String filter = connection.roleFormat.format(new String[] { doRFC2254Encoding(dn), username, userRol   String filter = connection.roleFormat.format(new String[] { doRFC2254Encoding(dn), username, userRol
SearchControls controls = new SearchControls();                                                        SearchControls controls = new SearchControls();                                                     
if (roleSubtree)                                                                                     | if (roleSubtree) {                                                                                  
controls.setSearchScope(SearchControls.SUBTREE_SCOPE);                                                 controls.setSearchScope(SearchControls.SUBTREE_SCOPE);                                              
else                                                                                                 | } else {                                                                                            
controls.setSearchScope(SearchControls.ONELEVEL_SCOPE);                                                controls.setSearchScope(SearchControls.ONELEVEL_SCOPE);                                             
                                                                                                     | }                                                                                                   
controls.setReturningAttributes(new String[] { roleName });                                            controls.setReturningAttributes(new String[] { roleName });                                         
String base = null;                                                                                    String base = null;                                                                                 
if (connection.roleBaseFormat != null) {                                                               if (connection.roleBaseFormat != null) {                                                            
NameParser np = connection.context.getNameParser("");                                                  NameParser np = connection.context.getNameParser("");                                               
Name name = np.parse(dn);                                                                              Name name = np.parse(dn);                                                                           
String[] nameParts = new String[name.size()];                                                          String[] nameParts = new String[name.size()];                                                       
for (int i = 0; i &lt; name.size(); i++) {                                                             for (int i = 0; i &lt; name.size(); i++) {                                                          
nameParts[i] = name.get(i);                                                                            nameParts[i] = name.get(i);                                                                         
}                                                                                                      }                                                                                                   
base = connection.roleBaseFormat.format(nameParts);                                                    base = connection.roleBaseFormat.format(nameParts);                                                 
} else {                                                                                               } else {                                                                                            
base = "";                                                                                             base = "";                                                                                          
}                                                                                                      }                                                                                                   
// Perform the configured search and process the results                                               // Perform the configured search and process the results                                            
NamingEnumeration&lt;SearchResult&gt; results = searchAsUser(connection.context, user, base, filter,   NamingEnumeration&lt;SearchResult&gt; results = searchAsUser(connection.context, user, base, filter,
if (results == null)                                                                                 | if (results == null) {                                                                              
// Should never happen, but just in case ...                                                           // Should never happen, but just in case ...                                                        
return list;                                                                                           return list;                                                                                        
                                                                                                     | }                                                                                                   
Map&lt;String, String&gt; groupMap = new HashMap&lt;&gt;();                                            Map&lt;String, String&gt; groupMap = new HashMap&lt;&gt;();                                         
try {                                                                                                  try {                                                                                               
while (results.hasMore()) {                                                                            while (results.hasMore()) {                                                                         
SearchResult result = results.next();                                                                  SearchResult result = results.next();                                                               
Attributes attrs = result.getAttributes();                                                             Attributes attrs = result.getAttributes();                                                          
if (attrs == null)                                                                                   | if (attrs == null) {                                                                                
continue;                                                                                              continue;                                                                                           
                                                                                                     | }                                                                                                   
String dname = getDistinguishedName(connection.context, roleBase, result);                             String dname = getDistinguishedName(connection.context, roleBase, result);                          
String name = getAttributeValue(roleName, attrs);                                                      String name = getAttributeValue(roleName, attrs);                                                   
if (name != null && dname != null) {                                                                   if (name != null && dname != null) {                                                                
groupMap.put(dname, name);                                                                             groupMap.put(dname, name);                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (PartialResultException ex) {                                                                  } catch (PartialResultException ex) {                                                               
if (!adCompat)                                                                                       | if (!adCompat) {                                                                                    
throw ex;                                                                                              throw ex;                                                                                           
                                                                                                     | }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
results.close();                                                                                       results.close();                                                                                    
}                                                                                                      }                                                                                                   
if (containerLog.isTraceEnabled()) {                                                                   if (containerLog.isTraceEnabled()) {                                                                
Set&lt;Entry&lt;String, String&gt;&gt; entries = groupMap.entrySet();                                  Set&lt;Entry&lt;String, String&gt;&gt; entries = groupMap.entrySet();                               
containerLog.trace("  Found " + entries.size() + " direct roles");                                     containerLog.trace("  Found " + entries.size() + " direct roles");                                  
for (Entry&lt;String, String&gt; entry : entries) {                                                    for (Entry&lt;String, String&gt; entry : entries) {                                                 
containerLog.trace("  Found direct role " + entry.getKey() + " -&gt; " + entry.getValue());            containerLog.trace("  Found direct role " + entry.getKey() + " -&gt; " + entry.getValue());         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// if nested group search is enabled, perform searches for nested groups until no new group is found   // if nested group search is enabled, perform searches for nested groups until no new group is found
if (getRoleNested()) {                                                                                 if (getRoleNested()) {                                                                              
// The following efficient algorithm is known as memberOf Algorithm, as described in "Practices in     // The following efficient algorithm is known as memberOf Algorithm, as described in "Practices in  
// Directory Groups". It avoids group slurping and handles cyclic group memberships as well.           // Directory Groups". It avoids group slurping and handles cyclic group memberships as well.        
// See http://middleware.internet2.edu/dir/ for details                                                // See http://middleware.internet2.edu/dir/ for details                                             
Map&lt;String, String&gt; newGroups = new HashMap&lt;&gt;(groupMap);                                   Map&lt;String, String&gt; newGroups = new HashMap&lt;&gt;(groupMap);                                
while (!newGroups.isEmpty()) {                                                                         while (!newGroups.isEmpty()) {                                                                      
// Stores the groups we find in this iteration                                                         // Stores the groups we find in this iteration                                                      
Map&lt;String, String&gt; newThisRound = new HashMap&lt;&gt;();                                        Map&lt;String, String&gt; newThisRound = new HashMap&lt;&gt;();                                     
for (Entry&lt;String, String&gt; group : newGroups.entrySet()) {                                       for (Entry&lt;String, String&gt; group : newGroups.entrySet()) {                                    
filter = connection.roleFormat.format(new String[] { doRFC2254Encoding(group.getKey()), group.getVal   filter = connection.roleFormat.format(new String[] { doRFC2254Encoding(group.getKey()), group.getVal
if (containerLog.isTraceEnabled()) {                                                                   if (containerLog.isTraceEnabled()) {                                                                
containerLog.trace("Perform a nested group search with base " + roleBase + " and filter " + filter);   containerLog.trace("Perform a nested group search with base " + roleBase + " and filter " + filter);
}                                                                                                      }                                                                                                   
results = searchAsUser(connection.context, user, roleBase, filter, controls, isRoleSearchAsUser());    results = searchAsUser(connection.context, user, roleBase, filter, controls, isRoleSearchAsUser()); 
try {                                                                                                  try {                                                                                               
while (results.hasMore()) {                                                                            while (results.hasMore()) {                                                                         
SearchResult result = results.next();                                                                  SearchResult result = results.next();                                                               
Attributes attrs = result.getAttributes();                                                             Attributes attrs = result.getAttributes();                                                          
if (attrs == null)                                                                                   | if (attrs == null) {                                                                                
continue;                                                                                              continue;                                                                                           
                                                                                                     | }                                                                                                   
String dname = getDistinguishedName(connection.context, roleBase, result);                             String dname = getDistinguishedName(connection.context, roleBase, result);                          
String name = getAttributeValue(roleName, attrs);                                                      String name = getAttributeValue(roleName, attrs);                                                   
if (name != null && dname != null && !groupMap.keySet().contains(dname)) {                             if (name != null && dname != null && !groupMap.keySet().contains(dname)) {                          
groupMap.put(dname, name);                                                                             groupMap.put(dname, name);                                                                          
newThisRound.put(dname, name);                                                                         newThisRound.put(dname, name);                                                                      
if (containerLog.isTraceEnabled()) {                                                                   if (containerLog.isTraceEnabled()) {                                                                
containerLog.trace("  Found nested role " + dname + " -&gt; " + name);                                 containerLog.trace("  Found nested role " + dname + " -&gt; " + name);                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (PartialResultException ex) {                                                                  } catch (PartialResultException ex) {                                                               
if (!adCompat)                                                                                       | if (!adCompat) {                                                                                    
throw ex;                                                                                              throw ex;                                                                                           
                                                                                                     | }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
results.close();                                                                                       results.close();                                                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
newGroups = newThisRound;                                                                              newGroups = newThisRound;                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
list.addAll(groupMap.values());                                                                        list.addAll(groupMap.values());                                                                     
return list;                                                                                           return list;                                                                                        
}                                                                                                      }                                                                                                   
