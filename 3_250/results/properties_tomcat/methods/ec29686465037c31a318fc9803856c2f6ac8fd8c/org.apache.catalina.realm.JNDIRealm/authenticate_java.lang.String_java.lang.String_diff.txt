// ---------------------------------------------------------- Realm Methods                            // ---------------------------------------------------------- Realm Methods                         
/**                                                                                                    /**                                                                                                 
* Return the Principal associated with the specified username and                                      * Return the Principal associated with the specified username and                                   
* credentials, if there is one; otherwise return &lt;code&gt;null&lt;/code&gt;.                        * credentials, if there is one; otherwise return &lt;code&gt;null&lt;/code&gt;.                     
*                                                                                                      *                                                                                                   
* If there are any errors with the JDBC connection, executing                                          * If there are any errors with the JDBC connection, executing                                       
* the query or anything we return null (don't authenticate). This                                      * the query or anything we return null (don't authenticate). This                                   
* event is also logged, and the connection will be closed so that                                      * event is also logged, and the connection will be closed so that                                   
* a subsequent request will automatically re-open it.                                                  * a subsequent request will automatically re-open it.                                               
*                                                                                                      *                                                                                                   
* @param username Username of the Principal to look up                                                 * @param username Username of the Principal to look up                                              
* @param credentials Password or other credentials to use in                                           * @param credentials Password or other credentials to use in                                        
*  authenticating this username                                                                        *  authenticating this username                                                                     
* @return the associated principal, or &lt;code&gt;null&lt;/code&gt; if there is none.                 * @return the associated principal, or &lt;code&gt;null&lt;/code&gt; if there is none.              
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public Principal authenticate(String username, String credentials) {                                   public Principal authenticate(String username, String credentials) {                                
JNDIConnection connection = null;                                                                      JNDIConnection connection = null;                                                                   
Principal principal = null;                                                                            Principal principal = null;                                                                         
try {                                                                                                  try {                                                                                               
// Ensure that we have a directory context available                                                   // Ensure that we have a directory context available                                                
connection = get();                                                                                    connection = get();                                                                                 
try {                                                                                                  try {                                                                                               
// Occasionally the directory context will timeout.  Try one more                                      // Occasionally the directory context will timeout.  Try one more                                   
// time before giving up.                                                                              // time before giving up.                                                                           
// Authenticate the specified username if possible                                                     // Authenticate the specified username if possible                                                  
principal = authenticate(connection, username, credentials);                                           principal = authenticate(connection, username, credentials);                                        
} catch (NullPointerException | NamingException e) {                                                   } catch (NullPointerException | NamingException e) {                                                
/*                                                                                                     /*                                                                                                  
* BZ 61313                                                                                             * BZ 61313                                                                                          
* NamingException may or may not indicate an error that is                                             * NamingException may or may not indicate an error that is                                          
* recoverable via fail over. Therefore a decision needs to be                                          * recoverable via fail over. Therefore a decision needs to be                                       
* made whether to fail over or not. Generally, attempting to                                           * made whether to fail over or not. Generally, attempting to                                        
* fail over when it is not appropriate is better than not                                              * fail over when it is not appropriate is better than not                                           
* failing over when it is appropriate so the code always                                               * failing over when it is appropriate so the code always                                            
* attempts to fail over for NamingExceptions.                                                          * attempts to fail over for NamingExceptions.                                                       
*/                                                                                                     */                                                                                                  
/*                                                                                                     /*                                                                                                  
* BZ 42449                                                                                             * BZ 42449                                                                                          
* Catch NPE - Kludge Sun's LDAP provider with broken SSL.                                              * Catch NPE - Kludge Sun's LDAP provider with broken SSL.                                           
*/                                                                                                     */                                                                                                  
// log the exception so we know it's there.                                                            // log the exception so we know it's there.                                                         
containerLog.info(sm.getString("jndiRealm.exception.retry"), e);                                       containerLog.info(sm.getString("jndiRealm.exception.retry"), e);                                    
// close the connection so we know it will be reopened.                                                // close the connection so we know it will be reopened.                                             
close(connection);                                                                                     close(connection);                                                                                  
closePooledConnections();                                                                              closePooledConnections();                                                                           
// open a new directory context.                                                                       // open a new directory context.                                                                    
connection = get();                                                                                    connection = get();                                                                                 
// Try the authentication again.                                                                       // Try the authentication again.                                                                    
principal = authenticate(connection, username, credentials);                                           principal = authenticate(connection, username, credentials);                                        
}                                                                                                      }                                                                                                   
// Release this context                                                                                // Release this context                                                                             
release(connection);                                                                                   release(connection);                                                                                
// Return the authenticated Principal (if any)                                                         // Return the authenticated Principal (if any)                                                      
return principal;                                                                                      return principal;                                                                                   
} catch (NamingException e) {                                                                          } catch (NamingException e) {                                                                       
// Log the problem for posterity                                                                       // Log the problem for posterity                                                                    
containerLog.error(sm.getString("jndiRealm.exception"), e);                                            containerLog.error(sm.getString("jndiRealm.exception"), e);                                         
// close the connection so we know it will be reopened.                                                // close the connection so we know it will be reopened.                                             
close(connection);                                                                                     close(connection);                                                                                  
closePooledConnections();                                                                              closePooledConnections();                                                                           
// Return "not authenticated" for this request                                                         // Return "not authenticated" for this request                                                      
if (containerLog.isDebugEnabled())                                                                   | if (containerLog.isDebugEnabled()) {                                                                
containerLog.debug("Returning null principal.");                                                       containerLog.debug("Returning null principal.");                                                    
                                                                                                     | }                                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
