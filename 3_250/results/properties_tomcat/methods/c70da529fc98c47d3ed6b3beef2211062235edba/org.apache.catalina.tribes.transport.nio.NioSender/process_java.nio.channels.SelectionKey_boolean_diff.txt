/**
 * State machine to send data.
 * @param key The key to use
 * @param waitForAck Wait for an ack
 * @return <code>true</code> if the processing was successful
 * @throws IOException An IO error occurred
 */
public boolean process(SelectionKey key, boolean waitForAck) throws IOException {
    int ops = key.readyOps();
    key.interestOps(key.interestOps() & ~ops);
    // in case disconnect has been called
    if ((!isConnected()) && (!connecting))
        throw new IOException(sm.getString("nioSender.sender.disconnected"));
    if (!key.isValid())
        throw new IOException(sm.getString("nioSender.key.inValid"));
    if (key.isConnectable()) {
        if (socketChannel.finishConnect()) {
            completeConnect();
            if (current != null)
                key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
            return false;
        } else {
            // wait for the connection to finish
            key.interestOps(key.interestOps() | SelectionKey.OP_CONNECT);
            return false;
        }
        // end if
    } else if (key.isWritable()) {
        boolean writecomplete = write();
        if (writecomplete) {
            // we are completed, should we read an ack?
            if (waitForAck) {
                // register to read the ack
                key.interestOps(key.interestOps() | SelectionKey.OP_READ);
            } else {
                // if not, we are ready, setMessage will reregister us for another write interest
                // do a health check, we have no way of verify a disconnected
                // socket since we don't register for OP_READ on waitForAck=false
                // this causes overhead
                read();
                setRequestCount(getRequestCount() + 1);
                return true;
            }
        } else {
            // we are not complete, lets write some more
            key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
        }
        // end if
    } else if (key.isReadable()) {
        boolean readcomplete = read();
        if (readcomplete) {
            setRequestCount(getRequestCount() + 1);
            return true;
        } else {
            key.interestOps(key.interestOps() | SelectionKey.OP_READ);
        }
        // end if
    } else {
        // unknown state, should never happen
        log.warn(sm.getString("nioSender.unknown.state", Integer.toString(ops)));
        throw new IOException(sm.getString("nioSender.unknown.state", Integer.toString(ops)));
    }
    // end if
    return false;
}