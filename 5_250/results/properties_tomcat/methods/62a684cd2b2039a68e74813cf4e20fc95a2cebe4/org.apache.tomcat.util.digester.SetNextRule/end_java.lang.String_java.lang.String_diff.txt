/**
 * Process the end of this element.
 *
 * @param namespace the namespace URI of the matching element, or an
 *   empty string if the parser is not namespace aware or the element has
 *   no namespace
 * @param name the local name if the parser is namespace aware, or just
 *   the element name otherwise
 */
@Override
public void end(String namespace, String name) throws Exception {
    // Identify the objects to be used
    Object child = digester.peek(0);
    Object parent = digester.peek(1);
    if (digester.log.isDebugEnabled()) {
        if (parent == null) {
            digester.log.debug("[SetNextRule]{" + digester.match + "} Call [NULL PARENT]." + methodName + "(" + child + ")");
        } else {
            digester.log.debug("[SetNextRule]{" + digester.match + "} Call " + parent.getClass().getName() + "." + methodName + "(" + child + ")");
        }
    }
    // Call the specified method
    IntrospectionUtils.callMethod1(parent, methodName, child, paramType, digester.getClassLoader());
    StringBuilder code = digester.getGeneratedCode();
    if (code != null) {
        code.append(digester.toVariableName(parent)).append('.');
        code.append(methodName).append('(').append(digester.toVariableName(child)).append(");");
        code.append(System.lineSeparator());
    }
}