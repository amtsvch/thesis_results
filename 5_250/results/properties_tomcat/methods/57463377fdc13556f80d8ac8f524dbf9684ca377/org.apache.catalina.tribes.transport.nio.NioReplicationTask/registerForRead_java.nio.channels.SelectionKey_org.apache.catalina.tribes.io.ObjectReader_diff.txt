protected void registerForRead(final SelectionKey key, ObjectReader reader) {
    if (log.isTraceEnabled())
        log.trace("Adding key for read event:" + key);
    reader.finish();
    // register our OP_READ interest
    Runnable r = new Runnable() {

        @Override
        public void run() {
            try {
                if (key.isValid()) {
                    // cycle the selector so this key is active again
                    key.selector().wakeup();
                    // resume interest in OP_READ, OP_WRITE
                    int resumeOps = key.interestOps() | SelectionKey.OP_READ;
                    key.interestOps(resumeOps);
                    if (log.isTraceEnabled())
                        log.trace("Registering key for read:" + key);
                }
            } catch (CancelledKeyException ckx) {
                NioReceiver.cancelledKey(key);
                if (log.isTraceEnabled())
                    log.trace("CKX Cancelling key:" + key);
            } catch (Exception x) {
                log.error(sm.getString("nioReplicationTask.error.register.key", key), x);
            }
        }
    };
    receiver.addEvent(r);
}