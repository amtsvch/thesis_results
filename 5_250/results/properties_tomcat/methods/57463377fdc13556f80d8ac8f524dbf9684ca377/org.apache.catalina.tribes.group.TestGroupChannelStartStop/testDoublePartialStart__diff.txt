@Test
public void testDoublePartialStart() throws Exception {
    // try to double start the RX
    int count = 0;
    try {
        channel.start(Channel.SND_RX_SEQ);
        channel.start(Channel.MBR_RX_SEQ);
        count++;
    } catch (Exception x) {
        x.printStackTrace();
    }
    try {
        channel.start(Channel.MBR_RX_SEQ);
        count++;
    } catch (Exception x) {
        // expected
    }
    Assert.assertEquals(count, 1);
    channel.stop(Channel.DEFAULT);
    // double the membership sender
    count = 0;
    try {
        channel.start(Channel.SND_RX_SEQ);
        channel.start(Channel.MBR_TX_SEQ);
        count++;
    } catch (Exception x) {
        x.printStackTrace();
    }
    try {
        channel.start(Channel.MBR_TX_SEQ);
        count++;
    } catch (Exception x) {
        // expected
    }
    Assert.assertEquals(count, 1);
    channel.stop(Channel.DEFAULT);
    count = 0;
    try {
        channel.start(Channel.SND_RX_SEQ);
        count++;
    } catch (Exception x) {
        x.printStackTrace();
    }
    try {
        channel.start(Channel.SND_RX_SEQ);
        count++;
    } catch (Exception x) {
        // expected
    }
    Assert.assertEquals(count, 1);
    channel.stop(Channel.DEFAULT);
    count = 0;
    try {
        channel.start(Channel.SND_TX_SEQ);
        count++;
    } catch (Exception x) {
        x.printStackTrace();
    }
    try {
        channel.start(Channel.SND_TX_SEQ);
        count++;
    } catch (Exception x) {
        // expected
    }
    Assert.assertEquals(count, 1);
    channel.stop(Channel.DEFAULT);
}