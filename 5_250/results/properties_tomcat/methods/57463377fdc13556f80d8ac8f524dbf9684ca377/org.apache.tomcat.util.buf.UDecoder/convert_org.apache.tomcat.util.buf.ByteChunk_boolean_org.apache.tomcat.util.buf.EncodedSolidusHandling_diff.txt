private void convert(ByteChunk mb, boolean query, EncodedSolidusHandling encodedSolidusHandling) throws IOException {
    int start = mb.getOffset();
    byte[] buff = mb.getBytes();
    int end = mb.getEnd();
    int idx = ByteChunk.findByte(buff, start, end, (byte) '%');
    int idx2 = -1;
    if (query) {
        idx2 = ByteChunk.findByte(buff, start, (idx >= 0 ? idx : end), (byte) '+');
    }
    if (idx < 0 && idx2 < 0) {
        return;
    }
    // idx will be the smallest positive index ( first % or + )
    if ((idx2 >= 0 && idx2 < idx) || idx < 0) {
        idx = idx2;
    }
    for (int j = idx; j < end; j++, idx++) {
        if (buff[j] == '+' && query) {
            buff[idx] = (byte) ' ';
        } else if (buff[j] != '%') {
            buff[idx] = buff[j];
        } else {
            // read next 2 digits
            if (j + 2 >= end) {
                throw EXCEPTION_EOF;
            }
            byte b1 = buff[j + 1];
            byte b2 = buff[j + 2];
            if (!isHexDigit(b1) || !isHexDigit(b2)) {
                throw EXCEPTION_NOT_HEX_DIGIT;
            }
            j += 2;
            int res = x2c(b1, b2);
            if (res == '/') {
                switch(encodedSolidusHandling) {
                    case DECODE:
                        {
                            buff[idx] = (byte) res;
                            break;
                        }
                    case REJECT:
                        {
                            throw EXCEPTION_SLASH;
                        }
                    case PASS_THROUGH:
                        {
                            idx += 2;
                        }
                }
            } else {
                buff[idx] = (byte) res;
            }
        }
    }
    mb.setEnd(idx);
}