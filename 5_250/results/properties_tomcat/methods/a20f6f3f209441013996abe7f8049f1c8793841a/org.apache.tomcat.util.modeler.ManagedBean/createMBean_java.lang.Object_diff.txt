/**
 * Create and return a <code>ModelMBean</code> that has been
 * preconfigured with the <code>ModelMBeanInfo</code> information
 * for this managed bean, and is associated with the specified
 * managed object instance.  The returned <code>ModelMBean</code>
 * will <strong>NOT</strong> have been registered with our
 * <code>MBeanServer</code>.
 *
 * @param instance Instanced of the managed object, or <code>null</code>
 *  for no associated instance
 * @return the MBean
 * @exception InstanceNotFoundException if the managed resource
 *  object cannot be found
 * @exception MBeanException if a problem occurs instantiating the
 *  <code>ModelMBean</code> instance
 * @exception RuntimeOperationsException if a JMX runtime error occurs
 */
public DynamicMBean createMBean(Object instance) throws InstanceNotFoundException, MBeanException, RuntimeOperationsException {
    BaseModelMBean mbean = null;
    // Load the ModelMBean implementation class
    if (getClassName().equals(BASE_MBEAN)) {
        // Skip introspection
        mbean = new BaseModelMBean();
    } else {
        Class<?> clazz = null;
        Exception ex = null;
        try {
            clazz = Class.forName(getClassName());
        } catch (Exception e) {
        }
        if (clazz == null) {
            try {
                ClassLoader cl = Thread.currentThread().getContextClassLoader();
                if (cl != null)
                    clazz = cl.loadClass(getClassName());
            } catch (Exception e) {
                ex = e;
            }
        }
        if (clazz == null) {
            throw new MBeanException(ex, sm.getString("managedMBean.cannotLoadClass", getClassName()));
        }
        try {
            // Stupid - this will set the default minfo first....
            mbean = (BaseModelMBean) clazz.getConstructor().newInstance();
        } catch (RuntimeOperationsException e) {
            throw e;
        } catch (Exception e) {
            throw new MBeanException(e, sm.getString("managedMBean.cannotInstantiateClass", getClassName()));
        }
    }
    mbean.setManagedBean(this);
    // Set the managed resource (if any)
    try {
        if (instance != null)
            mbean.setManagedResource(instance, "ObjectReference");
    } catch (InstanceNotFoundException e) {
        throw e;
    }
    return mbean;
}