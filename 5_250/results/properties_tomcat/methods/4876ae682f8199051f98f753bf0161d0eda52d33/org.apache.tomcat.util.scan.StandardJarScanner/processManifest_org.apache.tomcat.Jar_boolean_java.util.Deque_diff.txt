private void processManifest(Jar jar, boolean isWebapp, Deque<URL> classPathUrlsToProcess) throws IOException {
    // Not processed for web application JARs nor if the caller did not
    // provide a Deque of URLs to append to.
    if (isWebapp || classPathUrlsToProcess == null) {
        return;
    }
    Manifest manifest = jar.getManifest();
    if (manifest != null) {
        Attributes attributes = manifest.getMainAttributes();
        String classPathAttribute = attributes.getValue("Class-Path");
        if (classPathAttribute == null) {
            return;
        }
        String[] classPathEntries = classPathAttribute.split(" ");
        for (String classPathEntry : classPathEntries) {
            classPathEntry = classPathEntry.trim();
            if (classPathEntry.length() == 0) {
                continue;
            }
            URL jarURL = jar.getJarFileURL();
            URL classPathEntryURL;
            try {
                URI jarURI = jarURL.toURI();
                /*
                     * Note: Resolving the relative URLs from the manifest has the
                     *       potential to introduce security concerns. However, since
                     *       only JARs provided by the container and NOT those provided
                     *       by web applications are processed, there should be no
                     *       issues.
                     *       If this feature is ever extended to include JARs provided
                     *       by web applications, checks should be added to ensure that
                     *       any relative URL does not step outside the web application.
                     */
                URI classPathEntryURI = jarURI.resolve(classPathEntry);
                classPathEntryURL = classPathEntryURI.toURL();
            } catch (Exception e) {
                if (log.isDebugEnabled()) {
                    log.debug(sm.getString("jarScan.invalidUri", jarURL), e);
                }
                continue;
            }
            classPathUrlsToProcess.add(classPathEntryURL);
        }
    }
}