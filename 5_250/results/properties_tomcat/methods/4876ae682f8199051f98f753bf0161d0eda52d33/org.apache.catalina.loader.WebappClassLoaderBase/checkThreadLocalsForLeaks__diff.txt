private void checkThreadLocalsForLeaks() {                                                             private void checkThreadLocalsForLeaks() {                                                          
Thread[] threads = getThreads();                                                                       Thread[] threads = getThreads();                                                                    
try {                                                                                                  try {                                                                                               
// Make the fields in the Thread class that store ThreadLocals                                         // Make the fields in the Thread class that store ThreadLocals                                      
// accessible                                                                                          // accessible                                                                                       
Field threadLocalsField = Thread.class.getDeclaredField("threadLocals");                               Field threadLocalsField = Thread.class.getDeclaredField("threadLocals");                            
threadLocalsField.setAccessible(true);                                                                 threadLocalsField.setAccessible(true);                                                              
Field inheritableThreadLocalsField = Thread.class.getDeclaredField("inheritableThreadLocals");         Field inheritableThreadLocalsField = Thread.class.getDeclaredField("inheritableThreadLocals");      
inheritableThreadLocalsField.setAccessible(true);                                                      inheritableThreadLocalsField.setAccessible(true);                                                   
// Make the underlying array of ThreadLoad.ThreadLocalMap.Entry objects                                // Make the underlying array of ThreadLoad.ThreadLocalMap.Entry objects                             
// accessible                                                                                          // accessible                                                                                       
Class&lt;?&gt; tlmClass = Class.forName("java.lang.ThreadLocal$ThreadLocalMap");                       Class&lt;?&gt; tlmClass = Class.forName("java.lang.ThreadLocal$ThreadLocalMap");                    
Field tableField = tlmClass.getDeclaredField("table");                                                 Field tableField = tlmClass.getDeclaredField("table");                                              
tableField.setAccessible(true);                                                                        tableField.setAccessible(true);                                                                     
Method expungeStaleEntriesMethod = tlmClass.getDeclaredMethod("expungeStaleEntries");                  Method expungeStaleEntriesMethod = tlmClass.getDeclaredMethod("expungeStaleEntries");               
expungeStaleEntriesMethod.setAccessible(true);                                                         expungeStaleEntriesMethod.setAccessible(true);                                                      
for (Thread thread : threads) {                                                                        for (Thread thread : threads) {                                                                     
Object threadLocalMap;                                                                                 Object threadLocalMap;                                                                              
if (thread != null) {                                                                                  if (thread != null) {                                                                               
// Clear the first map                                                                                 // Clear the first map                                                                              
threadLocalMap = threadLocalsField.get(thread);                                                        threadLocalMap = threadLocalsField.get(thread);                                                     
if (null != threadLocalMap) {                                                                          if (null != threadLocalMap) {                                                                       
expungeStaleEntriesMethod.invoke(threadLocalMap);                                                      expungeStaleEntriesMethod.invoke(threadLocalMap);                                                   
checkThreadLocalMapForLeaks(threadLocalMap, tableField);                                               checkThreadLocalMapForLeaks(threadLocalMap, tableField);                                            
}                                                                                                      }                                                                                                   
// Clear the second map                                                                                // Clear the second map                                                                             
threadLocalMap = inheritableThreadLocalsField.get(thread);                                             threadLocalMap = inheritableThreadLocalsField.get(thread);                                          
if (null != threadLocalMap) {                                                                          if (null != threadLocalMap) {                                                                       
expungeStaleEntriesMethod.invoke(threadLocalMap);                                                      expungeStaleEntriesMethod.invoke(threadLocalMap);                                                   
checkThreadLocalMapForLeaks(threadLocalMap, tableField);                                               checkThreadLocalMapForLeaks(threadLocalMap, tableField);                                            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (Throwable t) {                                                                                } catch (Throwable t) {                                                                             
JreCompat jreCompat = JreCompat.getInstance();                                                         JreCompat jreCompat = JreCompat.getInstance();                                                      
if (jreCompat.isInstanceOfInaccessibleObjectException(t)) {                                            if (jreCompat.isInstanceOfInaccessibleObjectException(t)) {                                         
// Must be running on Java 9 without the necessary command line                                        // Must be running on Java 9 without the necessary command line                                     
// options.                                                                                            // options.                                                                                         
log.warn(sm.getString("webappClassLoader.addExportsThreadLocal"));                                   | String currentModule = JreCompat.getInstance().getModuleName(this.getClass());                      
                                                                                                     | log.warn(sm.getString("webappClassLoader.addExportsThreadLocal", currentModule));                   
} else {                                                                                               } else {                                                                                            
ExceptionUtils.handleThrowable(t);                                                                     ExceptionUtils.handleThrowable(t);                                                                  
log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail", getContextName()), t);        log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail", getContextName()), t);     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
