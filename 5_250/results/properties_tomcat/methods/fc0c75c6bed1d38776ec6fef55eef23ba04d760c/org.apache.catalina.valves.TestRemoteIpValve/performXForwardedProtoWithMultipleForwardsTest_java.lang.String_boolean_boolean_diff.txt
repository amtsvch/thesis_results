private void performXForwardedProtoWithMultipleForwardsTest(String incomingHeaderValue, boolean arri   private void performXForwardedProtoWithMultipleForwardsTest(String incomingHeaderValue, boolean arri
// PREPARE                                                                                             // PREPARE                                                                                          
String incomingScheme = arrivesAsSecure ? "https" : "http";                                            String incomingScheme = arrivesAsSecure ? "https" : "http";                                         
String expectedScheme = shouldBeSecure ? "https" : "http";                                             String expectedScheme = shouldBeSecure ? "https" : "http";                                          
int incommingServerPort = arrivesAsSecure ? 8443 : 8080;                                             | int incomingServerPort = arrivesAsSecure ? 8443 : 8080;                                             
int expectedServerPort = shouldBeSecure ? 443 : 80;                                                    int expectedServerPort = shouldBeSecure ? 443 : 80;                                                 
RemoteIpValve remoteIpValve = new RemoteIpValve();                                                     RemoteIpValve remoteIpValve = new RemoteIpValve();                                                  
remoteIpValve.setRemoteIpHeader("x-forwarded-for");                                                    remoteIpValve.setRemoteIpHeader("x-forwarded-for");                                                 
remoteIpValve.setProtocolHeader("x-forwarded-proto");                                                  remoteIpValve.setProtocolHeader("x-forwarded-proto");                                               
RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();     RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();  
remoteIpValve.setNext(remoteAddrAndHostTrackerValve);                                                  remoteIpValve.setNext(remoteAddrAndHostTrackerValve);                                               
Request request = new MockRequest();                                                                   Request request = new MockRequest();                                                                
request.setCoyoteRequest(new org.apache.coyote.Request());                                             request.setCoyoteRequest(new org.apache.coyote.Request());                                          
// client ip                                                                                           // client ip                                                                                        
request.setRemoteAddr("192.168.0.10");                                                                 request.setRemoteAddr("192.168.0.10");                                                              
request.setRemoteHost("192.168.0.10");                                                                 request.setRemoteHost("192.168.0.10");                                                              
request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130");   request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-for").setString("140.211.11.130");
// protocol                                                                                            // protocol                                                                                         
request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-proto").setString(incomingHeaderVa   request.getCoyoteRequest().getMimeHeaders().addValue("x-forwarded-proto").setString(incomingHeaderVa
request.setSecure(arrivesAsSecure);                                                                    request.setSecure(arrivesAsSecure);                                                                 
request.setServerPort(incommingServerPort);                                                          | request.setServerPort(incomingServerPort);                                                          
request.getCoyoteRequest().scheme().setString(incomingScheme);                                         request.getCoyoteRequest().scheme().setString(incomingScheme);                                      
// TEST                                                                                                // TEST                                                                                             
remoteIpValve.invoke(request, null);                                                                   remoteIpValve.invoke(request, null);                                                                
// VERIFY                                                                                              // VERIFY                                                                                           
// client ip                                                                                           // client ip                                                                                        
String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();                          String actualXForwardedFor = remoteAddrAndHostTrackerValve.getForwardedFor();                       
Assert.assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwarde   Assert.assertNull("no intermediate non-trusted proxy, x-forwarded-for must be null", actualXForwarde
String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();                            String actualXForwardedBy = remoteAddrAndHostTrackerValve.getForwardedBy();                         
Assert.assertNull("no intermediate trusted proxy", actualXForwardedBy);                                Assert.assertNull("no intermediate trusted proxy", actualXForwardedBy);                             
String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();                               String actualRemoteAddr = remoteAddrAndHostTrackerValve.getRemoteAddr();                            
Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);                                 Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);                              
String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();                               String actualRemoteHost = remoteAddrAndHostTrackerValve.getRemoteHost();                            
Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);                                 Assert.assertEquals("remoteHost", "140.211.11.130", actualRemoteHost);                              
String actualPostInvokeRemoteAddr = request.getRemoteAddr();                                           String actualPostInvokeRemoteAddr = request.getRemoteAddr();                                        
Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);              Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteAddr);           
String actualPostInvokeRemoteHost = request.getRemoteHost();                                           String actualPostInvokeRemoteHost = request.getRemoteHost();                                        
Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);              Assert.assertEquals("postInvoke remoteAddr", "192.168.0.10", actualPostInvokeRemoteHost);           
// protocol                                                                                            // protocol                                                                                         
String actualScheme = remoteAddrAndHostTrackerValve.getScheme();                                       String actualScheme = remoteAddrAndHostTrackerValve.getScheme();                                    
Assert.assertEquals("x-forwarded-proto says " + expectedScheme, expectedScheme, actualScheme);         Assert.assertEquals("x-forwarded-proto says " + expectedScheme, expectedScheme, actualScheme);      
int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();                                  int actualServerPort = remoteAddrAndHostTrackerValve.getServerPort();                               
Assert.assertEquals("x-forwarded-proto says " + expectedScheme, expectedServerPort, actualServerPort   Assert.assertEquals("x-forwarded-proto says " + expectedScheme, expectedServerPort, actualServerPort
boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();                                       boolean actualSecure = remoteAddrAndHostTrackerValve.isSecure();                                    
Assert.assertEquals("x-forwarded-proto says " + expectedScheme, Boolean.valueOf(shouldBeSecure), Boo   Assert.assertEquals("x-forwarded-proto says " + expectedScheme, Boolean.valueOf(shouldBeSecure), Boo
boolean actualPostInvokeSecure = request.isSecure();                                                   boolean actualPostInvokeSecure = request.isSecure();                                                
Assert.assertEquals("postInvoke secure", Boolean.valueOf(arrivesAsSecure), Boolean.valueOf(actualPos   Assert.assertEquals("postInvoke secure", Boolean.valueOf(arrivesAsSecure), Boolean.valueOf(actualPos
int actualPostInvokeServerPort = request.getServerPort();                                              int actualPostInvokeServerPort = request.getServerPort();                                           
Assert.assertEquals("postInvoke serverPort", incommingServerPort, actualPostInvokeServerPort);       | Assert.assertEquals("postInvoke serverPort", incomingServerPort, actualPostInvokeServerPort);       
String actualPostInvokeScheme = request.getScheme();                                                   String actualPostInvokeScheme = request.getScheme();                                                
Assert.assertEquals("postInvoke scheme", incomingScheme, actualPostInvokeScheme);                      Assert.assertEquals("postInvoke scheme", incomingScheme, actualPostInvokeScheme);                   
}                                                                                                      }                                                                                                   
