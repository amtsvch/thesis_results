/**                                                                                                    /**                                                                                                 
* Process the end of this element.                                                                     * Process the end of this element.                                                                  
*                                                                                                      *                                                                                                   
* @param namespace the namespace URI of the matching element, or an                                    * @param namespace the namespace URI of the matching element, or an                                 
*   empty string if the parser is not namespace aware or the element has                               *   empty string if the parser is not namespace aware or the element has                            
*   no namespace                                                                                       *   no namespace                                                                                    
* @param name the local name if the parser is namespace aware, or just                                 * @param name the local name if the parser is namespace aware, or just                              
*   the element name otherwise                                                                         *   the element name otherwise                                                                      
*/                                                                                                     */                                                                                                  
// parameters can't trigger NPE                                                                        // parameters can't trigger NPE                                                                     
@SuppressWarnings("null")                                                                              @SuppressWarnings("null")                                                                           
@Override                                                                                              @Override                                                                                           
public void end(String namespace, String name) throws Exception {                                      public void end(String namespace, String name) throws Exception {                                   
// Retrieve or construct the parameter values array                                                    // Retrieve or construct the parameter values array                                                 
Object[] parameters = null;                                                                            Object[] parameters = null;                                                                         
if (paramCount &gt; 0) {                                                                               if (paramCount &gt; 0) {                                                                            
parameters = (Object[]) digester.popParams();                                                          parameters = (Object[]) digester.popParams();                                                       
if (digester.log.isTraceEnabled()) {                                                                   if (digester.log.isTraceEnabled()) {                                                                
for (int i = 0, size = parameters.length; i &lt; size; i++) {                                          for (int i = 0, size = parameters.length; i &lt; size; i++) {                                       
digester.log.trace("[CallMethodRule](" + i + ")" + parameters[i]);                                     digester.log.trace("[CallMethodRule](" + i + ")" + parameters[i]);                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// In the case where the parameter for the method                                                      // In the case where the parameter for the method                                                   
// is taken from an attribute, and that attribute                                                      // is taken from an attribute, and that attribute                                                   
// isn't actually defined in the source XML file,                                                      // isn't actually defined in the source XML file,                                                   
// skip the method call                                                                                // skip the method call                                                                             
if (paramCount == 1 && parameters[0] == null) {                                                        if (paramCount == 1 && parameters[0] == null) {                                                     
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
} else if (paramTypes != null && paramTypes.length != 0) {                                             } else if (paramTypes != null && paramTypes.length != 0) {                                          
// In the case where the parameter for the method                                                      // In the case where the parameter for the method                                                   
// is taken from the body text, but there is no                                                        // is taken from the body text, but there is no                                                     
// body text included in the source XML file,                                                          // body text included in the source XML file,                                                       
// skip the method call                                                                                // skip the method call                                                                             
if (bodyText == null) {                                                                                if (bodyText == null) {                                                                             
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
parameters = new Object[1];                                                                            parameters = new Object[1];                                                                         
parameters[0] = bodyText;                                                                              parameters[0] = bodyText;                                                                           
}                                                                                                      }                                                                                                   
// Construct the parameter values array we will need                                                   // Construct the parameter values array we will need                                                
// We only do the conversion if the param value is a String and                                        // We only do the conversion if the param value is a String and                                     
// the specified paramType is not String.                                                              // the specified paramType is not String.                                                           
Object[] paramValues = new Object[paramTypes.length];                                                  Object[] paramValues = new Object[paramTypes.length];                                               
for (int i = 0; i &lt; paramTypes.length; i++) {                                                       for (int i = 0; i &lt; paramTypes.length; i++) {                                                    
// convert nulls and convert stringy parameters                                                        // convert nulls and convert stringy parameters                                                     
// for non-stringy param types                                                                         // for non-stringy param types                                                                      
Object param = parameters[i];                                                                          Object param = parameters[i];                                                                       
// Tolerate null non-primitive values                                                                  // Tolerate null non-primitive values                                                               
if (null == param && !paramTypes[i].isPrimitive())                                                     if (null == param && !paramTypes[i].isPrimitive())                                                  
paramValues[i] = null;                                                                                 paramValues[i] = null;                                                                              
else if (param instanceof String && !String.class.isAssignableFrom(paramTypes[i])) {                   else if (param instanceof String && !String.class.isAssignableFrom(paramTypes[i])) {                
paramValues[i] = IntrospectionUtils.convert((String) parameters[i], paramTypes[i]);                    paramValues[i] = IntrospectionUtils.convert((String) parameters[i], paramTypes[i]);                 
} else {                                                                                               } else {                                                                                            
paramValues[i] = parameters[i];                                                                        paramValues[i] = parameters[i];                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Determine the target object for the method call                                                     // Determine the target object for the method call                                                  
Object target;                                                                                         Object target;                                                                                      
if (targetOffset &gt;= 0) {                                                                            if (targetOffset &gt;= 0) {                                                                         
target = digester.peek(targetOffset);                                                                  target = digester.peek(targetOffset);                                                               
} else {                                                                                               } else {                                                                                            
target = digester.peek(digester.getCount() + targetOffset);                                            target = digester.peek(digester.getCount() + targetOffset);                                         
}                                                                                                      }                                                                                                   
if (target == null) {                                                                                  if (target == null) {                                                                               
StringBuilder sb = new StringBuilder();                                                                StringBuilder sb = new StringBuilder();                                                             
sb.append("[CallMethodRule]{");                                                                        sb.append("[CallMethodRule]{");                                                                     
sb.append(digester.match);                                                                             sb.append(digester.match);                                                                          
sb.append("} Call target is null (");                                                                  sb.append("} Call target is null (");                                                               
sb.append("targetOffset=");                                                                            sb.append("targetOffset=");                                                                         
sb.append(targetOffset);                                                                               sb.append(targetOffset);                                                                            
sb.append(",stackdepth=");                                                                             sb.append(",stackdepth=");                                                                          
sb.append(digester.getCount());                                                                        sb.append(digester.getCount());                                                                     
sb.append(')');                                                                                        sb.append(')');                                                                                     
throw new org.xml.sax.SAXException(sb.toString());                                                     throw new org.xml.sax.SAXException(sb.toString());                                                  
}                                                                                                      }                                                                                                   
// Invoke the required method on the top object                                                        // Invoke the required method on the top object                                                     
if (digester.log.isDebugEnabled()) {                                                                   if (digester.log.isDebugEnabled()) {                                                                
StringBuilder sb = new StringBuilder("[CallMethodRule]{");                                             StringBuilder sb = new StringBuilder("[CallMethodRule]{");                                          
sb.append(digester.match);                                                                             sb.append(digester.match);                                                                          
sb.append("} Call ");                                                                                  sb.append("} Call ");                                                                               
sb.append(target.getClass().getName());                                                                sb.append(target.getClass().getName());                                                             
sb.append('.');                                                                                        sb.append('.');                                                                                     
sb.append(methodName);                                                                                 sb.append(methodName);                                                                              
sb.append('(');                                                                                        sb.append('(');                                                                                     
for (int i = 0; i &lt; paramValues.length; i++) {                                                      for (int i = 0; i &lt; paramValues.length; i++) {                                                   
if (i &gt; 0) {                                                                                        if (i &gt; 0) {                                                                                     
sb.append(',');                                                                                        sb.append(',');                                                                                     
}                                                                                                      }                                                                                                   
if (paramValues[i] == null) {                                                                          if (paramValues[i] == null) {                                                                       
sb.append("null");                                                                                     sb.append("null");                                                                                  
} else {                                                                                               } else {                                                                                            
sb.append(paramValues[i].toString());                                                                  sb.append(paramValues[i].toString());                                                               
}                                                                                                      }                                                                                                   
sb.append('/');                                                                                        sb.append('/');                                                                                     
if (paramTypes[i] == null) {                                                                           if (paramTypes[i] == null) {                                                                        
sb.append("null");                                                                                     sb.append("null");                                                                                  
} else {                                                                                               } else {                                                                                            
sb.append(paramTypes[i].getName());                                                                    sb.append(paramTypes[i].getName());                                                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
sb.append(')');                                                                                        sb.append(')');                                                                                     
digester.log.debug(sb.toString());                                                                     digester.log.debug(sb.toString());                                                                  
}                                                                                                      }                                                                                                   
Object result = IntrospectionUtils.callMethodN(target, methodName, paramValues, paramTypes);           Object result = IntrospectionUtils.callMethodN(target, methodName, paramValues, paramTypes);        
processMethodCallResult(result);                                                                       processMethodCallResult(result);                                                                    
StringBuilder code = digester.getGeneratedCode();                                                      StringBuilder code = digester.getGeneratedCode();                                                   
if (code != null) {                                                                                    if (code != null) {                                                                                 
code.append(digester.toVariableName(target)).append('.').append(methodName);                           code.append(digester.toVariableName(target)).append('.').append(methodName);                        
code.append('(');                                                                                      code.append('(');                                                                                   
for (int i = 0; i &lt; paramValues.length; i++) {                                                      for (int i = 0; i &lt; paramValues.length; i++) {                                                   
if (i &gt; 0) {                                                                                        if (i &gt; 0) {                                                                                     
code.append(", ");                                                                                     code.append(", ");                                                                                  
}                                                                                                      }                                                                                                   
if (bodyText != null) {                                                                                if (bodyText != null) {                                                                             
code.append("\"").append(bodyText).append("\"");                                                     | StringBuilder bodyTextParam = new StringBuilder();                                                  
                                                                                                     | for (String bodyPart : bodyText.split("\n")) {                                                      
                                                                                                     | bodyTextParam.append(bodyPart.trim()).append(' ');                                                  
                                                                                                     | }                                                                                                   
                                                                                                     | code.append("\"").append(bodyTextParam.toString().trim().replace("\"", "\\\"")).append("\"");       
} else if (paramValues[i] instanceof String) {                                                         } else if (paramValues[i] instanceof String) {                                                      
code.append("\"").append(paramValues[i].toString()).append("\"");                                      code.append("\"").append(paramValues[i].toString()).append("\"");                                   
} else {                                                                                               } else {                                                                                            
code.append(digester.toVariableName(paramValues[i]));                                                  code.append(digester.toVariableName(paramValues[i]));                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
code.append(");");                                                                                     code.append(");");                                                                                  
code.append(System.lineSeparator());                                                                   code.append(System.lineSeparator());                                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
