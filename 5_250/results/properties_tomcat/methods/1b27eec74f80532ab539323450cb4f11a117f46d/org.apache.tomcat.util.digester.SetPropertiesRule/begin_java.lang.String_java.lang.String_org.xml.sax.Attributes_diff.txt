/**                                                                                                    /**                                                                                                 
* Process the beginning of this element.                                                               * Process the beginning of this element.                                                            
*                                                                                                      *                                                                                                   
* @param namespace the namespace URI of the matching element, or an                                    * @param namespace the namespace URI of the matching element, or an                                 
*   empty string if the parser is not namespace aware or the element has                               *   empty string if the parser is not namespace aware or the element has                            
*   no namespace                                                                                       *   no namespace                                                                                    
* @param theName the local name if the parser is namespace aware, or just                              * @param theName the local name if the parser is namespace aware, or just                           
*   the element name otherwise                                                                         *   the element name otherwise                                                                      
* @param attributes The attribute list for this element                                                * @param attributes The attribute list for this element                                             
*/                                                                                                     */                                                                                                  
@Override                                                                                              @Override                                                                                           
public void begin(String namespace, String theName, Attributes attributes) throws Exception {          public void begin(String namespace, String theName, Attributes attributes) throws Exception {       
// Populate the corresponding properties of the top object                                             // Populate the corresponding properties of the top object                                          
Object top = digester.peek();                                                                          Object top = digester.peek();                                                                       
if (digester.log.isDebugEnabled()) {                                                                   if (digester.log.isDebugEnabled()) {                                                                
if (top != null) {                                                                                     if (top != null) {                                                                                  
digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set " + top.getClass().getName() + "   digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set " + top.getClass().getName() + "
} else {                                                                                               } else {                                                                                            
digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set NULL properties");                 digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set NULL properties");              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
StringBuilder code = digester.getGeneratedCode();                                                      StringBuilder code = digester.getGeneratedCode();                                                   
String variableName = null;                                                                            String variableName = null;                                                                         
if (code != null) {                                                                                    if (code != null) {                                                                                 
variableName = digester.toVariableName(top);                                                           variableName = digester.toVariableName(top);                                                        
}                                                                                                      }                                                                                                   
for (int i = 0; i &lt; attributes.getLength(); i++) {                                                  for (int i = 0; i &lt; attributes.getLength(); i++) {                                               
String name = attributes.getLocalName(i);                                                              String name = attributes.getLocalName(i);                                                           
if (name.isEmpty()) {                                                                                  if (name.isEmpty()) {                                                                               
name = attributes.getQName(i);                                                                         name = attributes.getQName(i);                                                                      
}                                                                                                      }                                                                                                   
String value = attributes.getValue(i);                                                                 String value = attributes.getValue(i);                                                              
if (digester.log.isDebugEnabled()) {                                                                   if (digester.log.isDebugEnabled()) {                                                                
digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Setting property '" + name + "' to '   digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Setting property '" + name + "' to '
}                                                                                                      }                                                                                                   
if (!digester.isFakeAttribute(top, name) && (excludes == null || (excludes != null && !excludes.cont | if (!digester.isFakeAttribute(top, name) && (excludes == null || !excludes.containsKey(name))) {    
StringBuilder actualMethod = null;                                                                     StringBuilder actualMethod = null;                                                                  
if (code != null) {                                                                                    if (code != null) {                                                                                 
actualMethod = new StringBuilder();                                                                    actualMethod = new StringBuilder();                                                                 
}                                                                                                      }                                                                                                   
if (!IntrospectionUtils.setProperty(top, name, value, true, actualMethod)) {                           if (!IntrospectionUtils.setProperty(top, name, value, true, actualMethod)) {                        
if (digester.getRulesValidation() && !"optional".equals(name)) {                                       if (digester.getRulesValidation() && !"optional".equals(name)) {                                    
digester.log.warn(sm.getString("rule.noProperty", digester.match, name, value));                       digester.log.warn(sm.getString("rule.noProperty", digester.match, name, value));                    
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
if (code != null) {                                                                                    if (code != null) {                                                                                 
code.append(variableName).append(".").append(actualMethod).append(';');                                code.append(variableName).append(".").append(actualMethod).append(';');                             
code.append(System.lineSeparator());                                                                   code.append(System.lineSeparator());                                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (top instanceof Listener) {                                                                         if (top instanceof Listener) {                                                                      
((Listener) top).endSetPropertiesRule();                                                               ((Listener) top).endSetPropertiesRule();                                                            
if (code != null) {                                                                                    if (code != null) {                                                                                 
code.append("((org.apache.tomcat.util.digester.SetPropertiesRule.Listener) ");                         code.append("((org.apache.tomcat.util.digester.SetPropertiesRule.Listener) ");                      
code.append(variableName).append(").endSetPropertiesRule();");                                         code.append(variableName).append(").endSetPropertiesRule();");                                      
code.append(System.lineSeparator());                                                                   code.append(System.lineSeparator());                                                                
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
