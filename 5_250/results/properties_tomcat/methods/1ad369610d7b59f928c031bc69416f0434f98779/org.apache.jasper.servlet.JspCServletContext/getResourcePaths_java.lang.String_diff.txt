/**
 * Return the set of resource paths for the "directory" at the
 * specified context path.
 *
 * @param path Context-relative base path
 */
@Override
public Set<String> getResourcePaths(String path) {
    Set<String> thePaths = new HashSet<>();
    if (!path.endsWith("/")) {
        path += "/";
    }
    String basePath = getRealPath(path);
    if (basePath != null) {
        File theBaseDir = new File(basePath);
        if (theBaseDir.isDirectory()) {
            String[] theFiles = theBaseDir.list();
            if (theFiles != null) {
                for (String theFile : theFiles) {
                    File testFile = new File(basePath + File.separator + theFile);
                    if (testFile.isFile()) {
                        thePaths.add(path + theFile);
                    } else if (testFile.isDirectory()) {
                        thePaths.add(path + theFile + "/");
                    }
                }
            }
        }
    }
    // During initialisation, getResourcePaths() is called before
    // resourceJARs is initialised
    if (resourceJARs != null) {
        String jarPath = "META-INF/resources" + path;
        for (URL jarUrl : resourceJARs) {
            try (Jar jar = JarFactory.newInstance(jarUrl)) {
                jar.nextEntry();
                for (String entryName = jar.getEntryName(); entryName != null; jar.nextEntry(), entryName = jar.getEntryName()) {
                    if (entryName.startsWith(jarPath) && entryName.length() > jarPath.length()) {
                        // Let the Set implementation handle duplicates
                        int sep = entryName.indexOf("/", jarPath.length());
                        if (sep < 0) {
                            // This is a file - strip leading "META-INF/resources"
                            thePaths.add(entryName.substring(18));
                        } else {
                            // This is a directory - strip leading "META-INF/resources"
                            thePaths.add(entryName.substring(18, sep + 1));
                        }
                    }
                }
            } catch (IOException e) {
                log(e.getMessage(), e);
            }
        }
    }
    return thePaths;
}