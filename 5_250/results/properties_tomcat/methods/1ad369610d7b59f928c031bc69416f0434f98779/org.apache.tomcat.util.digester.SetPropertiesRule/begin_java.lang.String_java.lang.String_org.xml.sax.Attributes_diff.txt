/**
 * Process the beginning of this element.
 *
 * @param namespace the namespace URI of the matching element, or an
 *   empty string if the parser is not namespace aware or the element has
 *   no namespace
 * @param theName the local name if the parser is namespace aware, or just
 *   the element name otherwise
 * @param attributes The attribute list for this element
 */
@Override
public void begin(String namespace, String theName, Attributes attributes) throws Exception {
    // Populate the corresponding properties of the top object
    Object top = digester.peek();
    if (digester.log.isDebugEnabled()) {
        if (top != null) {
            digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set " + top.getClass().getName() + " properties");
        } else {
            digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Set NULL properties");
        }
    }
    StringBuilder code = digester.getGeneratedCode();
    String variableName = null;
    if (code != null) {
        variableName = digester.toVariableName(top);
    }
    for (int i = 0; i < attributes.getLength(); i++) {
        String name = attributes.getLocalName(i);
        if (name.isEmpty()) {
            name = attributes.getQName(i);
        }
        String value = attributes.getValue(i);
        if (digester.log.isDebugEnabled()) {
            digester.log.debug("[SetPropertiesRule]{" + digester.match + "} Setting property '" + name + "' to '" + value + "'");
        }
        if (!digester.isFakeAttribute(top, name) && (excludes == null || (excludes != null && !excludes.containsKey(name)))) {
            StringBuilder actualMethod = null;
            if (code != null) {
                actualMethod = new StringBuilder();
            }
            if (!IntrospectionUtils.setProperty(top, name, value, true, actualMethod)) {
                if (digester.getRulesValidation() && !"optional".equals(name)) {
                    digester.log.warn(sm.getString("rule.noProperty", digester.match, name, value));
                }
            } else {
                if (code != null) {
                    code.append(variableName).append(".").append(actualMethod).append(';');
                    code.append(System.lineSeparator());
                }
            }
        }
    }
    if (top instanceof Listener) {
        ((Listener) top).endSetPropertiesRule();
        if (code != null) {
            code.append("((org.apache.tomcat.util.digester.SetPropertiesRule.Listener) ");
            code.append(variableName).append(").endSetPropertiesRule();");
            code.append(System.lineSeparator());
        }
    }
}