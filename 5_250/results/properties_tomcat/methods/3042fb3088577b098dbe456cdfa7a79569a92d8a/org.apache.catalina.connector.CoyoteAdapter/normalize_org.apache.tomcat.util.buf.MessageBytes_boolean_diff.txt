/**                                                                                                    /**                                                                                                 
* This method normalizes "\", "//", "/./" and "/../".                                                  * This method normalizes "\", "//", "/./" and "/../".                                               
*                                                                                                      *                                                                                                   
* @param uriMB URI to be normalized                                                                    * @param uriMB URI to be normalized                                                                 
* @param allowBackslash &lt;code&gt;true&lt;/code&gt; if backslash characters are allowed in URLs      * @param allowBackslash &lt;code&gt;true&lt;/code&gt; if backslash characters are allowed in URLs   
*                                                                                                      *                                                                                                   
* @return &lt;code&gt;false&lt;/code&gt; if normalizing this URI would require going                   * @return &lt;code&gt;false&lt;/code&gt; if normalizing this URI would require going                
*         above the root, or if the URI contains a null byte, otherwise                                *         above the root, or if the URI contains a null byte, otherwise                             
*         &lt;code&gt;true&lt;/code&gt;                                                                *         &lt;code&gt;true&lt;/code&gt;                                                             
*/                                                                                                     */                                                                                                  
public static boolean normalize(MessageBytes uriMB, boolean allowBackslash) {                          public static boolean normalize(MessageBytes uriMB, boolean allowBackslash) {                       
ByteChunk uriBC = uriMB.getByteChunk();                                                                ByteChunk uriBC = uriMB.getByteChunk();                                                             
final byte[] b = uriBC.getBytes();                                                                     final byte[] b = uriBC.getBytes();                                                                  
final int start = uriBC.getStart();                                                                    final int start = uriBC.getStart();                                                                 
int end = uriBC.getEnd();                                                                              int end = uriBC.getEnd();                                                                           
// An empty URL is not acceptable                                                                      // An empty URL is not acceptable                                                                   
if (start == end) {                                                                                    if (start == end) {                                                                                 
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
int pos = 0;                                                                                           int pos = 0;                                                                                        
int index = 0;                                                                                         int index = 0;                                                                                      
// The URL must start with '/' (or '\' that will be replaced soon)                                     // The URL must start with '/' (or '\' that will be replaced soon)                                  
if (b[start] != (byte) '/' && b[start] != (byte) '\\') {                                               if (b[start] != (byte) '/' && b[start] != (byte) '\\') {                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
// Replace '\' with '/'                                                                                // Replace '\' with '/'                                                                             
// Check for null byte                                                                                 // Check for null byte                                                                              
for (pos = start; pos &lt; end; pos++) {                                                               for (pos = start; pos &lt; end; pos++) {                                                            
if (b[pos] == (byte) '\\') {                                                                           if (b[pos] == (byte) '\\') {                                                                        
if (allowBackslash) {                                                                                  if (allowBackslash) {                                                                               
b[pos] = (byte) '/';                                                                                   b[pos] = (byte) '/';                                                                                
} else {                                                                                               } else {                                                                                            
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                    | } else if (b[pos] == (byte) 0) {                                                                    
if (b[pos] == (byte) 0) {                                                                            |                                                                                                     
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Replace "//" with "/"                                                                               // Replace "//" with "/"                                                                            
for (pos = start; pos &lt; (end - 1); pos++) {                                                         for (pos = start; pos &lt; (end - 1); pos++) {                                                      
if (b[pos] == (byte) '/') {                                                                            if (b[pos] == (byte) '/') {                                                                         
while ((pos + 1 &lt; end) && (b[pos + 1] == (byte) '/')) {                                             while ((pos + 1 &lt; end) && (b[pos + 1] == (byte) '/')) {                                          
copyBytes(b, pos, pos + 1, end - pos - 1);                                                             copyBytes(b, pos, pos + 1, end - pos - 1);                                                          
end--;                                                                                                 end--;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// If the URI ends with "/." or "/..", then we append an extra "/"                                     // If the URI ends with "/." or "/..", then we append an extra "/"                                  
// Note: It is possible to extend the URI by 1 without any side effect                                 // Note: It is possible to extend the URI by 1 without any side effect                              
// as the next character is a non-significant WS.                                                      // as the next character is a non-significant WS.                                                   
if (((end - start) &gt;= 2) && (b[end - 1] == (byte) '.')) {                                           if (((end - start) &gt;= 2) && (b[end - 1] == (byte) '.')) {                                        
if ((b[end - 2] == (byte) '/') || ((b[end - 2] == (byte) '.') && (b[end - 3] == (byte) '/'))) {        if ((b[end - 2] == (byte) '/') || ((b[end - 2] == (byte) '.') && (b[end - 3] == (byte) '/'))) {     
b[end] = (byte) '/';                                                                                   b[end] = (byte) '/';                                                                                
end++;                                                                                                 end++;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
uriBC.setEnd(end);                                                                                     uriBC.setEnd(end);                                                                                  
index = 0;                                                                                             index = 0;                                                                                          
// Resolve occurrences of "/./" in the normalized path                                                 // Resolve occurrences of "/./" in the normalized path                                              
while (true) {                                                                                         while (true) {                                                                                      
index = uriBC.indexOf("/./", 0, 3, index);                                                             index = uriBC.indexOf("/./", 0, 3, index);                                                          
if (index &lt; 0) {                                                                                    if (index &lt; 0) {                                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
copyBytes(b, start + index, start + index + 2, end - start - index - 2);                               copyBytes(b, start + index, start + index + 2, end - start - index - 2);                            
end = end - 2;                                                                                         end = end - 2;                                                                                      
uriBC.setEnd(end);                                                                                     uriBC.setEnd(end);                                                                                  
}                                                                                                      }                                                                                                   
index = 0;                                                                                             index = 0;                                                                                          
// Resolve occurrences of "/../" in the normalized path                                                // Resolve occurrences of "/../" in the normalized path                                             
while (true) {                                                                                         while (true) {                                                                                      
index = uriBC.indexOf("/../", 0, 4, index);                                                            index = uriBC.indexOf("/../", 0, 4, index);                                                         
if (index &lt; 0) {                                                                                    if (index &lt; 0) {                                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Prevent from going outside our context                                                              // Prevent from going outside our context                                                           
if (index == 0) {                                                                                      if (index == 0) {                                                                                   
return false;                                                                                          return false;                                                                                       
}                                                                                                      }                                                                                                   
int index2 = -1;                                                                                       int index2 = -1;                                                                                    
for (pos = start + index - 1; (pos &gt;= 0) && (index2 &lt; 0); pos--) {                               for (pos = start + index - 1; (pos &gt;= 0) && (index2 &lt; 0); pos--) {                            
if (b[pos] == (byte) '/') {                                                                            if (b[pos] == (byte) '/') {                                                                         
index2 = pos;                                                                                          index2 = pos;                                                                                       
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
copyBytes(b, start + index2, start + index + 3, end - start - index - 3);                              copyBytes(b, start + index2, start + index + 3, end - start - index - 3);                           
end = end + index2 - index - 3;                                                                        end = end + index2 - index - 3;                                                                     
uriBC.setEnd(end);                                                                                     uriBC.setEnd(end);                                                                                  
index = index2;                                                                                        index = index2;                                                                                     
}                                                                                                      }                                                                                                   
return true;                                                                                           return true;                                                                                        
}                                                                                                      }                                                                                                   
