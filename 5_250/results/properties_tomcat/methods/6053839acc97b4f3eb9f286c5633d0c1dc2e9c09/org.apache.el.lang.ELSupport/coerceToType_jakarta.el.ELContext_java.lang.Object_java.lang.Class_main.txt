public static final Object coerceToType(final ELContext ctx, final Object obj, final Class<?> type) throws ELException {
    if (ctx != null) {
        boolean originalIsPropertyResolved = ctx.isPropertyResolved();
        try {
            Object result = ctx.getELResolver().convertToType(ctx, obj, type);
            if (ctx.isPropertyResolved()) {
                return result;
            }
        } finally {
            ctx.setPropertyResolved(originalIsPropertyResolved);
        }
    }
    if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass()))) {
        return obj;
    }
    if (!COERCE_TO_ZERO) {
        if (obj == null && !type.isPrimitive() && !String.class.isAssignableFrom(type)) {
            return null;
        }
    }
    if (String.class.equals(type)) {
        return coerceToString(ctx, obj);
    }
    if (ELArithmetic.isNumberType(type)) {
        return coerceToNumber(ctx, obj, type);
    }
    if (Character.class.equals(type) || Character.TYPE == type) {
        return coerceToCharacter(ctx, obj);
    }
    if (Boolean.class.equals(type) || Boolean.TYPE == type) {
        return coerceToBoolean(ctx, obj, Boolean.TYPE == type);
    }
    if (type.isEnum()) {
        return coerceToEnum(ctx, obj, type);
    }
    // new to spec
    if (obj == null)
        return null;
    if (obj instanceof String) {
        String str = (String) obj;
        PropertyEditor editor = PropertyEditorManager.findEditor(type);
        if (editor == null) {
            if (str.isEmpty()) {
                return null;
            }
            throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type));
        } else {
            try {
                editor.setAsText(str);
                return editor.getValue();
            } catch (RuntimeException e) {
                if (str.isEmpty()) {
                    return null;
                }
                throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type), e);
            }
        }
    }
    // Handle special case because the syntax for the empty set is the same
    // for an empty map. The parser will always parse {} as an empty set.
    if (obj instanceof Set && type == Map.class && ((Set<?>) obj).isEmpty()) {
        return Collections.EMPTY_MAP;
    }
    // Handle arrays
    if (type.isArray() && obj.getClass().isArray()) {
        return coerceToArray(ctx, obj, type);
    }
    throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), type));
}