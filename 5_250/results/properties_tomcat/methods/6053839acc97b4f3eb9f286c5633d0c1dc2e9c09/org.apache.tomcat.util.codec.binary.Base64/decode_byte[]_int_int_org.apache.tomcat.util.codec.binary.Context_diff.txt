// Implementation of the Encoder Interface
/**
 * <p>
 * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
 * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
 * call is not necessary when decoding, but it doesn't hurt, either.
 * </p>
 * <p>
 * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
 * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
 * garbage-out philosophy: it will not check the provided data for validity.
 * </p>
 * <p>
 * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
 * https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
 * </p>
 *
 * @param in
 *            byte[] array of ascii data to base64 decode.
 * @param inPos
 *            Position to start reading data from.
 * @param inAvail
 *            Amount of bytes available from input for decoding.
 * @param context
 *            the context to be used
 */
@Override
void decode(final byte[] in, int inPos, final int inAvail, final Context context) {
    if (context.eof) {
        return;
    }
    if (inAvail < 0) {
        context.eof = true;
    }
    for (int i = 0; i < inAvail; i++) {
        final byte[] buffer = ensureBufferSize(decodeSize, context);
        final byte b = in[inPos++];
        if (b == pad) {
            // We're done.
            context.eof = true;
            break;
        }
        if (b >= 0 && b < decodeTable.length) {
            final int result = decodeTable[b];
            if (result >= 0) {
                context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
                context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
                if (context.modulus == 0) {
                    buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
                    buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
                    buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
                }
            }
        }
    }
    // Two forms of EOF as far as base64 decoder is concerned: actual
    // EOF (-1) and first time '=' character is encountered in stream.
    // This approach makes the '=' padding characters completely optional.
    if (context.eof && context.modulus != 0) {
        final byte[] buffer = ensureBufferSize(decodeSize, context);
        // We have some spare bits remaining
        // Output all whole multiples of 8 bits and ignore the rest
        switch(context.modulus) {
            // case 0 : // impossible, as excluded above
            // case 1 : // 6 bits - invalid - use default below
            case // 12 bits = 8 + 4
            2:
                validateCharacter(MASK_4BITS, context);
                // dump the extra 4 bits
                context.ibitWorkArea = context.ibitWorkArea >> 4;
                buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
                break;
            case // 18 bits = 8 + 8 + 2
            3:
                validateCharacter(MASK_2BITS, context);
                // dump 2 bits
                context.ibitWorkArea = context.ibitWorkArea >> 2;
                buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
                buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
                break;
            default:
                throw new IllegalStateException(sm.getString("base64.impossibleModulus", Integer.valueOf(context.modulus)));
        }
    }
}