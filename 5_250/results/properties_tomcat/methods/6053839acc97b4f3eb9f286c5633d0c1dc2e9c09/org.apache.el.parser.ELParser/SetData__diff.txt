/*
 * Note that both an empty Set and an empty Map are represented by {}. The
 * parser will always parse {} as an empty Set and special handling is required
 * to convert it to an empty Map when appropriate.
 */
final public void SetData() throws ParseException {
    /*@bgen(jjtree) SetData */
    AstSetData jjtn000 = new AstSetData(JJTSETDATA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
        jj_consume_token(START_SET_OR_MAP);
        switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case START_SET_OR_MAP:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case LPAREN:
            case LBRACK:
            case NOT0:
            case NOT1:
            case EMPTY:
            case MINUS:
            case IDENTIFIER:
                Expression();
                label_16: while (true) {
                    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[42] = jj_gen;
                            break label_16;
                    }
                    jj_consume_token(COMMA);
                    Expression();
                }
                break;
            default:
                jj_la1[43] = jj_gen;
                ;
        }
        jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
        if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
        } else {
            jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
            {
                if (true)
                    throw (RuntimeException) jjte000;
            }
        }
        if (jjte000 instanceof ParseException) {
            {
                if (true)
                    throw (ParseException) jjte000;
            }
        }
        {
            if (true)
                throw (Error) jjte000;
        }
    } finally {
        if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
        }
    }
}