/**
 * Utility method to enable sub-classes to easily register additional
 * components that don't implement {@link JmxEnabled} with an MBean server.
 * <br>
 * Note: This method should only be used once {@link #initInternal()} has
 * been called and before {@link #destroyInternal()} has been called.
 *
 * @param obj                       The object the register
 * @param objectNameKeyProperties   The key properties component of the
 *                                  object name to use to register the
 *                                  object
 *
 * @return  The name used to register the object
 */
protected final ObjectName register(Object obj, String objectNameKeyProperties) {
    // Construct an object name with the right domain
    StringBuilder name = new StringBuilder(getDomain());
    name.append(':');
    name.append(objectNameKeyProperties);
    ObjectName on = null;
    try {
        on = new ObjectName(name.toString());
        Registry.getRegistry(null, null).registerComponent(obj, on, null);
    } catch (MalformedObjectNameException e) {
        log.warn(sm.getString("lifecycleMBeanBase.registerFail", obj, name), e);
    } catch (Exception e) {
        log.warn(sm.getString("lifecycleMBeanBase.registerFail", obj, name), e);
    }
    return on;
}