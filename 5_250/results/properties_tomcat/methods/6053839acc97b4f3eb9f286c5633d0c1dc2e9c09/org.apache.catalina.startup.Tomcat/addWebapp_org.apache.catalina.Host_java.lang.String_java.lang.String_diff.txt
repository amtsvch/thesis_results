/**
 * This is equivalent to adding a web application to a Host's appBase
 * (usually Tomcat's webapps directory). By default, the equivalent of the
 * default web.xml will be applied to the web application (see
 * {@link #initWebappDefaults(String)}). This may be prevented by calling
 * {@link #setAddDefaultWebXmlToWebapp(boolean)} with {@code false}. Any
 * <code>WEB-INF/web.xml</code> and <code>META-INF/context.xml</code>
 * packaged with the application will always be processed and normal web
 * fragment and {@link jakarta.servlet.ServletContainerInitializer} processing
 * will always be applied.
 *
 * @param host        The host in which the context will be deployed
 * @param contextPath The context mapping to use, "" for root context.
 * @param docBase     Base directory for the context, for static files. Must
 *                        exist, relative to the server home
 *
 * @return the deployed context
 */
public Context addWebapp(Host host, String contextPath, String docBase) {
    LifecycleListener listener = null;
    try {
        Class<?> clazz = Class.forName(getHost().getConfigClass());
        listener = (LifecycleListener) clazz.getConstructor().newInstance();
    } catch (ReflectiveOperationException e) {
        // Wrap in IAE since we can't easily change the method signature to
        // to throw the specific checked exceptions
        throw new IllegalArgumentException(e);
    }
    return addWebapp(host, contextPath, docBase, listener);
}