/**
 * Bind an object to this session, using the specified name.  If an object
 * of the same name is already bound to this session, the object is
 * replaced.
 * <p>
 * After this method executes, and if the object implements
 * <code>HttpSessionBindingListener</code>, the container calls
 * <code>valueBound()</code> on the object.
 *
 * @param name Name to which the object is bound, cannot be null
 * @param value Object to be bound, cannot be null
 * @param notify whether to notify session listeners
 * @exception IllegalArgumentException if an attempt is made to add a
 *  non-serializable object in an environment marked distributable.
 * @exception IllegalStateException if this method is called on an
 *  invalidated session
 */
public void setAttribute(String name, Object value, boolean notify) {
    // Name cannot be null
    if (name == null) {
        throw new IllegalArgumentException(sm.getString("standardSession.setAttribute.namenull"));
    }
    // Null value is the same as removeAttribute()
    if (value == null) {
        removeAttribute(name);
        return;
    }
    // Validate our current state
    if (!isValidInternal()) {
        throw new IllegalStateException(sm.getString("standardSession.setAttribute.ise", getIdInternal()));
    }
    Context context = manager.getContext();
    if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {
        throw new IllegalArgumentException(sm.getString("standardSession.setAttribute.iae", name));
    }
    // Construct an event with the new value
    HttpSessionBindingEvent event = null;
    // Call the valueBound() method if necessary
    if (notify && value instanceof HttpSessionBindingListener) {
        // Don't call any notification if replacing with the same value
        // unless configured to do so
        Object oldValue = attributes.get(name);
        if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {
            event = new HttpSessionBindingEvent(getSession(), name, value);
            try {
                ((HttpSessionBindingListener) value).valueBound(event);
            } catch (Throwable t) {
                manager.getContext().getLogger().error(sm.getString("standardSession.bindingEvent"), t);
            }
        }
    }
    // Replace or add this attribute
    Object unbound = attributes.put(name, value);
    // Call the valueUnbound() method if necessary
    if (notify && unbound instanceof HttpSessionBindingListener) {
        // Don't call any notification if replacing with the same value
        // unless configured to do so
        if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {
            try {
                ((HttpSessionBindingListener) unbound).valueUnbound(new HttpSessionBindingEvent(getSession(), name));
            } catch (Throwable t) {
                ExceptionUtils.handleThrowable(t);
                manager.getContext().getLogger().error(sm.getString("standardSession.bindingEvent"), t);
            }
        }
    }
    if (!notify) {
        return;
    }
    // Notify interested application event listeners
    Object[] listeners = context.getApplicationEventListeners();
    if (listeners == null) {
        return;
    }
    for (Object o : listeners) {
        if (!(o instanceof HttpSessionAttributeListener)) {
            continue;
        }
        HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;
        try {
            if (unbound != null) {
                if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {
                    context.fireContainerEvent("beforeSessionAttributeReplaced", listener);
                    if (event == null) {
                        event = new HttpSessionBindingEvent(getSession(), name, unbound);
                    }
                    listener.attributeReplaced(event);
                    context.fireContainerEvent("afterSessionAttributeReplaced", listener);
                }
            } else {
                context.fireContainerEvent("beforeSessionAttributeAdded", listener);
                if (event == null) {
                    event = new HttpSessionBindingEvent(getSession(), name, value);
                }
                listener.attributeAdded(event);
                context.fireContainerEvent("afterSessionAttributeAdded", listener);
            }
        } catch (Throwable t) {
            ExceptionUtils.handleThrowable(t);
            try {
                if (unbound != null) {
                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {
                        context.fireContainerEvent("afterSessionAttributeReplaced", listener);
                    }
                } else {
                    context.fireContainerEvent("afterSessionAttributeAdded", listener);
                }
            } catch (Exception e) {
                // Ignore
            }
            manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"), t);
        }
    }
}