@SuppressWarnings("unchecked")                                                                         @SuppressWarnings("unchecked")                                                                      
protected void parsePods(Reader reader, List&lt;MemberImpl&gt; members) {                              protected void parsePods(Reader reader, List&lt;MemberImpl&gt; members) {                           
JSONParser parser = new JSONParser(reader);                                                            JSONParser parser = new JSONParser(reader);                                                         
try {                                                                                                  try {                                                                                               
LinkedHashMap&lt;String, Object&gt; json = parser.object();                                            LinkedHashMap&lt;String, Object&gt; json = parser.object();                                         
Object itemsObject = json.get("items");                                                                Object itemsObject = json.get("items");                                                             
if (!(itemsObject instanceof List&lt;?&gt;)) {                                                         if (!(itemsObject instanceof List&lt;?&gt;)) {                                                      
log.error(sm.getString("kubernetesMembershipProvider.invalidPodsList", "no items"));                   log.error(sm.getString("kubernetesMembershipProvider.invalidPodsList", "no items"));                
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
List&lt;Object&gt; items = (List&lt;Object&gt;) itemsObject;                                           List&lt;Object&gt; items = (List&lt;Object&gt;) itemsObject;                                        
for (Object podObject : items) {                                                                       for (Object podObject : items) {                                                                    
if (!(podObject instanceof LinkedHashMap&lt;?, ?&gt;)) {                                               if (!(podObject instanceof LinkedHashMap&lt;?, ?&gt;)) {                                            
log.warn(sm.getString("kubernetesMembershipProvider.invalidPod"));                                   | log.warn(sm.getString("kubernetesMembershipProvider.invalidPod", "item"));                          
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
LinkedHashMap&lt;String, Object&gt; pod = (LinkedHashMap&lt;String, Object&gt;) podObject;             LinkedHashMap&lt;String, Object&gt; pod = (LinkedHashMap&lt;String, Object&gt;) podObject;          
// If there is a "kind", check it is "Pod"                                                             // If there is a "kind", check it is "Pod"                                                          
Object podKindObject = pod.get("kind");                                                                Object podKindObject = pod.get("kind");                                                             
if (podKindObject != null && !"Pod".equals(podKindObject)) {                                           if (podKindObject != null && !"Pod".equals(podKindObject)) {                                        
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// "metadata" contains "name", "uid" and "creationTimestamp"                                           // "metadata" contains "name", "uid" and "creationTimestamp"                                        
Object metadataObject = pod.get("metadata");                                                           Object metadataObject = pod.get("metadata");                                                        
if (!(metadataObject instanceof LinkedHashMap&lt;?, ?&gt;)) {                                          if (!(metadataObject instanceof LinkedHashMap&lt;?, ?&gt;)) {                                       
log.warn(sm.getString("kubernetesMembershipProvider.invalidPod"));                                   | log.warn(sm.getString("kubernetesMembershipProvider.invalidPod", "metadata"));                      
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
LinkedHashMap&lt;String, Object&gt; metadata = (LinkedHashMap&lt;String, Object&gt;) metadataObject;   LinkedHashMap&lt;String, Object&gt; metadata = (LinkedHashMap&lt;String, Object&gt;) metadataObject;
Object nameObject = metadata.get("name");                                                              Object nameObject = metadata.get("name");                                                           
if (nameObject == null) {                                                                              if (nameObject == null) {                                                                           
log.warn(sm.getString("kubernetesMembershipProvider.invalidPod"));                                   | log.warn(sm.getString("kubernetesMembershipProvider.invalidPod", "name"));                          
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
Object objectUid = metadata.get("uid");                                                                Object objectUid = metadata.get("uid");                                                             
Object creationTimestampObject = metadata.get("creationTimestamp");                                    Object creationTimestampObject = metadata.get("creationTimestamp");                                 
if (creationTimestampObject == null) {                                                                 if (creationTimestampObject == null) {                                                              
log.warn(sm.getString("kubernetesMembershipProvider.invalidPod"));                                   | log.warn(sm.getString("kubernetesMembershipProvider.invalidPod", "uid"));                           
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
String creationTimestamp = creationTimestampObject.toString();                                         String creationTimestamp = creationTimestampObject.toString();                                      
// "status" contains "phase" (which must be "Running") and "podIP"                                     // "status" contains "phase" (which must be "Running") and "podIP"                                  
Object statusObject = pod.get("status");                                                               Object statusObject = pod.get("status");                                                            
if (!(statusObject instanceof LinkedHashMap&lt;?, ?&gt;)) {                                            if (!(statusObject instanceof LinkedHashMap&lt;?, ?&gt;)) {                                         
log.warn(sm.getString("kubernetesMembershipProvider.invalidPod"));                                   | log.warn(sm.getString("kubernetesMembershipProvider.invalidPod", "status"));                        
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
LinkedHashMap&lt;String, Object&gt; status = (LinkedHashMap&lt;String, Object&gt;) statusObject;       LinkedHashMap&lt;String, Object&gt; status = (LinkedHashMap&lt;String, Object&gt;) statusObject;    
if (!"Running".equals(status.get("phase"))) {                                                          if (!"Running".equals(status.get("phase"))) {                                                       
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
Object podIPObject = status.get("podIP");                                                              Object podIPObject = status.get("podIP");                                                           
if (podIPObject == null) {                                                                             if (podIPObject == null) {                                                                          
log.warn(sm.getString("kubernetesMembershipProvider.invalidPod"));                                   | log.warn(sm.getString("kubernetesMembershipProvider.invalidPod", "podIP"));                         
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
String podIP = podIPObject.toString();                                                                 String podIP = podIPObject.toString();                                                              
String uid = (objectUid == null) ? podIP : objectUid.toString();                                       String uid = (objectUid == null) ? podIP : objectUid.toString();                                    
// We found ourselves, ignore                                                                          // We found ourselves, ignore                                                                       
if (podIP.equals(localIp)) {                                                                           if (podIP.equals(localIp)) {                                                                        
// Update the UID on initial lookup                                                                    // Update the UID on initial lookup                                                                 
Member localMember = service.getLocalMember(false);                                                    Member localMember = service.getLocalMember(false);                                                 
if (localMember.getUniqueId() == CloudMembershipService.INITIAL_ID && localMember instanceof MemberI   if (localMember.getUniqueId() == CloudMembershipService.INITIAL_ID && localMember instanceof MemberI
byte[] id = md5.digest(uid.getBytes(StandardCharsets.US_ASCII));                                       byte[] id = md5.digest(uid.getBytes(StandardCharsets.US_ASCII));                                    
((MemberImpl) localMember).setUniqueId(id);                                                            ((MemberImpl) localMember).setUniqueId(id);                                                         
}                                                                                                      }                                                                                                   
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
long aliveTime = Duration.between(Instant.parse(creationTimestamp), startTime).toMillis();             long aliveTime = Duration.between(Instant.parse(creationTimestamp), startTime).toMillis();          
MemberImpl member = null;                                                                              MemberImpl member = null;                                                                           
try {                                                                                                  try {                                                                                               
member = new MemberImpl(podIP, port, aliveTime);                                                       member = new MemberImpl(podIP, port, aliveTime);                                                    
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
// Shouldn't happen:                                                                                   // Shouldn't happen:                                                                                
// an exception is thrown if hostname can't be resolved to IP, but we already provide an IP            // an exception is thrown if hostname can't be resolved to IP, but we already provide an IP         
log.error(sm.getString("kubernetesMembershipProvider.memberError"), e);                                log.error(sm.getString("kubernetesMembershipProvider.memberError"), e);                             
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
byte[] id = md5.digest(uid.getBytes(StandardCharsets.US_ASCII));                                       byte[] id = md5.digest(uid.getBytes(StandardCharsets.US_ASCII));                                    
member.setUniqueId(id);                                                                                member.setUniqueId(id);                                                                             
members.add(member);                                                                                   members.add(member);                                                                                
}                                                                                                      }                                                                                                   
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
log.error(sm.getString("kubernetesMembershipProvider.jsonError"), e);                                  log.error(sm.getString("kubernetesMembershipProvider.jsonError"), e);                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
