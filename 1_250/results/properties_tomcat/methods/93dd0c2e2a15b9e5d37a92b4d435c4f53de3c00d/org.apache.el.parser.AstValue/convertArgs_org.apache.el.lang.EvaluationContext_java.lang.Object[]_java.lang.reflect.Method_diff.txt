private Object[] convertArgs(EvaluationContext ctx, Object[] src, Method m) {
    Class<?>[] types = m.getParameterTypes();
    if (types.length == 0) {
        // Treated as if parameters have been provided so src is ignored
        return EMPTY_ARRAY;
    }
    int paramCount = types.length;
    if (m.isVarArgs() && paramCount > 1 && (src == null || paramCount > src.length) || !m.isVarArgs() && (paramCount > 0 && src == null || src != null && src.length != paramCount)) {
        String srcCount = null;
        if (src != null) {
            srcCount = Integer.toString(src.length);
        }
        String msg;
        if (m.isVarArgs()) {
            msg = MessageFactory.get("error.invoke.tooFewParams", m.getName(), srcCount, Integer.toString(paramCount));
        } else {
            msg = MessageFactory.get("error.invoke.wrongParams", m.getName(), srcCount, Integer.toString(paramCount));
        }
        throw new IllegalArgumentException(msg);
    }
    if (src == null) {
        // Must be a varargs method with a single parameter.
        // Use a new array every time since the called code could modify the
        // contents of the array
        return new Object[1];
    }
    Object[] dest = new Object[paramCount];
    for (int i = 0; i < paramCount - 1; i++) {
        dest[i] = ELSupport.coerceToType(ctx, src[i], types[i]);
    }
    if (m.isVarArgs()) {
        Class<?> varArgType = m.getParameterTypes()[paramCount - 1].getComponentType();
        Object[] varArgs = (Object[]) Array.newInstance(varArgType, src.length - (paramCount - 1));
        for (int i = 0; i < src.length - (paramCount - 1); i++) {
            varArgs[i] = ELSupport.coerceToType(ctx, src[paramCount - 1 + i], varArgType);
        }
        dest[paramCount - 1] = varArgs;
    } else {
        dest[paramCount - 1] = ELSupport.coerceToType(ctx, src[paramCount - 1], types[paramCount - 1]);
    }
    return dest;
}