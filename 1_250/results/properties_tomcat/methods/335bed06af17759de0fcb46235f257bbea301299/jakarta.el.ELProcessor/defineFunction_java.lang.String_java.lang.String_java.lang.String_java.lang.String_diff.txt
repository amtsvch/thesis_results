public void defineFunction(String prefix, String function, String className, String methodName) thro   public void defineFunction(String prefix, String function, String className, String methodName) thro
if (prefix == null || function == null || className == null || methodName == null) {                   if (prefix == null || function == null || className == null || methodName == null) {                
throw new NullPointerException(Util.message(context, "elProcessor.defineFunctionNullParams"));         throw new NullPointerException(Util.message(context, "elProcessor.defineFunctionNullParams"));      
}                                                                                                      }                                                                                                   
// Check the imports                                                                                   // Check the imports                                                                                
Class&lt;?&gt; clazz = context.getImportHandler().resolveClass(className);                             Class&lt;?&gt; clazz = context.getImportHandler().resolveClass(className);                          
if (clazz == null) {                                                                                   if (clazz == null) {                                                                                
clazz = Class.forName(className, true, Util.getContextClassLoader());                                  clazz = Class.forName(className, true, Util.getContextClassLoader());                               
}                                                                                                      }                                                                                                   
if (!Modifier.isPublic(clazz.getModifiers())) {                                                        if (!Modifier.isPublic(clazz.getModifiers())) {                                                     
throw new ClassNotFoundException(Util.message(context, "elProcessor.defineFunctionInvalidClass", cla   throw new ClassNotFoundException(Util.message(context, "elProcessor.defineFunctionInvalidClass", cla
}                                                                                                      }                                                                                                   
MethodSignature sig = new MethodSignature(context, methodName, className);                             MethodSignature sig = new MethodSignature(context, methodName, className);                          
if (function.length() == 0) {                                                                          if (function.length() == 0) {                                                                       
function = sig.getName();                                                                              function = sig.getName();                                                                           
}                                                                                                      }                                                                                                   
// Only returns public methods. Java 9+ access is checked below.                                       // Only returns public methods. Java 9+ access is checked below.                                    
Method[] methods = clazz.getMethods();                                                                 Method[] methods = clazz.getMethods();                                                              
JreCompat jreCompat = JreCompat.getInstance();                                                       |                                                                                                     
for (Method method : methods) {                                                                        for (Method method : methods) {                                                                     
if (!Modifier.isStatic(method.getModifiers())) {                                                       if (!Modifier.isStatic(method.getModifiers())) {                                                    
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (!jreCompat.canAccess(null, method)) {                                                            | if (!method.canAccess(null)) {                                                                      
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (method.getName().equals(sig.getName())) {                                                          if (method.getName().equals(sig.getName())) {                                                       
if (sig.getParamTypeNames() == null) {                                                                 if (sig.getParamTypeNames() == null) {                                                              
// Only a name provided, no signature so map the first                                                 // Only a name provided, no signature so map the first                                              
// method declared                                                                                     // method declared                                                                                  
manager.mapFunction(prefix, function, method);                                                         manager.mapFunction(prefix, function, method);                                                      
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
if (sig.getParamTypeNames().length != method.getParameterTypes().length) {                             if (sig.getParamTypeNames().length != method.getParameterTypes().length) {                          
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (sig.getParamTypeNames().length == 0) {                                                             if (sig.getParamTypeNames().length == 0) {                                                          
manager.mapFunction(prefix, function, method);                                                         manager.mapFunction(prefix, function, method);                                                      
return;                                                                                                return;                                                                                             
} else {                                                                                               } else {                                                                                            
Class&lt;?&gt;[] types = method.getParameterTypes();                                                   Class&lt;?&gt;[] types = method.getParameterTypes();                                                
String[] typeNames = sig.getParamTypeNames();                                                          String[] typeNames = sig.getParamTypeNames();                                                       
if (types.length == typeNames.length) {                                                                if (types.length == typeNames.length) {                                                             
boolean match = true;                                                                                  boolean match = true;                                                                               
for (int i = 0; i &lt; types.length; i++) {                                                            for (int i = 0; i &lt; types.length; i++) {                                                         
if (i == types.length - 1 && method.isVarArgs()) {                                                     if (i == types.length - 1 && method.isVarArgs()) {                                                  
String typeName = typeNames[i];                                                                        String typeName = typeNames[i];                                                                     
if (typeName.endsWith("...")) {                                                                        if (typeName.endsWith("...")) {                                                                     
typeName = typeName.substring(0, typeName.length() - 3);                                               typeName = typeName.substring(0, typeName.length() - 3);                                            
if (!typeName.equals(types[i].getName())) {                                                            if (!typeName.equals(types[i].getName())) {                                                         
match = false;                                                                                         match = false;                                                                                      
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
match = false;                                                                                         match = false;                                                                                      
}                                                                                                      }                                                                                                   
} else if (!types[i].getName().equals(typeNames[i])) {                                                 } else if (!types[i].getName().equals(typeNames[i])) {                                              
match = false;                                                                                         match = false;                                                                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (match) {                                                                                           if (match) {                                                                                        
manager.mapFunction(prefix, function, method);                                                         manager.mapFunction(prefix, function, method);                                                      
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
throw new NoSuchMethodException(Util.message(context, "elProcessor.defineFunctionNoMethod", methodNa   throw new NoSuchMethodException(Util.message(context, "elProcessor.defineFunctionNoMethod", methodNa
}                                                                                                      }                                                                                                   
