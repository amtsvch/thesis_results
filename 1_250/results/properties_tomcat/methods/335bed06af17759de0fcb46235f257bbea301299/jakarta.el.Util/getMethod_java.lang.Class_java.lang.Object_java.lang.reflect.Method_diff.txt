/*                                                                                                     /*                                                                                                  
* This method duplicates code in org.apache.el.util.ReflectionUtil. When                               * This method duplicates code in org.apache.el.util.ReflectionUtil. When                            
* making changes keep the code in sync.                                                                * making changes keep the code in sync.                                                             
*/                                                                                                     */                                                                                                  
static Method getMethod(Class&lt;?&gt; type, Object base, Method m) {                                  static Method getMethod(Class&lt;?&gt; type, Object base, Method m) {                               
JreCompat jreCompat = JreCompat.getInstance();                                                       |                                                                                                     
// If base is null, method MUST be static                                                              // If base is null, method MUST be static                                                           
// If base is non-null, method may be static or non-static                                             // If base is non-null, method may be static or non-static                                          
if (m == null || (Modifier.isPublic(type.getModifiers()) && (jreCompat.canAccess(base, m) || base != | if (m == null || (Modifier.isPublic(type.getModifiers()) && (m.canAccess(base) || base != null && m.
return m;                                                                                              return m;                                                                                           
}                                                                                                      }                                                                                                   
Class&lt;?&gt;[] interfaces = type.getInterfaces();                                                    Class&lt;?&gt;[] interfaces = type.getInterfaces();                                                 
Method mp = null;                                                                                      Method mp = null;                                                                                   
for (Class&lt;?&gt; iface : interfaces) {                                                              for (Class&lt;?&gt; iface : interfaces) {                                                           
try {                                                                                                  try {                                                                                               
mp = iface.getMethod(m.getName(), m.getParameterTypes());                                              mp = iface.getMethod(m.getName(), m.getParameterTypes());                                           
mp = getMethod(mp.getDeclaringClass(), base, mp);                                                      mp = getMethod(mp.getDeclaringClass(), base, mp);                                                   
if (mp != null) {                                                                                      if (mp != null) {                                                                                   
return mp;                                                                                             return mp;                                                                                          
}                                                                                                      }                                                                                                   
} catch (NoSuchMethodException e) {                                                                    } catch (NoSuchMethodException e) {                                                                 
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
Class&lt;?&gt; sup = type.getSuperclass();                                                             Class&lt;?&gt; sup = type.getSuperclass();                                                          
if (sup != null) {                                                                                     if (sup != null) {                                                                                  
try {                                                                                                  try {                                                                                               
mp = sup.getMethod(m.getName(), m.getParameterTypes());                                                mp = sup.getMethod(m.getName(), m.getParameterTypes());                                             
mp = getMethod(mp.getDeclaringClass(), base, mp);                                                      mp = getMethod(mp.getDeclaringClass(), base, mp);                                                   
if (mp != null) {                                                                                      if (mp != null) {                                                                                   
return mp;                                                                                             return mp;                                                                                          
}                                                                                                      }                                                                                                   
} catch (NoSuchMethodException e) {                                                                    } catch (NoSuchMethodException e) {                                                                 
// Ignore                                                                                              // Ignore                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
