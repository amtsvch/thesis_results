private Class&lt;?&gt; findClass(String name, boolean throwException) {                                private Class&lt;?&gt; findClass(String name, boolean throwException) {                             
Class&lt;?&gt; clazz;                                                                                  Class&lt;?&gt; clazz;                                                                               
ClassLoader cl = Util.getContextClassLoader();                                                         ClassLoader cl = Util.getContextClassLoader();                                                      
String path = name.replace('.', '/') + ".class";                                                       String path = name.replace('.', '/') + ".class";                                                    
try {                                                                                                  try {                                                                                               
/* Given that findClass() has to be called for every imported                                          /* Given that findClass() has to be called for every imported                                       
* package and that getResource() is a lot faster then loadClass()                                      * package and that getResource() is a lot faster then loadClass()                                   
* for resources that don't exist, the overhead of the getResource()                                    * for resources that don't exist, the overhead of the getResource()                                 
* for the case where the class does exist is a lot less than the                                       * for the case where the class does exist is a lot less than the                                    
* overhead we save by not calling loadClass().                                                         * overhead we save by not calling loadClass().                                                      
*/                                                                                                     */                                                                                                  
if (IS_SECURITY_ENABLED) {                                                                             if (IS_SECURITY_ENABLED) {                                                                          
// Webapps don't have read permission for JAVA_HOME (and                                               // Webapps don't have read permission for JAVA_HOME (and                                            
// possibly other sources of classes). Only need to know if the                                        // possibly other sources of classes). Only need to know if the                                     
// class exists at this point. Class loading occurs with                                               // class exists at this point. Class loading occurs with                                            
// standard SecurityManager policy next.                                                               // standard SecurityManager policy next.                                                            
if (!AccessController.doPrivileged(new PrivilegedResourceExists(cl, path)).booleanValue()) {           if (!AccessController.doPrivileged(new PrivilegedResourceExists(cl, path)).booleanValue()) {        
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
if (cl.getResource(path) == null) {                                                                    if (cl.getResource(path) == null) {                                                                 
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (ClassCircularityError cce) {                                                                  } catch (ClassCircularityError cce) {                                                               
// May happen under a security manager. Ignore it and try loading                                      // May happen under a security manager. Ignore it and try loading                                   
// the class normally.                                                                                 // the class normally.                                                                              
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
clazz = cl.loadClass(name);                                                                            clazz = cl.loadClass(name);                                                                         
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
// Class must be public, non-abstract, not an interface and (for                                     | // Class must be public, non-abstract, not an interface and in an                                   
// Java 9+) in an exported package                                                                   | // exported package                                                                                 
JreCompat jreCompat = JreCompat.getInstance();                                                       |                                                                                                     
int modifiers = clazz.getModifiers();                                                                  int modifiers = clazz.getModifiers();                                                               
if (!Modifier.isPublic(modifiers) || Modifier.isAbstract(modifiers) || Modifier.isInterface(modifier | if (!Modifier.isPublic(modifiers) || Modifier.isAbstract(modifiers) || Modifier.isInterface(modifier
if (throwException) {                                                                                  if (throwException) {                                                                               
throw new ELException(Util.message(null, "importHandler.invalidClass", name));                         throw new ELException(Util.message(null, "importHandler.invalidClass", name));                      
} else {                                                                                               } else {                                                                                            
return null;                                                                                           return null;                                                                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return clazz;                                                                                          return clazz;                                                                                       
}                                                                                                      }                                                                                                   
