@Override                                                                                              @Override                                                                                           
public String generateHeader(jakarta.servlet.http.Cookie cookie, HttpServletRequest request) {         public String generateHeader(jakarta.servlet.http.Cookie cookie, HttpServletRequest request) {      
// Can't use StringBuilder due to DateFormat                                                           // Can't use StringBuilder due to DateFormat                                                        
StringBuffer header = new StringBuffer();                                                              StringBuffer header = new StringBuffer();                                                           
// TODO: Name validation takes place in Cookie and cannot be configured                                // TODO: Name validation takes place in Cookie and cannot be configured                             
// per Context. Moving it to here would allow per Context config                                       // per Context. Moving it to here would allow per Context config                                    
// but delay validation until the header is generated. However,                                        // but delay validation until the header is generated. However,                                     
// the spec requires an IllegalArgumentException on Cookie                                             // the spec requires an IllegalArgumentException on Cookie                                          
// generation.                                                                                         // generation.                                                                                      
header.append(cookie.getName());                                                                       header.append(cookie.getName());                                                                    
header.append('=');                                                                                    header.append('=');                                                                                 
String value = cookie.getValue();                                                                      String value = cookie.getValue();                                                                   
if (value != null && value.length() &gt; 0) {                                                          if (value != null && value.length() &gt; 0) {                                                       
validateCookieValue(value);                                                                            validateCookieValue(value);                                                                         
header.append(value);                                                                                  header.append(value);                                                                               
}                                                                                                      }                                                                                                   
// RFC 6265 prefers Max-Age to Expires but... (see below)                                              // RFC 6265 prefers Max-Age to Expires but... (see below)                                           
int maxAge = cookie.getMaxAge();                                                                       int maxAge = cookie.getMaxAge();                                                                    
if (maxAge &gt; -1) {                                                                                  if (maxAge &gt; -1) {                                                                               
// Negative Max-Age is equivalent to no Max-Age                                                        // Negative Max-Age is equivalent to no Max-Age                                                     
header.append("; Max-Age=");                                                                           header.append("; Max-Age=");                                                                        
header.append(maxAge);                                                                                 header.append(maxAge);                                                                              
// Microsoft IE and Microsoft Edge don't understand Max-Age so send                                    // Microsoft IE and Microsoft Edge don't understand Max-Age so send                                 
// expires as well. Without this, persistent cookies fail with those                                   // expires as well. Without this, persistent cookies fail with those                                
// browsers. See http://tomcat.markmail.org/thread/g6sipbofsjossacn                                    // browsers. See http://tomcat.markmail.org/thread/g6sipbofsjossacn                                 
// Wdy, DD-Mon-YY HH:MM:SS GMT ( Expires Netscape format )                                             // Wdy, DD-Mon-YY HH:MM:SS GMT ( Expires Netscape format )                                          
header.append("; Expires=");                                                                           header.append("; Expires=");                                                                        
// To expire immediately we need to set the time in past                                               // To expire immediately we need to set the time in past                                            
if (maxAge == 0) {                                                                                     if (maxAge == 0) {                                                                                  
header.append(ANCIENT_DATE);                                                                           header.append(ANCIENT_DATE);                                                                        
} else {                                                                                               } else {                                                                                            
COOKIE_DATE_FORMAT.get().format(new Date(System.currentTimeMillis() + maxAge * 1000L), header, new F   COOKIE_DATE_FORMAT.get().format(new Date(System.currentTimeMillis() + maxAge * 1000L), header, new F
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
String domain = cookie.getDomain();                                                                    String domain = cookie.getDomain();                                                                 
if (domain != null && domain.length() &gt; 0) {                                                        if (domain != null && domain.length() &gt; 0) {                                                     
validateDomain(domain);                                                                                validateDomain(domain);                                                                             
header.append("; Domain=");                                                                            header.append("; Domain=");                                                                         
header.append(domain);                                                                                 header.append(domain);                                                                              
}                                                                                                      }                                                                                                   
String path = cookie.getPath();                                                                        String path = cookie.getPath();                                                                     
if (path != null && path.length() &gt; 0) {                                                            if (path != null && path.length() &gt; 0) {                                                         
validatePath(path);                                                                                    validatePath(path);                                                                                 
header.append("; Path=");                                                                              header.append("; Path=");                                                                           
header.append(path);                                                                                   header.append(path);                                                                                
}                                                                                                      }                                                                                                   
if (cookie.getSecure()) {                                                                              if (cookie.getSecure()) {                                                                           
header.append("; Secure");                                                                             header.append("; Secure");                                                                          
}                                                                                                      }                                                                                                   
if (cookie.isHttpOnly()) {                                                                             if (cookie.isHttpOnly()) {                                                                          
header.append("; HttpOnly");                                                                           header.append("; HttpOnly");                                                                        
}                                                                                                      }                                                                                                   
String cookieSameSite = cookie.getAttribute(Constants.COOKIE_SAME_SITE_ATTR);                          String cookieSameSite = cookie.getAttribute(Constants.COOKIE_SAME_SITE_ATTR);                       
if (cookieSameSite == null) {                                                                          if (cookieSameSite == null) {                                                                       
// Use processor config                                                                                // Use processor config                                                                             
SameSiteCookies sameSiteCookiesValue = getSameSiteCookies();                                           SameSiteCookies sameSiteCookiesValue = getSameSiteCookies();                                        
if (sameSiteCookiesValue.equals(SameSiteCookies.UNSET)) {                                            | if (!sameSiteCookiesValue.equals(SameSiteCookies.UNSET)) {                                          
header.append("; SameSite=");                                                                          header.append("; SameSite=");                                                                       
header.append(sameSiteCookiesValue.getValue());                                                        header.append(sameSiteCookiesValue.getValue());                                                     
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// Use explict config                                                                                  // Use explict config                                                                               
header.append("; SameSite=");                                                                          header.append("; SameSite=");                                                                       
header.append(cookieSameSite);                                                                         header.append(cookieSameSite);                                                                      
}                                                                                                      }                                                                                                   
// Add the remaining attributes                                                                        // Add the remaining attributes                                                                     
for (Map.Entry&lt;String, String&gt; entry : cookie.getAttributes().entrySet()) {                      for (Map.Entry&lt;String, String&gt; entry : cookie.getAttributes().entrySet()) {                   
switch(entry.getKey()) {                                                                               switch(entry.getKey()) {                                                                            
case Constants.COOKIE_COMMENT_ATTR:                                                                    case Constants.COOKIE_COMMENT_ATTR:                                                                 
case Constants.COOKIE_DOMAIN_ATTR:                                                                     case Constants.COOKIE_DOMAIN_ATTR:                                                                  
case Constants.COOKIE_MAX_AGE_ATTR:                                                                    case Constants.COOKIE_MAX_AGE_ATTR:                                                                 
case Constants.COOKIE_PATH_ATTR:                                                                       case Constants.COOKIE_PATH_ATTR:                                                                    
case Constants.COOKIE_SECURE_ATTR:                                                                     case Constants.COOKIE_SECURE_ATTR:                                                                  
case Constants.COOKIE_HTTP_ONLY_ATTR:                                                                  case Constants.COOKIE_HTTP_ONLY_ATTR:                                                               
case Constants.COOKIE_SAME_SITE_ATTR:                                                                  case Constants.COOKIE_SAME_SITE_ATTR:                                                               
// Handled above so NO-OP                                                                              // Handled above so NO-OP                                                                           
break;                                                                                                 break;                                                                                              
default:                                                                                               default:                                                                                            
{                                                                                                      {                                                                                                   
validateAttribute(entry.getKey(), entry.getValue());                                                   validateAttribute(entry.getKey(), entry.getValue());                                                
header.append("; ");                                                                                   header.append("; ");                                                                                
header.append(entry.getKey());                                                                         header.append(entry.getKey());                                                                      
header.append('=');                                                                                    header.append('=');                                                                                 
header.append(entry.getValue());                                                                       header.append(entry.getValue());                                                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
return header.toString();                                                                              return header.toString();                                                                           
}                                                                                                      }                                                                                                   
