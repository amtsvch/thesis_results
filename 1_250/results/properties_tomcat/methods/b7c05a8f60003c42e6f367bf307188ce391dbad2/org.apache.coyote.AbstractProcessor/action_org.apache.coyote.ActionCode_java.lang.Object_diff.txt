@Override                                                                                              @Override                                                                                           
public final void action(ActionCode actionCode, Object param) {                                        public final void action(ActionCode actionCode, Object param) {                                     
switch(actionCode) {                                                                                   switch(actionCode) {                                                                                
// 'Normal' servlet support                                                                            // 'Normal' servlet support                                                                         
case COMMIT:                                                                                           case COMMIT:                                                                                        
{                                                                                                      {                                                                                                   
if (!response.isCommitted()) {                                                                         if (!response.isCommitted()) {                                                                      
try {                                                                                                  try {                                                                                               
// Validate and write response headers                                                                 // Validate and write response headers                                                              
prepareResponse();                                                                                     prepareResponse();                                                                                  
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
handleIOException(e);                                                                                  handleIOException(e);                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case CLOSE:                                                                                            case CLOSE:                                                                                         
{                                                                                                      {                                                                                                   
action(ActionCode.COMMIT, null);                                                                       action(ActionCode.COMMIT, null);                                                                    
try {                                                                                                  try {                                                                                               
finishResponse();                                                                                      finishResponse();                                                                                   
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
handleIOException(e);                                                                                  handleIOException(e);                                                                               
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ACK:                                                                                              case ACK:                                                                                           
{                                                                                                      {                                                                                                   
ack((ContinueResponseTiming) param);                                                                   ack((ContinueResponseTiming) param);                                                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case CLIENT_FLUSH:                                                                                     case CLIENT_FLUSH:                                                                                  
{                                                                                                      {                                                                                                   
action(ActionCode.COMMIT, null);                                                                       action(ActionCode.COMMIT, null);                                                                    
try {                                                                                                  try {                                                                                               
flush();                                                                                               flush();                                                                                            
} catch (IOException e) {                                                                              } catch (IOException e) {                                                                           
handleIOException(e);                                                                                  handleIOException(e);                                                                               
response.setErrorException(e);                                                                         response.setErrorException(e);                                                                      
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case AVAILABLE:                                                                                        case AVAILABLE:                                                                                     
{                                                                                                      {                                                                                                   
request.setAvailable(available(Boolean.TRUE.equals(param)));                                           request.setAvailable(available(Boolean.TRUE.equals(param)));                                        
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_SET_BODY_REPLAY:                                                                              case REQ_SET_BODY_REPLAY:                                                                           
{                                                                                                      {                                                                                                   
ByteChunk body = (ByteChunk) param;                                                                    ByteChunk body = (ByteChunk) param;                                                                 
setRequestBody(body);                                                                                  setRequestBody(body);                                                                               
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Error handling                                                                                      // Error handling                                                                                   
case IS_ERROR:                                                                                         case IS_ERROR:                                                                                      
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(getErrorState().isError());                                                ((AtomicBoolean) param).set(getErrorState().isError());                                             
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case IS_IO_ALLOWED:                                                                                    case IS_IO_ALLOWED:                                                                                 
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(getErrorState().isIoAllowed());                                            ((AtomicBoolean) param).set(getErrorState().isIoAllowed());                                         
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case CLOSE_NOW:                                                                                        case CLOSE_NOW:                                                                                     
{                                                                                                      {                                                                                                   
// Prevent further writes to the response                                                              // Prevent further writes to the response                                                           
setSwallowResponse();                                                                                  setSwallowResponse();                                                                               
if (param instanceof Throwable) {                                                                      if (param instanceof Throwable) {                                                                   
setErrorState(ErrorState.CLOSE_NOW, (Throwable) param);                                                setErrorState(ErrorState.CLOSE_NOW, (Throwable) param);                                             
} else {                                                                                               } else {                                                                                            
setErrorState(ErrorState.CLOSE_NOW, null);                                                             setErrorState(ErrorState.CLOSE_NOW, null);                                                          
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case DISABLE_SWALLOW_INPUT:                                                                            case DISABLE_SWALLOW_INPUT:                                                                         
{                                                                                                      {                                                                                                   
// Cancelled upload or similar.                                                                        // Cancelled upload or similar.                                                                     
// No point reading the remainder of the request.                                                      // No point reading the remainder of the request.                                                   
disableSwallowRequest();                                                                               disableSwallowRequest();                                                                            
// This is an error state. Make sure it is marked as such.                                             // This is an error state. Make sure it is marked as such.                                          
setErrorState(ErrorState.CLOSE_CLEAN, null);                                                           setErrorState(ErrorState.CLOSE_CLEAN, null);                                                        
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Request attribute support                                                                           // Request attribute support                                                                        
case REQ_HOST_ADDR_ATTRIBUTE:                                                                          case REQ_HOST_ADDR_ATTRIBUTE:                                                                       
{                                                                                                      {                                                                                                   
if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                               if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                            
request.remoteAddr().setString(socketWrapper.getRemoteAddr());                                         request.remoteAddr().setString(socketWrapper.getRemoteAddr());                                      
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_PEER_ADDR_ATTRIBUTE:                                                                          case REQ_PEER_ADDR_ATTRIBUTE:                                                                       
{                                                                                                      {                                                                                                   
if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                               if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                            
request.peerAddr().setString(socketWrapper.getRemoteAddr());                                           request.peerAddr().setString(socketWrapper.getRemoteAddr());                                        
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_HOST_ATTRIBUTE:                                                                               case REQ_HOST_ATTRIBUTE:                                                                            
{                                                                                                      {                                                                                                   
populateRequestAttributeRemoteHost();                                                                  populateRequestAttributeRemoteHost();                                                               
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_LOCALPORT_ATTRIBUTE:                                                                          case REQ_LOCALPORT_ATTRIBUTE:                                                                       
{                                                                                                      {                                                                                                   
if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                               if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                            
request.setLocalPort(socketWrapper.getLocalPort());                                                    request.setLocalPort(socketWrapper.getLocalPort());                                                 
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_LOCAL_ADDR_ATTRIBUTE:                                                                         case REQ_LOCAL_ADDR_ATTRIBUTE:                                                                      
{                                                                                                      {                                                                                                   
if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                               if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                            
request.localAddr().setString(socketWrapper.getLocalAddr());                                           request.localAddr().setString(socketWrapper.getLocalAddr());                                        
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_LOCAL_NAME_ATTRIBUTE:                                                                         case REQ_LOCAL_NAME_ATTRIBUTE:                                                                      
{                                                                                                      {                                                                                                   
if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                               if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                            
request.localName().setString(socketWrapper.getLocalName());                                           request.localName().setString(socketWrapper.getLocalName());                                        
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_REMOTEPORT_ATTRIBUTE:                                                                         case REQ_REMOTEPORT_ATTRIBUTE:                                                                      
{                                                                                                      {                                                                                                   
if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                               if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {                            
request.setRemotePort(socketWrapper.getRemotePort());                                                  request.setRemotePort(socketWrapper.getRemotePort());                                               
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// SSL request attribute support                                                                       // SSL request attribute support                                                                    
case REQ_SSL_ATTRIBUTE:                                                                                case REQ_SSL_ATTRIBUTE:                                                                             
{                                                                                                      {                                                                                                   
populateSslRequestAttributes();                                                                        populateSslRequestAttributes();                                                                     
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case REQ_SSL_CERTIFICATE:                                                                              case REQ_SSL_CERTIFICATE:                                                                           
{                                                                                                      {                                                                                                   
try {                                                                                                  try {                                                                                               
sslReHandShake();                                                                                      sslReHandShake();                                                                                   
} catch (IOException ioe) {                                                                            } catch (IOException ioe) {                                                                         
setErrorState(ErrorState.CLOSE_CONNECTION_NOW, ioe);                                                   setErrorState(ErrorState.CLOSE_CONNECTION_NOW, ioe);                                                
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Servlet 3.0 asynchronous support                                                                    // Servlet 3.0 asynchronous support                                                                 
case ASYNC_START:                                                                                      case ASYNC_START:                                                                                   
{                                                                                                      {                                                                                                   
asyncStateMachine.asyncStart((AsyncContextCallback) param);                                            asyncStateMachine.asyncStart((AsyncContextCallback) param);                                         
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_COMPLETE:                                                                                   case ASYNC_COMPLETE:                                                                                
{                                                                                                      {                                                                                                   
clearDispatches();                                                                                     clearDispatches();                                                                                  
if (asyncStateMachine.asyncComplete()) {                                                               if (asyncStateMachine.asyncComplete()) {                                                            
processSocketEvent(SocketEvent.OPEN_READ, true);                                                       processSocketEvent(SocketEvent.OPEN_READ, true);                                                    
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_DISPATCH:                                                                                   case ASYNC_DISPATCH:                                                                                
{                                                                                                      {                                                                                                   
if (asyncStateMachine.asyncDispatch()) {                                                               if (asyncStateMachine.asyncDispatch()) {                                                            
processSocketEvent(SocketEvent.OPEN_READ, true);                                                       processSocketEvent(SocketEvent.OPEN_READ, true);                                                    
}                                                                                                      }                                                                                                   
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_DISPATCHED:                                                                                 case ASYNC_DISPATCHED:                                                                              
{                                                                                                      {                                                                                                   
asyncStateMachine.asyncDispatched();                                                                   asyncStateMachine.asyncDispatched();                                                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_ERROR:                                                                                      case ASYNC_ERROR:                                                                                   
{                                                                                                      {                                                                                                   
asyncStateMachine.asyncError();                                                                        asyncStateMachine.asyncError();                                                                     
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_IS_ASYNC:                                                                                   case ASYNC_IS_ASYNC:                                                                                
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(asyncStateMachine.isAsync());                                              ((AtomicBoolean) param).set(asyncStateMachine.isAsync());                                           
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_IS_COMPLETING:                                                                              case ASYNC_IS_COMPLETING:                                                                           
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(asyncStateMachine.isCompleting());                                         ((AtomicBoolean) param).set(asyncStateMachine.isCompleting());                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_IS_DISPATCHING:                                                                             case ASYNC_IS_DISPATCHING:                                                                          
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(asyncStateMachine.isAsyncDispatching());                                   ((AtomicBoolean) param).set(asyncStateMachine.isAsyncDispatching());                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_IS_ERROR:                                                                                   case ASYNC_IS_ERROR:                                                                                
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());                                         ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_IS_STARTED:                                                                                 case ASYNC_IS_STARTED:                                                                              
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());                                       ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());                                    
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_IS_TIMINGOUT:                                                                               case ASYNC_IS_TIMINGOUT:                                                                            
{                                                                                                      {                                                                                                   
((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());                                     ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());                                  
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_RUN:                                                                                        case ASYNC_RUN:                                                                                     
{                                                                                                      {                                                                                                   
asyncStateMachine.asyncRun((Runnable) param);                                                          asyncStateMachine.asyncRun((Runnable) param);                                                       
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_SETTIMEOUT:                                                                                 case ASYNC_SETTIMEOUT:                                                                              
{                                                                                                      {                                                                                                   
if (param == null) {                                                                                   if (param == null) {                                                                                
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
long timeout = ((Long) param).longValue();                                                             long timeout = ((Long) param).longValue();                                                          
setAsyncTimeout(timeout);                                                                              setAsyncTimeout(timeout);                                                                           
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_TIMEOUT:                                                                                    case ASYNC_TIMEOUT:                                                                                 
{                                                                                                      {                                                                                                   
AtomicBoolean result = (AtomicBoolean) param;                                                          AtomicBoolean result = (AtomicBoolean) param;                                                       
result.set(asyncStateMachine.asyncTimeout());                                                          result.set(asyncStateMachine.asyncTimeout());                                                       
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case ASYNC_POST_PROCESS:                                                                               case ASYNC_POST_PROCESS:                                                                            
{                                                                                                      {                                                                                                   
asyncStateMachine.asyncPostProcess();                                                                  asyncStateMachine.asyncPostProcess();                                                               
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Servlet 3.1 non-blocking I/O                                                                        // Servlet 3.1 non-blocking I/O                                                                     
case REQUEST_BODY_FULLY_READ:                                                                          case REQUEST_BODY_FULLY_READ:                                                                       
{                                                                                                      {                                                                                                   
AtomicBoolean result = (AtomicBoolean) param;                                                          AtomicBoolean result = (AtomicBoolean) param;                                                       
result.set(isRequestBodyFullyRead());                                                                  result.set(isRequestBodyFullyRead());                                                               
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case NB_READ_INTEREST:                                                                                 case NB_READ_INTEREST:                                                                              
{                                                                                                      {                                                                                                   
AtomicBoolean isReady = (AtomicBoolean) param;                                                         AtomicBoolean isReady = (AtomicBoolean) param;                                                      
isReady.set(isReadyForRead());                                                                         isReady.set(isReadyForRead());                                                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case NB_WRITE_INTEREST:                                                                                case NB_WRITE_INTEREST:                                                                             
{                                                                                                      {                                                                                                   
AtomicBoolean isReady = (AtomicBoolean) param;                                                         AtomicBoolean isReady = (AtomicBoolean) param;                                                      
isReady.set(isReadyForWrite());                                                                        isReady.set(isReadyForWrite());                                                                     
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case DISPATCH_READ:                                                                                    case DISPATCH_READ:                                                                                 
{                                                                                                      {                                                                                                   
addDispatch(DispatchType.NON_BLOCKING_READ);                                                           addDispatch(DispatchType.NON_BLOCKING_READ);                                                        
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case DISPATCH_WRITE:                                                                                   case DISPATCH_WRITE:                                                                                
{                                                                                                      {                                                                                                   
addDispatch(DispatchType.NON_BLOCKING_WRITE);                                                          addDispatch(DispatchType.NON_BLOCKING_WRITE);                                                       
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case DISPATCH_EXECUTE:                                                                                 case DISPATCH_EXECUTE:                                                                              
{                                                                                                      {                                                                                                   
executeDispatches();                                                                                   executeDispatches();                                                                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Servlet 3.1 HTTP Upgrade                                                                            // Servlet 3.1 HTTP Upgrade                                                                         
case UPGRADE:                                                                                          case UPGRADE:                                                                                       
{                                                                                                      {                                                                                                   
doHttpUpgrade((UpgradeToken) param);                                                                   doHttpUpgrade((UpgradeToken) param);                                                                
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Servlet 4.0 Push requests                                                                           // Servlet 4.0 Push requests                                                                        
case IS_PUSH_SUPPORTED:                                                                                case IS_PUSH_SUPPORTED:                                                                             
{                                                                                                      {                                                                                                   
AtomicBoolean result = (AtomicBoolean) param;                                                          AtomicBoolean result = (AtomicBoolean) param;                                                       
result.set(isPushSupported());                                                                         result.set(isPushSupported());                                                                      
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case PUSH_REQUEST:                                                                                     case PUSH_REQUEST:                                                                                  
{                                                                                                      {                                                                                                   
doPush((Request) param);                                                                               doPush((Request) param);                                                                            
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Servlet 4.0 Trailers                                                                                // Servlet 4.0 Trailers                                                                             
case IS_TRAILER_FIELDS_READY:                                                                          case IS_TRAILER_FIELDS_READY:                                                                       
{                                                                                                      {                                                                                                   
AtomicBoolean result = (AtomicBoolean) param;                                                          AtomicBoolean result = (AtomicBoolean) param;                                                       
result.set(isTrailerFieldsReady());                                                                    result.set(isTrailerFieldsReady());                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case IS_TRAILER_FIELDS_SUPPORTED:                                                                      case IS_TRAILER_FIELDS_SUPPORTED:                                                                   
{                                                                                                      {                                                                                                   
AtomicBoolean result = (AtomicBoolean) param;                                                          AtomicBoolean result = (AtomicBoolean) param;                                                       
result.set(isTrailerFieldsSupported());                                                                result.set(isTrailerFieldsSupported());                                                             
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
// Identifiers associated with multiplexing protocols like HTTP/2                                    | // Identifiers                                                                                      
case CONNECTION_ID:                                                                                  | case PROTOCOL_REQUEST_ID:                                                                           
{                                                                                                      {                                                                                                   
@SuppressWarnings("unchecked")                                                                         @SuppressWarnings("unchecked")                                                                      
AtomicReference&lt;Object&gt; result = (AtomicReference&lt;Object&gt;) param;                          AtomicReference&lt;Object&gt; result = (AtomicReference&lt;Object&gt;) param;                       
result.set(getConnectionID());                                                                       | result.set(getProtocolRequestId());                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
case STREAM_ID:                                                                                      | case SERVLET_CONNECTION:                                                                            
{                                                                                                      {                                                                                                   
@SuppressWarnings("unchecked")                                                                         @SuppressWarnings("unchecked")                                                                      
AtomicReference&lt;Object&gt; result = (AtomicReference&lt;Object&gt;) param;                          AtomicReference&lt;Object&gt; result = (AtomicReference&lt;Object&gt;) param;                       
result.set(getStreamID());                                                                           | result.set(getServletConnection());                                                                 
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
