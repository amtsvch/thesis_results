@Override
public Class<?> getType(ELContext context, Object base, Object property) {
    Objects.requireNonNull(context);
    if (base instanceof ELClass && property instanceof String) {
        context.setPropertyResolved(base, property);
        Class<?> clazz = ((ELClass) base).getKlass();
        String name = (String) property;
        try {
            clazz.getField(name);
            /*
                 * This resolver is always read-only so fall-through to return
                 * null.
                 */
        } catch (IllegalArgumentException | NoSuchFieldException | SecurityException e) {
            String msg = Util.message(context, "staticFieldELResolver.notFound", name, clazz.getName());
            throw new PropertyNotFoundException(msg, e);
        }
    }
    return null;
}