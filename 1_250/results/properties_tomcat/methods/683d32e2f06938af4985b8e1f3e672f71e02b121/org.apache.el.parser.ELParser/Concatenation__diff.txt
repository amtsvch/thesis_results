/*
 * Concatenation
 * For +=, then Math
 *
 */
final public void Concatenation() throws ParseException {
    Math();
    label_11: while (true) {
        switch((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case CONCAT:
                {
                    ;
                    break;
                }
            default:
                jj_la1[24] = jj_gen;
                break label_11;
        }
        jj_consume_token(CONCAT);
        AstConcatenation jjtn001 = new AstConcatenation(JJTCONCATENATION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Math();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, 2);
            }
        }
    }
}