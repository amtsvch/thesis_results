private static final void init() {                                                                     private static final void init() {                                                                  
for (Cipher cipher : Cipher.values()) {                                                                for (Cipher cipher : Cipher.values()) {                                                             
String alias = cipher.getOpenSSLAlias();                                                               String alias = cipher.getOpenSSLAlias();                                                            
if (aliases.containsKey(alias)) {                                                                      if (aliases.containsKey(alias)) {                                                                   
aliases.get(alias).add(cipher);                                                                        aliases.get(alias).add(cipher);                                                                     
} else {                                                                                               } else {                                                                                            
List&lt;Cipher&gt; list = new ArrayList&lt;&gt;();                                                     List&lt;Cipher&gt; list = new ArrayList&lt;&gt;();                                                  
list.add(cipher);                                                                                      list.add(cipher);                                                                                   
aliases.put(alias, list);                                                                              aliases.put(alias, list);                                                                           
}                                                                                                      }                                                                                                   
aliases.put(cipher.name(), Collections.singletonList(cipher));                                         aliases.put(cipher.name(), Collections.singletonList(cipher));                                      
for (String openSSlAltName : cipher.getOpenSSLAltNames()) {                                            for (String openSSlAltName : cipher.getOpenSSLAltNames()) {                                         
if (aliases.containsKey(openSSlAltName)) {                                                             if (aliases.containsKey(openSSlAltName)) {                                                          
aliases.get(openSSlAltName).add(cipher);                                                               aliases.get(openSSlAltName).add(cipher);                                                            
} else {                                                                                               } else {                                                                                            
List&lt;Cipher&gt; list = new ArrayList&lt;&gt;();                                                     List&lt;Cipher&gt; list = new ArrayList&lt;&gt;();                                                  
list.add(cipher);                                                                                      list.add(cipher);                                                                                   
aliases.put(openSSlAltName, list);                                                                     aliases.put(openSSlAltName, list);                                                                  
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
jsseToOpenSSL.put(cipher.name(), cipher.getOpenSSLAlias());                                            jsseToOpenSSL.put(cipher.name(), cipher.getOpenSSLAlias());                                         
Set&lt;String&gt; jsseNames = cipher.getJsseNames();                                                   Set&lt;String&gt; jsseNames = cipher.getJsseNames();                                                
for (String jsseName : jsseNames) {                                                                    for (String jsseName : jsseNames) {                                                                 
jsseToOpenSSL.put(jsseName, cipher.getOpenSSLAlias());                                                 jsseToOpenSSL.put(jsseName, cipher.getOpenSSLAlias());                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
List&lt;Cipher&gt; allCiphersList = Arrays.asList(Cipher.values());                                    List&lt;Cipher&gt; allCiphersList = Arrays.asList(Cipher.values());                                 
Collections.reverse(allCiphersList);                                                                   Collections.reverse(allCiphersList);                                                                
LinkedHashSet&lt;Cipher&gt; allCiphers = defaultSort(new LinkedHashSet&lt;&gt;(allCiphersList));       LinkedHashSet&lt;Cipher&gt; allCiphers = defaultSort(new LinkedHashSet&lt;&gt;(allCiphersList));    
addListAlias(eNULL, filterByEncryption(allCiphers, Collections.singleton(Encryption.eNULL)));          addListAlias(eNULL, filterByEncryption(allCiphers, Collections.singleton(Encryption.eNULL)));       
LinkedHashSet&lt;Cipher&gt; all = new LinkedHashSet&lt;&gt;(allCiphers);                               LinkedHashSet&lt;Cipher&gt; all = new LinkedHashSet&lt;&gt;(allCiphers);                            
remove(all, eNULL);                                                                                    remove(all, eNULL);                                                                                 
addListAlias(ALL, all);                                                                                addListAlias(ALL, all);                                                                             
addListAlias(HIGH, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.HIGH)))   addListAlias(HIGH, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.HIGH)))
addListAlias(MEDIUM, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.MEDIU   addListAlias(MEDIUM, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.MEDIU
addListAlias(LOW, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.LOW)));    addListAlias(LOW, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.LOW))); 
addListAlias(EXPORT, filterByEncryptionLevel(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryptio   addListAlias(EXPORT, filterByEncryptionLevel(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryptio
aliases.put("EXP", aliases.get(EXPORT));                                                               aliases.put("EXP", aliases.get(EXPORT));                                                            
addListAlias(EXPORT40, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.EXP   addListAlias(EXPORT40, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.EXP
addListAlias(EXPORT56, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.EXP   addListAlias(EXPORT56, filterByEncryptionLevel(allCiphers, Collections.singleton(EncryptionLevel.EXP
aliases.put("NULL", aliases.get(eNULL));                                                               aliases.put("NULL", aliases.get(eNULL));                                                            
aliases.put(COMPLEMENTOFALL, aliases.get(eNULL));                                                      aliases.put(COMPLEMENTOFALL, aliases.get(eNULL));                                                   
addListAlias(aNULL, filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)))   addListAlias(aNULL, filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)))
addListAlias(kRSA, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.RSA)));           addListAlias(kRSA, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.RSA)));        
addListAlias(aRSA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.RSA)));     addListAlias(aRSA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.RSA)));  
// Despite what the docs say, RSA is equivalent to kRSA                                                // Despite what the docs say, RSA is equivalent to kRSA                                             
aliases.put(RSA, aliases.get(kRSA));                                                                   aliases.put(RSA, aliases.get(kRSA));                                                                
addListAlias(kEDH, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH)));           addListAlias(kEDH, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH)));        
addListAlias(kDHE, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH)));           addListAlias(kDHE, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH)));        
Set&lt;Cipher&gt; edh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH));       Set&lt;Cipher&gt; edh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH));    
edh.removeAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));        edh.removeAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));     
addListAlias(EDH, edh);                                                                                addListAlias(EDH, edh);                                                                             
addListAlias(DHE, edh);                                                                                addListAlias(DHE, edh);                                                                             
addListAlias(kDHr, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.DHr)));           addListAlias(kDHr, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.DHr)));        
addListAlias(kDHd, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.DHd)));           addListAlias(kDHd, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.DHd)));        
addListAlias(kDH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.DHr,   addListAlias(kDH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.DHr,
addListAlias(kECDHr, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHr)));       addListAlias(kECDHr, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHr)));    
addListAlias(kECDHe, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHe)));       addListAlias(kECDHe, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHe)));    
addListAlias(kECDH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.EC   addListAlias(kECDH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.EC
addListAlias(ECDH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.ECD   addListAlias(ECDH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.ECD
addListAlias(kECDHE, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH)));       addListAlias(kECDHE, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH)));    
Set&lt;Cipher&gt; ecdhe = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));   Set&lt;Cipher&gt; ecdhe = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));
remove(ecdhe, aNULL);                                                                                  remove(ecdhe, aNULL);                                                                               
addListAlias(ECDHE, ecdhe);                                                                            addListAlias(ECDHE, ecdhe);                                                                         
addListAlias(kEECDH, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH)));       addListAlias(kEECDH, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH)));    
aliases.put(EECDHE, aliases.get(kEECDH));                                                            |                                                                                                     
Set&lt;Cipher&gt; eecdh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));   Set&lt;Cipher&gt; eecdh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));
eecdh.removeAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));      eecdh.removeAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));   
addListAlias(EECDH, eecdh);                                                                            addListAlias(EECDH, eecdh);                                                                         
addListAlias(aDSS, filterByAuthentication(allCiphers, Collections.singleton(Authentication.DSS)));     addListAlias(aDSS, filterByAuthentication(allCiphers, Collections.singleton(Authentication.DSS)));  
aliases.put(DSS, aliases.get(aDSS));                                                                   aliases.put(DSS, aliases.get(aDSS));                                                                
addListAlias(aDH, filterByAuthentication(allCiphers, Collections.singleton(Authentication.DH)));       addListAlias(aDH, filterByAuthentication(allCiphers, Collections.singleton(Authentication.DH)));    
Set&lt;Cipher&gt; aecdh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));   Set&lt;Cipher&gt; aecdh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EECDH));
addListAlias(AECDH, filterByAuthentication(aecdh, Collections.singleton(Authentication.aNULL)));       addListAlias(AECDH, filterByAuthentication(aecdh, Collections.singleton(Authentication.aNULL)));    
addListAlias(aECDH, filterByAuthentication(allCiphers, Collections.singleton(Authentication.ECDH)));   addListAlias(aECDH, filterByAuthentication(allCiphers, Collections.singleton(Authentication.ECDH)));
addListAlias(ECDSA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.ECDSA)))   addListAlias(ECDSA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.ECDSA)))
aliases.put(aECDSA, aliases.get(ECDSA));                                                               aliases.put(aECDSA, aliases.get(ECDSA));                                                            
addListAlias(kFZA, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.FZA)));           addListAlias(kFZA, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.FZA)));        
addListAlias(aFZA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.FZA)));     addListAlias(aFZA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.FZA)));  
addListAlias(eFZA, filterByEncryption(allCiphers, Collections.singleton(Encryption.FZA)));             addListAlias(eFZA, filterByEncryption(allCiphers, Collections.singleton(Encryption.FZA)));          
addListAlias(FZA, filter(allCiphers, null, Collections.singleton(KeyExchange.FZA), Collections.singl   addListAlias(FZA, filter(allCiphers, null, Collections.singleton(KeyExchange.FZA), Collections.singl
addListAlias(Constants.SSL_PROTO_TLSv1_2, filterByProtocol(allCiphers, Collections.singleton(Protoco   addListAlias(Constants.SSL_PROTO_TLSv1_2, filterByProtocol(allCiphers, Collections.singleton(Protoco
addListAlias(Constants.SSL_PROTO_TLSv1_0, filterByProtocol(allCiphers, Collections.singleton(Protoco   addListAlias(Constants.SSL_PROTO_TLSv1_0, filterByProtocol(allCiphers, Collections.singleton(Protoco
addListAlias(Constants.SSL_PROTO_SSLv3, filterByProtocol(allCiphers, Collections.singleton(Protocol.   addListAlias(Constants.SSL_PROTO_SSLv3, filterByProtocol(allCiphers, Collections.singleton(Protocol.
aliases.put(Constants.SSL_PROTO_TLSv1, aliases.get(Constants.SSL_PROTO_TLSv1_0));                      aliases.put(Constants.SSL_PROTO_TLSv1, aliases.get(Constants.SSL_PROTO_TLSv1_0));                   
addListAlias(Constants.SSL_PROTO_SSLv2, filterByProtocol(allCiphers, Collections.singleton(Protocol.   addListAlias(Constants.SSL_PROTO_SSLv2, filterByProtocol(allCiphers, Collections.singleton(Protocol.
addListAlias(DH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.DHr,    addListAlias(DH, filterByKeyExchange(allCiphers, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.DHr, 
Set&lt;Cipher&gt; adh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH));       Set&lt;Cipher&gt; adh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH));    
adh.retainAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));        adh.retainAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));     
addListAlias(ADH, adh);                                                                                addListAlias(ADH, adh);                                                                             
addListAlias(AES128, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES   addListAlias(AES128, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES
addListAlias(AES256, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES   addListAlias(AES256, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES
addListAlias(AES, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES128   addListAlias(AES, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES128
addListAlias(ARIA128, filterByEncryption(allCiphers, Collections.singleton(Encryption.ARIA128GCM)));   addListAlias(ARIA128, filterByEncryption(allCiphers, Collections.singleton(Encryption.ARIA128GCM)));
addListAlias(ARIA256, filterByEncryption(allCiphers, Collections.singleton(Encryption.ARIA256GCM)));   addListAlias(ARIA256, filterByEncryption(allCiphers, Collections.singleton(Encryption.ARIA256GCM)));
addListAlias(ARIA, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.ARIA1   addListAlias(ARIA, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.ARIA1
addListAlias(AESGCM, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES   addListAlias(AESGCM, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES
addListAlias(AESCCM, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES   addListAlias(AESCCM, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AES
addListAlias(AESCCM8, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AE   addListAlias(AESCCM8, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.AE
addListAlias(CAMELLIA, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.C   addListAlias(CAMELLIA, filterByEncryption(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Encryption.C
addListAlias(CAMELLIA128, filterByEncryption(allCiphers, Collections.singleton(Encryption.CAMELLIA12   addListAlias(CAMELLIA128, filterByEncryption(allCiphers, Collections.singleton(Encryption.CAMELLIA12
addListAlias(CAMELLIA256, filterByEncryption(allCiphers, Collections.singleton(Encryption.CAMELLIA25   addListAlias(CAMELLIA256, filterByEncryption(allCiphers, Collections.singleton(Encryption.CAMELLIA25
addListAlias(CHACHA20, filterByEncryption(allCiphers, Collections.singleton(Encryption.CHACHA20POLY1   addListAlias(CHACHA20, filterByEncryption(allCiphers, Collections.singleton(Encryption.CHACHA20POLY1
addListAlias(TRIPLE_DES, filterByEncryption(allCiphers, Collections.singleton(Encryption.TRIPLE_DES)   addListAlias(TRIPLE_DES, filterByEncryption(allCiphers, Collections.singleton(Encryption.TRIPLE_DES)
addListAlias(DES, filterByEncryption(allCiphers, Collections.singleton(Encryption.DES)));              addListAlias(DES, filterByEncryption(allCiphers, Collections.singleton(Encryption.DES)));           
addListAlias(RC4, filterByEncryption(allCiphers, Collections.singleton(Encryption.RC4)));              addListAlias(RC4, filterByEncryption(allCiphers, Collections.singleton(Encryption.RC4)));           
addListAlias(RC2, filterByEncryption(allCiphers, Collections.singleton(Encryption.RC2)));              addListAlias(RC2, filterByEncryption(allCiphers, Collections.singleton(Encryption.RC2)));           
addListAlias(IDEA, filterByEncryption(allCiphers, Collections.singleton(Encryption.IDEA)));            addListAlias(IDEA, filterByEncryption(allCiphers, Collections.singleton(Encryption.IDEA)));         
addListAlias(SEED, filterByEncryption(allCiphers, Collections.singleton(Encryption.SEED)));            addListAlias(SEED, filterByEncryption(allCiphers, Collections.singleton(Encryption.SEED)));         
addListAlias(MD5, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.MD5)));        addListAlias(MD5, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.MD5)));     
addListAlias(SHA1, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.SHA1)));      addListAlias(SHA1, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.SHA1)));   
aliases.put(SHA, aliases.get(SHA1));                                                                   aliases.put(SHA, aliases.get(SHA1));                                                                
addListAlias(SHA256, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.SHA256)))   addListAlias(SHA256, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.SHA256)))
addListAlias(SHA384, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.SHA384)))   addListAlias(SHA384, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.SHA384)))
addListAlias(aGOST, filterByAuthentication(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Authenticat   addListAlias(aGOST, filterByAuthentication(allCiphers, new HashSet&lt;&gt;(Arrays.asList(Authenticat
addListAlias(aGOST01, filterByAuthentication(allCiphers, Collections.singleton(Authentication.GOST01   addListAlias(aGOST01, filterByAuthentication(allCiphers, Collections.singleton(Authentication.GOST01
addListAlias(aGOST94, filterByAuthentication(allCiphers, Collections.singleton(Authentication.GOST94   addListAlias(aGOST94, filterByAuthentication(allCiphers, Collections.singleton(Authentication.GOST94
addListAlias(kGOST, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.GOST)));         addListAlias(kGOST, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.GOST)));      
addListAlias(GOST94, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.GOST94)))   addListAlias(GOST94, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.GOST94)))
addListAlias(GOST89MAC, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.GOST89   addListAlias(GOST89MAC, filterByMessageDigest(allCiphers, Collections.singleton(MessageDigest.GOST89
addListAlias(PSK, filter(allCiphers, null, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.PSK, KeyExc   addListAlias(PSK, filter(allCiphers, null, new HashSet&lt;&gt;(Arrays.asList(KeyExchange.PSK, KeyExc
addListAlias(aPSK, filterByAuthentication(allCiphers, Collections.singleton(Authentication.PSK)));     addListAlias(aPSK, filterByAuthentication(allCiphers, Collections.singleton(Authentication.PSK)));  
addListAlias(kPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.PSK)));           addListAlias(kPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.PSK)));        
addListAlias(kRSAPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.RSAPSK)));     addListAlias(kRSAPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.RSAPSK)));  
addListAlias(kECDHEPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHEPSK))   addListAlias(kECDHEPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.ECDHEPSK))
addListAlias(kDHEPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.DHEPSK)));     addListAlias(kDHEPSK, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.DHEPSK)));  
addListAlias(KRB5, filter(allCiphers, null, Collections.singleton(KeyExchange.KRB5), Collections.sin   addListAlias(KRB5, filter(allCiphers, null, Collections.singleton(KeyExchange.KRB5), Collections.sin
addListAlias(aSRP, filterByAuthentication(allCiphers, Collections.singleton(Authentication.SRP)));     addListAlias(aSRP, filterByAuthentication(allCiphers, Collections.singleton(Authentication.SRP)));  
addListAlias(kSRP, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.SRP)));           addListAlias(kSRP, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.SRP)));        
addListAlias(SRP, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.SRP)));            addListAlias(SRP, filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.SRP)));         
initialized = true;                                                                                    initialized = true;                                                                                 
// Despite what the OpenSSL docs say, DEFAULT also excludes SSLv2                                      // Despite what the OpenSSL docs say, DEFAULT also excludes SSLv2                                   
addListAlias(DEFAULT, parse("ALL:!EXPORT:!eNULL:!aNULL:!SSLv2:!DES:!RC2:!RC4:!DSS:!SEED:!IDEA:!CAMEL   addListAlias(DEFAULT, parse("ALL:!EXPORT:!eNULL:!aNULL:!SSLv2:!DES:!RC2:!RC4:!DSS:!SEED:!IDEA:!CAMEL
// COMPLEMENTOFDEFAULT is also not exactly as defined by the docs                                      // COMPLEMENTOFDEFAULT is also not exactly as defined by the docs                                   
LinkedHashSet&lt;Cipher&gt; complementOfDefault = filterByKeyExchange(all, new HashSet&lt;&gt;(Array   LinkedHashSet&lt;Cipher&gt; complementOfDefault = filterByKeyExchange(all, new HashSet&lt;&gt;(Array
complementOfDefault = filterByAuthentication(complementOfDefault, Collections.singleton(Authenticati   complementOfDefault = filterByAuthentication(complementOfDefault, Collections.singleton(Authenticati
complementOfDefault.removeAll(aliases.get(eNULL));                                                     complementOfDefault.removeAll(aliases.get(eNULL));                                                  
complementOfDefault.addAll(aliases.get(Constants.SSL_PROTO_SSLv2));                                    complementOfDefault.addAll(aliases.get(Constants.SSL_PROTO_SSLv2));                                 
complementOfDefault.addAll(aliases.get(EXPORT));                                                       complementOfDefault.addAll(aliases.get(EXPORT));                                                    
complementOfDefault.addAll(aliases.get(DES));                                                          complementOfDefault.addAll(aliases.get(DES));                                                       
complementOfDefault.addAll(aliases.get(TRIPLE_DES));                                                   complementOfDefault.addAll(aliases.get(TRIPLE_DES));                                                
complementOfDefault.addAll(aliases.get(RC2));                                                          complementOfDefault.addAll(aliases.get(RC2));                                                       
complementOfDefault.addAll(aliases.get(RC4));                                                          complementOfDefault.addAll(aliases.get(RC4));                                                       
complementOfDefault.addAll(aliases.get(aDSS));                                                         complementOfDefault.addAll(aliases.get(aDSS));                                                      
complementOfDefault.addAll(aliases.get(SEED));                                                         complementOfDefault.addAll(aliases.get(SEED));                                                      
complementOfDefault.addAll(aliases.get(IDEA));                                                         complementOfDefault.addAll(aliases.get(IDEA));                                                      
complementOfDefault.addAll(aliases.get(CAMELLIA));                                                     complementOfDefault.addAll(aliases.get(CAMELLIA));                                                  
complementOfDefault.addAll(aliases.get(AESCCM));                                                       complementOfDefault.addAll(aliases.get(AESCCM));                                                    
complementOfDefault.addAll(aliases.get(ARIA));                                                         complementOfDefault.addAll(aliases.get(ARIA));                                                      
defaultSort(complementOfDefault);                                                                      defaultSort(complementOfDefault);                                                                   
addListAlias(COMPLEMENTOFDEFAULT, complementOfDefault);                                                addListAlias(COMPLEMENTOFDEFAULT, complementOfDefault);                                             
}                                                                                                      }                                                                                                   
