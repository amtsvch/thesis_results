protected static final Number coerceToNumber(final Number number, final Class<?> type) throws ELException {
    if (Long.TYPE == type || Long.class.equals(type)) {
        return Long.valueOf(number.longValue());
    }
    if (Double.TYPE == type || Double.class.equals(type)) {
        return Double.valueOf(number.doubleValue());
    }
    if (Integer.TYPE == type || Integer.class.equals(type)) {
        return Integer.valueOf(number.intValue());
    }
    if (BigInteger.class.equals(type)) {
        if (number instanceof BigDecimal) {
            return ((BigDecimal) number).toBigInteger();
        }
        if (number instanceof BigInteger) {
            return number;
        }
        return BigInteger.valueOf(number.longValue());
    }
    if (BigDecimal.class.equals(type)) {
        if (number instanceof BigDecimal) {
            return number;
        }
        if (number instanceof BigInteger) {
            return new BigDecimal((BigInteger) number);
        }
        return new BigDecimal(number.doubleValue());
    }
    if (Byte.TYPE == type || Byte.class.equals(type)) {
        return Byte.valueOf(number.byteValue());
    }
    if (Short.TYPE == type || Short.class.equals(type)) {
        return Short.valueOf(number.shortValue());
    }
    if (Float.TYPE == type || Float.class.equals(type)) {
        return Float.valueOf(number.floatValue());
    }
    if (Number.class.equals(type)) {
        return number;
    }
    throw new ELException(MessageFactory.get("error.convert", number, number.getClass(), type));
}