/**
 * Sets the content type.
 *
 * This method must preserve any response charset that may already have
 * been set via a call to response.setContentType(), response.setLocale(),
 * or response.setCharacterEncoding().
 *
 * @param type the content type
 */
public void setContentType(String type) {
    if (type == null) {
        this.contentType = null;
        return;
    }
    MediaType m = null;
    try {
        m = MediaType.parseMediaType(new StringReader(type));
    } catch (IOException e) {
        // Ignore - null test below handles this
    }
    if (m == null) {
        // Invalid - Assume no charset and just pass through whatever
        // the user provided.
        this.contentType = type;
        return;
    }
    this.contentType = m.toStringNoCharset();
    String charsetValue = m.getCharset();
    if (charsetValue == null) {
        // No charset and we know value is valid as parser was successful
        // Pass-through user provided value in case user-agent is buggy and
        // requires specific format
        this.contentType = type;
    } else {
        // There is a charset so have to rebuild content-type without it
        this.contentType = m.toStringNoCharset();
        charsetValue = charsetValue.trim();
        if (charsetValue.length() > 0) {
            try {
                charset = B2CConverter.getCharset(charsetValue);
            } catch (UnsupportedEncodingException e) {
                log.warn(sm.getString("response.encoding.invalid", charsetValue), e);
            }
        }
    }
}