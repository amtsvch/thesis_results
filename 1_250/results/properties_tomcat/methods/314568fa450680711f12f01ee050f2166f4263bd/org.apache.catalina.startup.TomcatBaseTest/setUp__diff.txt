@Before                                                                                                @Before                                                                                             
@Override                                                                                              @Override                                                                                           
public void setUp() throws Exception {                                                                 public void setUp() throws Exception {                                                              
super.setUp();                                                                                         super.setUp();                                                                                      
// Trigger loading of catalina.properties                                                              // Trigger loading of catalina.properties                                                           
CatalinaProperties.getProperty("foo");                                                                 CatalinaProperties.getProperty("foo");                                                              
File appBase = new File(getTemporaryDirectory(), "webapps");                                           File appBase = new File(getTemporaryDirectory(), "webapps");                                        
if (!appBase.exists() && !appBase.mkdir()) {                                                           if (!appBase.exists() && !appBase.mkdir()) {                                                        
Assert.fail("Unable to create appBase for test");                                                      Assert.fail("Unable to create appBase for test");                                                   
}                                                                                                      }                                                                                                   
tomcat = new TomcatWithFastSessionIDs();                                                               tomcat = new TomcatWithFastSessionIDs();                                                            
String protocol = getProtocol();                                                                       String protocol = getProtocol();                                                                    
Connector connector = new Connector(protocol);                                                         Connector connector = new Connector(protocol);                                                      
// Listen only on localhost                                                                            // Listen only on localhost                                                                         
Assert.assertTrue(connector.setProperty("address", InetAddress.getByName("localhost").getHostAddress   Assert.assertTrue(connector.setProperty("address", InetAddress.getByName("localhost").getHostAddress
// Use random free port                                                                                // Use random free port                                                                             
connector.setPort(0);                                                                                  connector.setPort(0);                                                                               
// Mainly set to reduce timeouts during async tests                                                    // Mainly set to reduce timeouts during async tests                                                 
Assert.assertTrue(connector.setProperty("connectionTimeout", "3000"));                                 Assert.assertTrue(connector.setProperty("connectionTimeout", "3000"));                              
tomcat.getService().addConnector(connector);                                                           tomcat.getService().addConnector(connector);                                                        
tomcat.setConnector(connector);                                                                        tomcat.setConnector(connector);                                                                     
// Add AprLifecycleListener if we are using the Apr connector                                        |                                                                                                     
if (protocol.contains("Apr")) {                                                                      |                                                                                                     
StandardServer server = (StandardServer) tomcat.getServer();                                         |                                                                                                     
AprLifecycleListener listener = new AprLifecycleListener();                                          |                                                                                                     
listener.setSSLRandomSeed("/dev/urandom");                                                           |                                                                                                     
server.addLifecycleListener(listener);                                                               |                                                                                                     
}                                                                                                    |                                                                                                     
File catalinaBase = getTemporaryDirectory();                                                           File catalinaBase = getTemporaryDirectory();                                                        
tomcat.setBaseDir(catalinaBase.getAbsolutePath());                                                     tomcat.setBaseDir(catalinaBase.getAbsolutePath());                                                  
tomcat.getHost().setAppBase(appBase.getAbsolutePath());                                                tomcat.getHost().setAppBase(appBase.getAbsolutePath());                                             
accessLogEnabled = Boolean.parseBoolean(System.getProperty("tomcat.test.accesslog", "false"));         accessLogEnabled = Boolean.parseBoolean(System.getProperty("tomcat.test.accesslog", "false"));      
if (accessLogEnabled) {                                                                                if (accessLogEnabled) {                                                                             
String accessLogDirectory = System.getProperty("tomcat.test.reports");                                 String accessLogDirectory = System.getProperty("tomcat.test.reports");                              
if (accessLogDirectory == null) {                                                                      if (accessLogDirectory == null) {                                                                   
accessLogDirectory = new File(getBuildDirectory(), "logs").toString();                                 accessLogDirectory = new File(getBuildDirectory(), "logs").toString();                              
}                                                                                                      }                                                                                                   
AccessLogValve alv = new AccessLogValve();                                                             AccessLogValve alv = new AccessLogValve();                                                          
alv.setDirectory(accessLogDirectory);                                                                  alv.setDirectory(accessLogDirectory);                                                               
alv.setPattern("%h %l %u %t \"%r\" %s %b %I %D");                                                      alv.setPattern("%h %l %u %t \"%r\" %s %b %I %D");                                                   
tomcat.getHost().getPipeline().addValve(alv);                                                          tomcat.getHost().getPipeline().addValve(alv);                                                       
}                                                                                                      }                                                                                                   
// Cannot delete the whole tempDir, because logs are there,                                            // Cannot delete the whole tempDir, because logs are there,                                         
// but delete known subdirectories of it.                                                              // but delete known subdirectories of it.                                                           
addDeleteOnTearDown(new File(catalinaBase, "webapps"));                                                addDeleteOnTearDown(new File(catalinaBase, "webapps"));                                             
addDeleteOnTearDown(new File(catalinaBase, "work"));                                                   addDeleteOnTearDown(new File(catalinaBase, "work"));                                                
}                                                                                                      }                                                                                                   
