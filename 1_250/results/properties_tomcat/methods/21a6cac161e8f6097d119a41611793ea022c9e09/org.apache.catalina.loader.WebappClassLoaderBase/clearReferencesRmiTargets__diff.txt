/**                                                                                                    /**                                                                                                 
* This depends on the internals of the Sun JVM so it does everything by                                * This depends on the internals of the Sun JVM so it does everything by                             
* reflection.                                                                                          * reflection.                                                                                       
*/                                                                                                     */                                                                                                  
private void clearReferencesRmiTargets() {                                                             private void clearReferencesRmiTargets() {                                                          
try {                                                                                                  try {                                                                                               
// Need access to the ccl field of sun.rmi.transport.Target to find                                    // Need access to the ccl field of sun.rmi.transport.Target to find                                 
// the leaks                                                                                           // the leaks                                                                                        
Class&lt;?&gt; objectTargetClass = Class.forName("sun.rmi.transport.Target");                          Class&lt;?&gt; objectTargetClass = Class.forName("sun.rmi.transport.Target");                       
Field cclField = objectTargetClass.getDeclaredField("ccl");                                            Field cclField = objectTargetClass.getDeclaredField("ccl");                                         
cclField.setAccessible(true);                                                                          cclField.setAccessible(true);                                                                       
// Need access to the stub field to report the leaks                                                   // Need access to the stub field to report the leaks                                                
Field stubField = objectTargetClass.getDeclaredField("stub");                                          Field stubField = objectTargetClass.getDeclaredField("stub");                                       
stubField.setAccessible(true);                                                                         stubField.setAccessible(true);                                                                      
// Clear the objTable map                                                                              // Clear the objTable map                                                                           
Class&lt;?&gt; objectTableClass = Class.forName("sun.rmi.transport.ObjectTable");                      Class&lt;?&gt; objectTableClass = Class.forName("sun.rmi.transport.ObjectTable");                   
Field objTableField = objectTableClass.getDeclaredField("objTable");                                   Field objTableField = objectTableClass.getDeclaredField("objTable");                                
objTableField.setAccessible(true);                                                                     objTableField.setAccessible(true);                                                                  
Object objTable = objTableField.get(null);                                                             Object objTable = objTableField.get(null);                                                          
if (objTable == null) {                                                                                if (objTable == null) {                                                                             
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
Field tableLockField = objectTableClass.getDeclaredField("tableLock");                                 Field tableLockField = objectTableClass.getDeclaredField("tableLock");                              
tableLockField.setAccessible(true);                                                                    tableLockField.setAccessible(true);                                                                 
Object tableLock = tableLockField.get(null);                                                           Object tableLock = tableLockField.get(null);                                                        
synchronized (tableLock) {                                                                             synchronized (tableLock) {                                                                          
// Iterate over the values in the table                                                                // Iterate over the values in the table                                                             
if (objTable instanceof Map&lt;?, ?&gt;) {                                                             if (objTable instanceof Map&lt;?, ?&gt;) {                                                          
Iterator&lt;?&gt; iter = ((Map&lt;?, ?&gt;) objTable).values().iterator();                             Iterator&lt;?&gt; iter = ((Map&lt;?, ?&gt;) objTable).values().iterator();                          
while (iter.hasNext()) {                                                                               while (iter.hasNext()) {                                                                            
Object obj = iter.next();                                                                              Object obj = iter.next();                                                                           
Object cclObject = cclField.get(obj);                                                                  Object cclObject = cclField.get(obj);                                                               
if (this == cclObject) {                                                                               if (this == cclObject) {                                                                            
iter.remove();                                                                                         iter.remove();                                                                                      
Object stubObject = stubField.get(obj);                                                                Object stubObject = stubField.get(obj);                                                             
log.error(sm.getString("webappClassLoader.clearRmi", stubObject.getClass().getName(), stubObject));    log.error(sm.getString("webappClassLoader.clearRmi", stubObject.getClass().getName(), stubObject)); 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Clear the implTable map                                                                             // Clear the implTable map                                                                          
Field implTableField = objectTableClass.getDeclaredField("implTable");                                 Field implTableField = objectTableClass.getDeclaredField("implTable");                              
implTableField.setAccessible(true);                                                                    implTableField.setAccessible(true);                                                                 
Object implTable = implTableField.get(null);                                                           Object implTable = implTableField.get(null);                                                        
if (implTable == null) {                                                                               if (implTable == null) {                                                                            
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Iterate over the values in the table                                                                // Iterate over the values in the table                                                             
if (implTable instanceof Map&lt;?, ?&gt;) {                                                            if (implTable instanceof Map&lt;?, ?&gt;) {                                                         
Iterator&lt;?&gt; iter = ((Map&lt;?, ?&gt;) implTable).values().iterator();                            Iterator&lt;?&gt; iter = ((Map&lt;?, ?&gt;) implTable).values().iterator();                         
while (iter.hasNext()) {                                                                               while (iter.hasNext()) {                                                                            
Object obj = iter.next();                                                                              Object obj = iter.next();                                                                           
Object cclObject = cclField.get(obj);                                                                  Object cclObject = cclField.get(obj);                                                               
if (this == cclObject) {                                                                               if (this == cclObject) {                                                                            
iter.remove();                                                                                         iter.remove();                                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
log.info(sm.getString("webappClassLoader.clearRmiInfo", getContextName()), e);                         log.info(sm.getString("webappClassLoader.clearRmiInfo", getContextName()), e);                      
} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessExceptio   } catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessExceptio
log.warn(sm.getString("webappClassLoader.clearRmiFail", getContextName()), e);                         log.warn(sm.getString("webappClassLoader.clearRmiFail", getContextName()), e);                      
} catch (Exception e) {                                                                              | } catch (InaccessibleObjectException e) {                                                           
JreCompat jreCompat = JreCompat.getInstance();                                                       | // Must be running on without the necessary command line options.                                   
if (jreCompat.isInstanceOfInaccessibleObjectException(e)) {                                          | log.warn(sm.getString("webappClassLoader.addExportsRmi", this.getClass().getModule().getName()));   
// Must be running on Java 9 without the necessary command line                                      |                                                                                                     
// options.                                                                                          |                                                                                                     
String currentModule = JreCompat.getInstance().getModuleName(this.getClass());                       |                                                                                                     
log.warn(sm.getString("webappClassLoader.addExportsRmi", currentModule));                            |                                                                                                     
} else {                                                                                             |                                                                                                     
// Re-throw all other exceptions                                                                     |                                                                                                     
throw e;                                                                                             |                                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                    |                                                                                                     
