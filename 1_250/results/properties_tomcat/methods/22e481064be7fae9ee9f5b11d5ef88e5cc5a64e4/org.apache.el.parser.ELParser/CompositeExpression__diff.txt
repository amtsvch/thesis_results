/*                                                                                                     /*                                                                                                  
* CompositeExpression                                                                                  * CompositeExpression                                                                               
* Allow most flexible parsing, restrict by examining                                                   * Allow most flexible parsing, restrict by examining                                                
* type of returned node                                                                                * type of returned node                                                                             
*/                                                                                                     */                                                                                                  
final public AstCompositeExpression CompositeExpression() throws ParseException {                      final public AstCompositeExpression CompositeExpression() throws ParseException {                   
/*@bgen(jjtree) CompositeExpression */                                                                 /*@bgen(jjtree) CompositeExpression */                                                              
AstCompositeExpression jjtn000 = new AstCompositeExpression(JJTCOMPOSITEEXPRESSION);                   AstCompositeExpression jjtn000 = new AstCompositeExpression(JJTCOMPOSITEEXPRESSION);                
boolean jjtc000 = true;                                                                                boolean jjtc000 = true;                                                                             
jjtree.openNodeScope(jjtn000);                                                                         jjtree.openNodeScope(jjtn000);                                                                      
try {                                                                                                  try {                                                                                               
label_1: while (true) {                                                                                label_1: while (true) {                                                                             
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                         | switch((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {                                                      
case LITERAL_EXPRESSION:                                                                               case LITERAL_EXPRESSION:                                                                            
case START_DYNAMIC_EXPRESSION:                                                                         case START_DYNAMIC_EXPRESSION:                                                                      
case START_DEFERRED_EXPRESSION:                                                                        case START_DEFERRED_EXPRESSION:                                                                     
                                                                                                     | {                                                                                                   
;                                                                                                      ;                                                                                                   
break;                                                                                                 break;                                                                                              
                                                                                                     | }                                                                                                   
default:                                                                                               default:                                                                                            
jj_la1[0] = jj_gen;                                                                                    jj_la1[0] = jj_gen;                                                                                 
break label_1;                                                                                         break label_1;                                                                                      
}                                                                                                      }                                                                                                   
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                                                         | switch((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {                                                      
case START_DEFERRED_EXPRESSION:                                                                        case START_DEFERRED_EXPRESSION:                                                                     
                                                                                                     | {                                                                                                   
DeferredExpression();                                                                                  DeferredExpression();                                                                               
break;                                                                                                 break;                                                                                              
                                                                                                     | }                                                                                                   
case START_DYNAMIC_EXPRESSION:                                                                         case START_DYNAMIC_EXPRESSION:                                                                      
                                                                                                     | {                                                                                                   
DynamicExpression();                                                                                   DynamicExpression();                                                                                
break;                                                                                                 break;                                                                                              
                                                                                                     | }                                                                                                   
case LITERAL_EXPRESSION:                                                                               case LITERAL_EXPRESSION:                                                                            
                                                                                                     | {                                                                                                   
LiteralExpression();                                                                                   LiteralExpression();                                                                                
break;                                                                                                 break;                                                                                              
                                                                                                     | }                                                                                                   
default:                                                                                               default:                                                                                            
jj_la1[1] = jj_gen;                                                                                    jj_la1[1] = jj_gen;                                                                                 
jj_consume_token(-1);                                                                                  jj_consume_token(-1);                                                                               
throw new ParseException();                                                                            throw new ParseException();                                                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
jj_consume_token(0);                                                                                   jj_consume_token(0);                                                                                
jjtree.closeNodeScope(jjtn000, true);                                                                  jjtree.closeNodeScope(jjtn000, true);                                                               
jjtc000 = false;                                                                                       jjtc000 = false;                                                                                    
{                                                                                                      {                                                                                                   
if (true) {                                                                                          | if ("" != null) {                                                                                   
return jjtn000;                                                                                        return jjtn000;                                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (Throwable jjte000) {                                                                          } catch (Throwable jjte000) {                                                                       
if (jjtc000) {                                                                                         if (jjtc000) {                                                                                      
jjtree.clearNodeScope(jjtn000);                                                                        jjtree.clearNodeScope(jjtn000);                                                                     
jjtc000 = false;                                                                                       jjtc000 = false;                                                                                    
} else {                                                                                               } else {                                                                                            
jjtree.popNode();                                                                                      jjtree.popNode();                                                                                   
}                                                                                                      }                                                                                                   
if (jjte000 instanceof RuntimeException) {                                                             if (jjte000 instanceof RuntimeException) {                                                          
{                                                                                                      {                                                                                                   
if (true) {                                                                                            if (true) {                                                                                         
throw (RuntimeException) jjte000;                                                                      throw (RuntimeException) jjte000;                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (jjte000 instanceof ParseException) {                                                               if (jjte000 instanceof ParseException) {                                                            
{                                                                                                      {                                                                                                   
if (true) {                                                                                            if (true) {                                                                                         
throw (ParseException) jjte000;                                                                        throw (ParseException) jjte000;                                                                     
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
{                                                                                                      {                                                                                                   
if (true) {                                                                                            if (true) {                                                                                         
throw (Error) jjte000;                                                                                 throw (Error) jjte000;                                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} finally {                                                                                            } finally {                                                                                         
if (jjtc000) {                                                                                         if (jjtc000) {                                                                                      
jjtree.closeNodeScope(jjtn000, true);                                                                  jjtree.closeNodeScope(jjtn000, true);                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
throw new Error("Missing return statement in function");                                               throw new Error("Missing return statement in function");                                            
}                                                                                                      }                                                                                                   
