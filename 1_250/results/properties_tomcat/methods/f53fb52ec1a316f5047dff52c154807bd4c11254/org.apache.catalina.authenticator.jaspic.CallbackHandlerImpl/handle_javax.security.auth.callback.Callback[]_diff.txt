@Override                                                                                              @Override                                                                                           
public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {            public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {         
String name = null;                                                                                    String name = null;                                                                                 
Principal principal = null;                                                                            Principal principal = null;                                                                         
Subject subject = null;                                                                                Subject subject = null;                                                                             
String[] groups = null;                                                                                String[] groups = null;                                                                             
if (callbacks != null) {                                                                               if (callbacks != null) {                                                                            
// Need to combine data from multiple callbacks so use this to hold                                    // Need to combine data from multiple callbacks so use this to hold                                 
// the data                                                                                            // the data                                                                                         
// Process the callbacks                                                                               // Process the callbacks                                                                            
for (Callback callback : callbacks) {                                                                  for (Callback callback : callbacks) {                                                               
if (callback instanceof CallerPrincipalCallback) {                                                     if (callback instanceof CallerPrincipalCallback) {                                                  
CallerPrincipalCallback cpc = (CallerPrincipalCallback) callback;                                      CallerPrincipalCallback cpc = (CallerPrincipalCallback) callback;                                   
name = cpc.getName();                                                                                  name = cpc.getName();                                                                               
principal = cpc.getPrincipal();                                                                        principal = cpc.getPrincipal();                                                                     
subject = cpc.getSubject();                                                                            subject = cpc.getSubject();                                                                         
} else if (callback instanceof GroupPrincipalCallback) {                                               } else if (callback instanceof GroupPrincipalCallback) {                                            
GroupPrincipalCallback gpc = (GroupPrincipalCallback) callback;                                        GroupPrincipalCallback gpc = (GroupPrincipalCallback) callback;                                     
groups = gpc.getGroups();                                                                              groups = gpc.getGroups();                                                                           
} else if (callback instanceof PasswordValidationCallback) {                                           } else if (callback instanceof PasswordValidationCallback) {                                        
if (container == null) {                                                                               if (container == null) {                                                                            
log.warn(sm.getString("callbackHandlerImpl.containerMissing", callback.getClass().getName()));         log.warn(sm.getString("callbackHandlerImpl.containerMissing", callback.getClass().getName()));      
} else if (container.getRealm() == null) {                                                             } else if (container.getRealm() == null) {                                                          
log.warn(sm.getString("callbackHandlerImpl.realmMissing", callback.getClass().getName(), container.g   log.warn(sm.getString("callbackHandlerImpl.realmMissing", callback.getClass().getName(), container.g
} else {                                                                                               } else {                                                                                            
PasswordValidationCallback pvc = (PasswordValidationCallback) callback;                                PasswordValidationCallback pvc = (PasswordValidationCallback) callback;                             
principal = container.getRealm().authenticate(pvc.getUsername(), String.valueOf(pvc.getPassword()));   principal = container.getRealm().authenticate(pvc.getUsername(), String.valueOf(pvc.getPassword()));
                                                                                                     | pvc.setResult(principal != null);                                                                   
subject = pvc.getSubject();                                                                            subject = pvc.getSubject();                                                                         
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
log.error(sm.getString("callbackHandlerImpl.jaspicCallbackMissing", callback.getClass().getName()));   log.error(sm.getString("callbackHandlerImpl.jaspicCallbackMissing", callback.getClass().getName()));
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// Create the GenericPrincipal                                                                         // Create the GenericPrincipal                                                                      
Principal gp = getPrincipal(principal, name, groups);                                                  Principal gp = getPrincipal(principal, name, groups);                                               
if (subject != null && gp != null) {                                                                   if (subject != null && gp != null) {                                                                
subject.getPrivateCredentials().add(gp);                                                               subject.getPrivateCredentials().add(gp);                                                            
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
