/**
 * Add data to the buffer.
 *
 * @param src Bytes array
 * @param off Offset
 * @param len Length
 * @throws IOException Writing overflow data to the output channel failed
 */
public void append(byte[] src, int off, int len) throws IOException {
    // will grow, up to limit
    makeSpace(len);
    int limit = getLimitInternal();
    // Optimize on a common case.
    // If the buffer is empty and the source is going to fill up all the
    // space in buffer, may as well write it directly to the output,
    // and avoid an extra copy
    if (len == limit && end == start && out != null) {
        out.realWriteBytes(src, off, len);
        return;
    }
    // if we are below the limit
    if (len <= limit - end) {
        System.arraycopy(src, off, buff, end, len);
        end += len;
        return;
    }
    // Need more space than we can afford, need to flush buffer.
    // The buffer is already at (or bigger than) limit.
    // We chunk the data into slices fitting in the buffer limit, although
    // if the data is written directly if it doesn't fit.
    int avail = limit - end;
    System.arraycopy(src, off, buff, end, avail);
    end += avail;
    flushBuffer();
    int remain = len - avail;
    while (remain > (limit - end)) {
        out.realWriteBytes(src, (off + len) - remain, limit - end);
        remain = remain - (limit - end);
    }
    System.arraycopy(src, (off + len) - remain, buff, end, remain);
    end += remain;
}