/**                                                                                                    /**                                                                                                 
* Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum    * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum 
* bytes. Returns how many bytes were actually extracted.                                               * bytes. Returns how many bytes were actually extracted.                                            
* &lt;p&gt;                                                                                            * &lt;p&gt;                                                                                         
* Package protected for access from I/O streams.                                                       * Package protected for access from I/O streams.                                                    
*                                                                                                      *                                                                                                   
* @param b                                                                                             * @param b                                                                                          
*            byte[] array to extract the buffered data into.                                           *            byte[] array to extract the buffered data into.                                        
* @param bPos                                                                                          * @param bPos                                                                                       
*            position in byte[] array to start extraction at.                                          *            position in byte[] array to start extraction at.                                       
* @param bAvail                                                                                        * @param bAvail                                                                                     
*            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available)   *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available)
* @param context                                                                                       * @param context                                                                                    
*            the context to be used                                                                    *            the context to be used                                                                 
* @return The number of bytes successfully extracted into the provided byte[] array.                   * @return The number of bytes successfully extracted into the provided byte[] array.                
*/                                                                                                     */                                                                                                  
int readResults(final byte[] b, final int bPos, final int bAvail, final Context context) {             int readResults(final byte[] b, final int bPos, final int bAvail, final Context context) {          
if (context.buffer != null) {                                                                        | if (hasData(context)) {                                                                             
final int len = Math.min(available(context), bAvail);                                                  final int len = Math.min(available(context), bAvail);                                               
System.arraycopy(context.buffer, context.readPos, b, bPos, len);                                       System.arraycopy(context.buffer, context.readPos, b, bPos, len);                                    
context.readPos += len;                                                                                context.readPos += len;                                                                             
if (context.readPos &gt;= context.pos) {                                                             | if (!hasData(context)) {                                                                            
// so hasData() will return false, and this method can return -1                                     | // All data read.                                                                                   
context.buffer = null;                                                                               | // Reset position markers but do not set buffer to null to allow its reuse.                         
                                                                                                     | // hasData(context) will still return false, and this method will return 0 until                    
                                                                                                     | // more data is available, or -1 if EOF.                                                            
                                                                                                     | context.pos = context.readPos = 0;                                                                  
}                                                                                                      }                                                                                                   
return len;                                                                                            return len;                                                                                         
}                                                                                                      }                                                                                                   
return context.eof ? EOF : 0;                                                                          return context.eof ? EOF : 0;                                                                       
}                                                                                                      }                                                                                                   
