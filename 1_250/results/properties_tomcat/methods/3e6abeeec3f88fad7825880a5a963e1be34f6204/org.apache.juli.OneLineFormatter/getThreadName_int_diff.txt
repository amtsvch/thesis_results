/**
 * LogRecord has threadID but no thread name.
 * LogRecord uses an int for thread ID but thread IDs are longs.
 * If the real thread ID > (Integer.MAXVALUE / 2) LogRecord uses it's own
 * ID in an effort to avoid clashes due to overflow.
 * <p>
 * Words fail me to describe what I think of the design decision to use an
 * int in LogRecord for a long value and the resulting mess that follows.
 */
private static String getThreadName(int logRecordThreadId) {
    Map<Integer, String> cache = threadNameCache.get();
    String result = cache.get(Integer.valueOf(logRecordThreadId));
    if (result != null) {
        return result;
    }
    if (logRecordThreadId > Integer.MAX_VALUE / 2) {
        result = UNKNOWN_THREAD_NAME + logRecordThreadId;
    } else {
        // Double checked locking OK as threadMxBean is volatile
        if (threadMxBean == null) {
            synchronized (threadMxBeanLock) {
                if (threadMxBean == null) {
                    threadMxBean = ManagementFactory.getThreadMXBean();
                }
            }
        }
        ThreadInfo threadInfo = threadMxBean.getThreadInfo(logRecordThreadId);
        if (threadInfo == null) {
            return Long.toString(logRecordThreadId);
        }
        result = threadInfo.getThreadName();
    }
    cache.put(Integer.valueOf(logRecordThreadId), result);
    return result;
}