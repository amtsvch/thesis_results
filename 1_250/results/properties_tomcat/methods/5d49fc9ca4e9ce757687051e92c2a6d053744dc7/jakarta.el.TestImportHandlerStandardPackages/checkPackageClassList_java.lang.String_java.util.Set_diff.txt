private void checkPackageClassList(String packageName, Set&lt;String&gt; classNames) throws Exceptio   private void checkPackageClassList(String packageName, Set&lt;String&gt; classNames) throws Exceptio
if ("java.lang".equals(packageName)) {                                                                 if ("java.lang".equals(packageName)) {                                                              
// The code below is designed to run on Java 9 so skip this check                                    | // The intention is that this test will catch new classes when the                                  
// if running on Java 8. The test has previously been run with Java                                  | // tests are run on a newer JRE.                                                                    
// 9 (and later) so it is not necessary that this is executed on                                     |                                                                                                     
// every test run. The intention is that it will catch new classes                                   |                                                                                                     
// when the tests are run on a newer JRE.                                                            |                                                                                                     
// The latest version of the JRE where this test is known to pass is                                   // The latest version of the JRE where this test is known to pass is                                
// - OpenJDK 14 EA 27                                                                                | // - OpenJDK 17 EA 28                                                                               
if (!JreCompat.isJre9Available()) {                                                                  |                                                                                                     
return;                                                                                              |                                                                                                     
}                                                                                                    |                                                                                                     
getJavaBaseClasses().filter(c -&gt; (c.startsWith("java/lang/"))).filter(// Exclude sub-packages       getJavaBaseClasses().filter(c -&gt; (c.startsWith("java/lang/"))).filter(// Exclude sub-packages    
c -&gt; c.lastIndexOf('/') == 9).filter(// Exclude non-class resources                                 c -&gt; c.lastIndexOf('/') == 9).filter(// Exclude non-class resources                              
c -&gt; c.endsWith(".class")).map(// Extract class name                                                c -&gt; c.endsWith(".class")).map(// Extract class name                                             
c -&gt; c.substring(10, c.length() - 6)).map(c -&gt; {                                                 c -&gt; c.substring(10, c.length() - 6)).map(c -&gt; {                                              
try {                                                                                                  try {                                                                                               
// Get the class object                                                                                // Get the class object                                                                             
return Class.forName("java.lang." + c);                                                                return Class.forName("java.lang." + c);                                                             
} catch (ClassNotFoundException e) {                                                                   } catch (ClassNotFoundException e) {                                                                
throw new RuntimeException();                                                                          throw new RuntimeException();                                                                       
}                                                                                                      }                                                                                                   
}).filter(// Exclude non-public classes                                                                }).filter(// Exclude non-public classes                                                             
c -&gt; Modifier.isPublic(c.getModifiers())).map(// Back to the class name                             c -&gt; Modifier.isPublic(c.getModifiers())).map(// Back to the class name                          
c -&gt; c.getName().substring(10)).map(c -&gt; c.replace('$', '.')).filter(// Skip classes already l   c -&gt; c.getName().substring(10)).map(c -&gt; c.replace('$', '.')).filter(// Skip classes already l
c -&gt; !classNames.contains(c)).filter(// Skip public inner class                                     c -&gt; !classNames.contains(c)).filter(// Skip public inner class                                  
c -&gt; !c.startsWith("FdLibm.")).filter(// Skip public inner class                                    c -&gt; !c.startsWith("FdLibm.")).filter(// Skip public inner class                                 
c -&gt; !c.startsWith("LiveStackFrame.")).filter(// Skip public inner class                            c -&gt; !c.startsWith("LiveStackFrame.")).filter(// Skip public inner class                         
c -&gt; !c.startsWith("WeakPairMap.")).forEach(// Should have in list                                  c -&gt; !c.startsWith("WeakPairMap.")).forEach(// Should have in list                               
c -&gt; Assert.fail("java.lang." + c));                                                                c -&gt; Assert.fail("java.lang." + c));                                                             
} else {                                                                                               } else {                                                                                            
// When this test runs, the class loader will be loading resources                                     // When this test runs, the class loader will be loading resources                                  
// from a directory for each of these packages.                                                        // from a directory for each of these packages.                                                     
ClassLoader cl = Thread.currentThread().getContextClassLoader();                                       ClassLoader cl = Thread.currentThread().getContextClassLoader();                                    
String path = packageName.replace('.', '/');                                                           String path = packageName.replace('.', '/');                                                        
Enumeration&lt;URL&gt; resources = cl.getResources(path);                                              Enumeration&lt;URL&gt; resources = cl.getResources(path);                                           
while (resources.hasMoreElements()) {                                                                  while (resources.hasMoreElements()) {                                                               
URL resource = resources.nextElement();                                                                URL resource = resources.nextElement();                                                             
URI uri = resource.toURI();                                                                            URI uri = resource.toURI();                                                                         
// Gump includes some JARs on classpath - skip them                                                    // Gump includes some JARs on classpath - skip them                                                 
if (!"file".equals(uri.getScheme())) {                                                                 if (!"file".equals(uri.getScheme())) {                                                              
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
File dir = new File(uri);                                                                              File dir = new File(uri);                                                                           
String[] files = dir.list();                                                                           String[] files = dir.list();                                                                        
Assert.assertNotNull(files);                                                                           Assert.assertNotNull(files);                                                                        
for (String file : files) {                                                                            for (String file : files) {                                                                         
if (!file.endsWith(".class")) {                                                                        if (!file.endsWith(".class")) {                                                                     
// Skip non-class resources                                                                            // Skip non-class resources                                                                         
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (file.startsWith("Test")) {                                                                         if (file.startsWith("Test")) {                                                                      
// Skip test resources                                                                                 // Skip test resources                                                                              
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (file.matches(".*\\$[0-9]?\\.class")) {                                                             if (file.matches(".*\\$[0-9]?\\.class")) {                                                          
// Skip anonymous inner classes                                                                        // Skip anonymous inner classes                                                                     
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
String name = file.substring(0, file.length() - 6);                                                    String name = file.substring(0, file.length() - 6);                                                 
name = name.replace('$', '.');                                                                         name = name.replace('$', '.');                                                                      
if (classNames.contains(name)) {                                                                       if (classNames.contains(name)) {                                                                    
// Skip classes already known                                                                          // Skip classes already known                                                                       
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
File f = new File(dir, file);                                                                          File f = new File(dir, file);                                                                       
if (!f.isFile()) {                                                                                     if (!f.isFile()) {                                                                                  
// Skip directories                                                                                    // Skip directories                                                                                 
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
Class&lt;?&gt; clazz = Class.forName(packageName + "." + name.replaceAll("\\.", "\\$"));               Class&lt;?&gt; clazz = Class.forName(packageName + "." + name.replaceAll("\\.", "\\$"));            
if (!Modifier.isPublic(clazz.getModifiers())) {                                                        if (!Modifier.isPublic(clazz.getModifiers())) {                                                     
// Skip non-public classes                                                                             // Skip non-public classes                                                                          
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// There should be nothing left unless we missed something                                             // There should be nothing left unless we missed something                                          
Assert.fail(packageName + "." + name);                                                                 Assert.fail(packageName + "." + name);                                                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
