// thread.stop()
@SuppressWarnings("deprecation")
private void clearReferencesThreads() {
    Thread[] threads = getThreads();
    List<Thread> threadsToStop = new ArrayList<>();
    // Iterate over the set of threads
    for (Thread thread : threads) {
        if (thread != null) {
            ClassLoader ccl = thread.getContextClassLoader();
            if (ccl == this) {
                // Don't warn about this thread
                if (thread == Thread.currentThread()) {
                    continue;
                }
                final String threadName = thread.getName();
                // JVM controlled threads
                ThreadGroup tg = thread.getThreadGroup();
                if (tg != null && JVM_THREAD_GROUP_NAMES.contains(tg.getName())) {
                    // HttpClient keep-alive threads
                    if (clearReferencesHttpClientKeepAliveThread && threadName.equals("Keep-Alive-Timer")) {
                        thread.setContextClassLoader(parent);
                        log.debug(sm.getString("webappClassLoader.checkThreadsHttpClient"));
                    }
                    // Don't warn about remaining JVM controlled threads
                    continue;
                }
                // Skip threads that have already died
                if (!thread.isAlive()) {
                    continue;
                }
                // TimerThread can be stopped safely so treat separately
                // "java.util.TimerThread" in Sun/Oracle JDK
                // "java.util.Timer$TimerImpl" in Apache Harmony and in IBM JDK
                if (thread.getClass().getName().startsWith("java.util.Timer") && clearReferencesStopTimerThreads) {
                    clearReferencesStopTimerThread(thread);
                    continue;
                }
                if (isRequestThread(thread)) {
                    log.warn(sm.getString("webappClassLoader.stackTraceRequestThread", getContextName(), threadName, getStackTrace(thread)));
                } else {
                    log.warn(sm.getString("webappClassLoader.stackTrace", getContextName(), threadName, getStackTrace(thread)));
                }
                // Don't try and stop the threads unless explicitly
                // configured to do so
                if (!clearReferencesStopThreads) {
                    continue;
                }
                // If the thread has been started via an executor, try
                // shutting down the executor
                boolean usingExecutor = false;
                try {
                    // Runnable wrapped by Thread
                    // "target" in Sun/Oracle JDK
                    // "runnable" in IBM JDK
                    // "action" in Apache Harmony
                    Object target = null;
                    for (String fieldName : new String[] { "target", "runnable", "action" }) {
                        try {
                            Field targetField = thread.getClass().getDeclaredField(fieldName);
                            targetField.setAccessible(true);
                            target = targetField.get(thread);
                            break;
                        } catch (NoSuchFieldException nfe) {
                            continue;
                        }
                    }
                    // "java.util.concurrent" code is in public domain,
                    // so all implementations are similar
                    if (target != null && target.getClass().getCanonicalName() != null && target.getClass().getCanonicalName().equals("java.util.concurrent.ThreadPoolExecutor.Worker")) {
                        Field executorField = target.getClass().getDeclaredField("this$0");
                        executorField.setAccessible(true);
                        Object executor = executorField.get(target);
                        if (executor instanceof ThreadPoolExecutor) {
                            ((ThreadPoolExecutor) executor).shutdownNow();
                            usingExecutor = true;
                        }
                    }
                } catch (/*SecurityException |*/
                NoSuchFieldException | /*IllegalArgumentException |*/
                IllegalAccessException | RuntimeException e) {
                    // FIXME: InaccessibleObjectException is only available in Java 9+,
                    // swapped for RuntimeException for now
                    log.warn(sm.getString("webappClassLoader.stopThreadFail", thread.getName(), getContextName()), e);
                }
                // Stopping an executor automatically interrupts the
                // associated threads. For non-executor threads, interrupt
                // them here.
                if (!usingExecutor && !thread.isInterrupted()) {
                    thread.interrupt();
                }
                // Threads are expected to take a short time to stop after
                // being interrupted. Make a note of all threads that are
                // expected to stop to enable them to be checked at the end
                // of this method.
                threadsToStop.add(thread);
            }
        }
    }
    // If thread stopping is enabled, threads should have been stopped above
    // when the executor was shut down or the thread was interrupted but
    // that depends on the thread correctly handling the interrupt. Check
    // each thread and if any are still running give all threads up to a
    // total of 2 seconds to shutdown.
    int count = 0;
    for (Thread t : threadsToStop) {
        while (t.isAlive() && count < 100) {
            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                // Quit the while loop
                break;
            }
            count++;
        }
        if (t.isAlive()) {
            // This method is deprecated and for good reason. This is
            // very risky code but is the only option at this point.
            // A *very* good reason for apps to do this clean-up
            // themselves.
            t.stop();
        }
    }
}