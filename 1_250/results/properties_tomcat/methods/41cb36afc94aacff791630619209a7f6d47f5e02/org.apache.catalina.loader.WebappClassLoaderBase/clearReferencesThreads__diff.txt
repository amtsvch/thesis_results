// thread.stop()                                                                                       // thread.stop()                                                                                    
@SuppressWarnings("deprecation")                                                                       @SuppressWarnings("deprecation")                                                                    
private void clearReferencesThreads() {                                                                private void clearReferencesThreads() {                                                             
Thread[] threads = getThreads();                                                                       Thread[] threads = getThreads();                                                                    
List&lt;Thread&gt; threadsToStop = new ArrayList&lt;&gt;();                                            List&lt;Thread&gt; threadsToStop = new ArrayList&lt;&gt;();                                         
// Iterate over the set of threads                                                                     // Iterate over the set of threads                                                                  
for (Thread thread : threads) {                                                                        for (Thread thread : threads) {                                                                     
if (thread != null) {                                                                                  if (thread != null) {                                                                               
ClassLoader ccl = thread.getContextClassLoader();                                                      ClassLoader ccl = thread.getContextClassLoader();                                                   
if (ccl == this) {                                                                                     if (ccl == this) {                                                                                  
// Don't warn about this thread                                                                        // Don't warn about this thread                                                                     
if (thread == Thread.currentThread()) {                                                                if (thread == Thread.currentThread()) {                                                             
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
final String threadName = thread.getName();                                                            final String threadName = thread.getName();                                                         
// JVM controlled threads                                                                              // JVM controlled threads                                                                           
ThreadGroup tg = thread.getThreadGroup();                                                              ThreadGroup tg = thread.getThreadGroup();                                                           
if (tg != null && JVM_THREAD_GROUP_NAMES.contains(tg.getName())) {                                     if (tg != null && JVM_THREAD_GROUP_NAMES.contains(tg.getName())) {                                  
// HttpClient keep-alive threads                                                                       // HttpClient keep-alive threads                                                                    
if (clearReferencesHttpClientKeepAliveThread && threadName.equals("Keep-Alive-Timer")) {               if (clearReferencesHttpClientKeepAliveThread && threadName.equals("Keep-Alive-Timer")) {            
thread.setContextClassLoader(parent);                                                                  thread.setContextClassLoader(parent);                                                               
log.debug(sm.getString("webappClassLoader.checkThreadsHttpClient"));                                   log.debug(sm.getString("webappClassLoader.checkThreadsHttpClient"));                                
}                                                                                                      }                                                                                                   
// Don't warn about remaining JVM controlled threads                                                   // Don't warn about remaining JVM controlled threads                                                
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// Skip threads that have already died                                                                 // Skip threads that have already died                                                              
if (!thread.isAlive()) {                                                                               if (!thread.isAlive()) {                                                                            
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// TimerThread can be stopped safely so treat separately                                               // TimerThread can be stopped safely so treat separately                                            
// "java.util.TimerThread" in Sun/Oracle JDK                                                           // "java.util.TimerThread" in Sun/Oracle JDK                                                        
// "java.util.Timer$TimerImpl" in Apache Harmony and in IBM JDK                                        // "java.util.Timer$TimerImpl" in Apache Harmony and in IBM JDK                                     
if (thread.getClass().getName().startsWith("java.util.Timer") && clearReferencesStopTimerThreads) {    if (thread.getClass().getName().startsWith("java.util.Timer") && clearReferencesStopTimerThreads) { 
clearReferencesStopTimerThread(thread);                                                                clearReferencesStopTimerThread(thread);                                                             
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (isRequestThread(thread)) {                                                                         if (isRequestThread(thread)) {                                                                      
log.warn(sm.getString("webappClassLoader.stackTraceRequestThread", getContextName(), threadName, get   log.warn(sm.getString("webappClassLoader.stackTraceRequestThread", getContextName(), threadName, get
} else {                                                                                               } else {                                                                                            
log.warn(sm.getString("webappClassLoader.stackTrace", getContextName(), threadName, getStackTrace(th   log.warn(sm.getString("webappClassLoader.stackTrace", getContextName(), threadName, getStackTrace(th
}                                                                                                      }                                                                                                   
// Don't try and stop the threads unless explicitly                                                    // Don't try and stop the threads unless explicitly                                                 
// configured to do so                                                                                 // configured to do so                                                                              
if (!clearReferencesStopThreads) {                                                                     if (!clearReferencesStopThreads) {                                                                  
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
// If the thread has been started via an executor, try                                                 // If the thread has been started via an executor, try                                              
// shutting down the executor                                                                          // shutting down the executor                                                                       
boolean usingExecutor = false;                                                                         boolean usingExecutor = false;                                                                      
try {                                                                                                  try {                                                                                               
// Runnable wrapped by Thread                                                                          // Runnable wrapped by Thread                                                                       
// "target" in Sun/Oracle JDK                                                                          // "target" in Sun/Oracle JDK                                                                       
// "runnable" in IBM JDK                                                                               // "runnable" in IBM JDK                                                                            
// "action" in Apache Harmony                                                                          // "action" in Apache Harmony                                                                       
Object target = null;                                                                                  Object target = null;                                                                               
for (String fieldName : new String[] { "target", "runnable", "action" }) {                             for (String fieldName : new String[] { "target", "runnable", "action" }) {                          
try {                                                                                                  try {                                                                                               
Field targetField = thread.getClass().getDeclaredField(fieldName);                                     Field targetField = thread.getClass().getDeclaredField(fieldName);                                  
targetField.setAccessible(true);                                                                       targetField.setAccessible(true);                                                                    
target = targetField.get(thread);                                                                      target = targetField.get(thread);                                                                   
break;                                                                                                 break;                                                                                              
} catch (NoSuchFieldException nfe) {                                                                   } catch (NoSuchFieldException nfe) {                                                                
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// "java.util.concurrent" code is in public domain,                                                    // "java.util.concurrent" code is in public domain,                                                 
// so all implementations are similar                                                                  // so all implementations are similar                                                               
if (target != null && target.getClass().getCanonicalName() != null && target.getClass().getCanonical   if (target != null && target.getClass().getCanonicalName() != null && target.getClass().getCanonical
Field executorField = target.getClass().getDeclaredField("this$0");                                    Field executorField = target.getClass().getDeclaredField("this$0");                                 
executorField.setAccessible(true);                                                                     executorField.setAccessible(true);                                                                  
Object executor = executorField.get(target);                                                           Object executor = executorField.get(target);                                                        
if (executor instanceof ThreadPoolExecutor) {                                                          if (executor instanceof ThreadPoolExecutor) {                                                       
((ThreadPoolExecutor) executor).shutdownNow();                                                         ((ThreadPoolExecutor) executor).shutdownNow();                                                      
usingExecutor = true;                                                                                  usingExecutor = true;                                                                               
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (/*SecurityException |*/                                                                     | } catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessExceptio
NoSuchFieldException | /*IllegalArgumentException |*/                                                |                                                                                                     
IllegalAccessException | RuntimeException e) {                                                       |                                                                                                     
// FIXME: InaccessibleObjectException is only available in Java 9+,                                  |                                                                                                     
// swapped for RuntimeException for now                                                              |                                                                                                     
log.warn(sm.getString("webappClassLoader.stopThreadFail", thread.getName(), getContextName()), e);     log.warn(sm.getString("webappClassLoader.stopThreadFail", thread.getName(), getContextName()), e);  
}                                                                                                      }                                                                                                   
// Stopping an executor automatically interrupts the                                                   // Stopping an executor automatically interrupts the                                                
// associated threads. For non-executor threads, interrupt                                             // associated threads. For non-executor threads, interrupt                                          
// them here.                                                                                          // them here.                                                                                       
if (!usingExecutor && !thread.isInterrupted()) {                                                       if (!usingExecutor && !thread.isInterrupted()) {                                                    
thread.interrupt();                                                                                    thread.interrupt();                                                                                 
}                                                                                                      }                                                                                                   
// Threads are expected to take a short time to stop after                                             // Threads are expected to take a short time to stop after                                          
// being interrupted. Make a note of all threads that are                                              // being interrupted. Make a note of all threads that are                                           
// expected to stop to enable them to be checked at the end                                            // expected to stop to enable them to be checked at the end                                         
// of this method.                                                                                     // of this method.                                                                                  
threadsToStop.add(thread);                                                                             threadsToStop.add(thread);                                                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
// If thread stopping is enabled, threads should have been stopped above                               // If thread stopping is enabled, threads should have been stopped above                            
// when the executor was shut down or the thread was interrupted but                                   // when the executor was shut down or the thread was interrupted but                                
// that depends on the thread correctly handling the interrupt. Check                                  // that depends on the thread correctly handling the interrupt. Check                               
// each thread and if any are still running give all threads up to a                                   // each thread and if any are still running give all threads up to a                                
// total of 2 seconds to shutdown.                                                                     // total of 2 seconds to shutdown.                                                                  
int count = 0;                                                                                         int count = 0;                                                                                      
for (Thread t : threadsToStop) {                                                                       for (Thread t : threadsToStop) {                                                                    
while (t.isAlive() && count &lt; 100) {                                                                while (t.isAlive() && count &lt; 100) {                                                             
try {                                                                                                  try {                                                                                               
Thread.sleep(20);                                                                                      Thread.sleep(20);                                                                                   
} catch (InterruptedException e) {                                                                     } catch (InterruptedException e) {                                                                  
// Quit the while loop                                                                                 // Quit the while loop                                                                              
break;                                                                                                 break;                                                                                              
}                                                                                                      }                                                                                                   
count++;                                                                                               count++;                                                                                            
}                                                                                                      }                                                                                                   
if (t.isAlive()) {                                                                                     if (t.isAlive()) {                                                                                  
// This method is deprecated and for good reason. This is                                              // This method is deprecated and for good reason. This is                                           
// very risky code but is the only option at this point.                                               // very risky code but is the only option at this point.                                            
// A *very* good reason for apps to do this clean-up                                                   // A *very* good reason for apps to do this clean-up                                                
// themselves.                                                                                         // themselves.                                                                                      
t.stop();                                                                                              t.stop();                                                                                           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
