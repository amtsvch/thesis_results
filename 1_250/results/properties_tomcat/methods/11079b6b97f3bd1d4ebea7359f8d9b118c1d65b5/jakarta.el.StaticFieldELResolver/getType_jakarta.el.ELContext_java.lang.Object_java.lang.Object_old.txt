@Override
public Class<?> getType(ELContext context, Object base, Object property) {
    Objects.requireNonNull(context);
    if (base instanceof ELClass && property instanceof String) {
        context.setPropertyResolved(base, property);
        Class<?> clazz = ((ELClass) base).getKlass();
        String name = (String) property;
        Exception exception = null;
        try {
            Field field = clazz.getField(name);
            int modifiers = field.getModifiers();
            if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && field.canAccess(field)) {
                return field.getType();
            }
        } catch (IllegalArgumentException | NoSuchFieldException | SecurityException e) {
            exception = e;
        }
        String msg = Util.message(context, "staticFieldELResolver.notFound", name, clazz.getName());
        if (exception == null) {
            throw new PropertyNotFoundException(msg);
        } else {
            throw new PropertyNotFoundException(msg, exception);
        }
    }
    return null;
}