protected void doScanClassPath(JarScanType scanType, ServletContext context, JarScannerCallback call   protected void doScanClassPath(JarScanType scanType, ServletContext context, JarScannerCallback call
if (log.isTraceEnabled()) {                                                                            if (log.isTraceEnabled()) {                                                                         
log.trace(sm.getString("jarScan.classloaderStart"));                                                   log.trace(sm.getString("jarScan.classloaderStart"));                                                
}                                                                                                      }                                                                                                   
ClassLoader stopLoader = null;                                                                         ClassLoader stopLoader = null;                                                                      
if (!isScanBootstrapClassPath()) {                                                                     if (!isScanBootstrapClassPath()) {                                                                  
// Stop when we reach the bootstrap class loader                                                       // Stop when we reach the bootstrap class loader                                                    
stopLoader = ClassLoader.getSystemClassLoader().getParent();                                           stopLoader = ClassLoader.getSystemClassLoader().getParent();                                        
}                                                                                                      }                                                                                                   
ClassLoader classLoader = context.getClassLoader();                                                    ClassLoader classLoader = context.getClassLoader();                                                 
// JARs are treated as application provided until the common class                                     // JARs are treated as application provided until the common class                                  
// loader is reached.                                                                                  // loader is reached.                                                                               
boolean isWebapp = true;                                                                               boolean isWebapp = true;                                                                            
// Use a Deque so URLs can be removed as they are processed                                            // Use a Deque so URLs can be removed as they are processed                                         
// and new URLs can be added as they are discovered during                                             // and new URLs can be added as they are discovered during                                          
// processing.                                                                                         // processing.                                                                                      
Deque&lt;URL&gt; classPathUrlsToProcess = new LinkedList&lt;&gt;();                                    Deque&lt;URL&gt; classPathUrlsToProcess = new LinkedList&lt;&gt;();                                 
while (classLoader != null && classLoader != stopLoader) {                                             while (classLoader != null && classLoader != stopLoader) {                                          
if (classLoader instanceof URLClassLoader) {                                                           if (classLoader instanceof URLClassLoader) {                                                        
if (isWebapp) {                                                                                        if (isWebapp) {                                                                                     
isWebapp = isWebappClassLoader(classLoader);                                                           isWebapp = isWebappClassLoader(classLoader);                                                        
}                                                                                                      }                                                                                                   
classPathUrlsToProcess.addAll(Arrays.asList(((URLClassLoader) classLoader).getURLs()));                classPathUrlsToProcess.addAll(Arrays.asList(((URLClassLoader) classLoader).getURLs()));             
processURLs(scanType, callback, processedURLs, isWebapp, classPathUrlsToProcess);                      processURLs(scanType, callback, processedURLs, isWebapp, classPathUrlsToProcess);                   
}                                                                                                      }                                                                                                   
classLoader = classLoader.getParent();                                                                 classLoader = classLoader.getParent();                                                              
}                                                                                                      }                                                                                                   
if (JreCompat.isJre9Available()) {                                                                   |                                                                                                     
// The application and platform class loaders are not                                                  // The application and platform class loaders are not                                               
// instances of URLClassLoader. Use the class path in this                                             // instances of URLClassLoader. Use the class path in this                                          
// case.                                                                                               // case.                                                                                            
addClassPath(classPathUrlsToProcess);                                                                  addClassPath(classPathUrlsToProcess);                                                               
// Also add any modules                                                                                // Also add any modules                                                                             
JreCompat.getInstance().addBootModulePath(classPathUrlsToProcess);                                   | for (ResolvedModule module : ModuleLayer.boot().configuration().modules()) {                        
processURLs(scanType, callback, processedURLs, false, classPathUrlsToProcess);                       | Optional&lt;URI&gt; uri = module.reference().location();                                            
                                                                                                     | if (uri.isPresent()) {                                                                              
                                                                                                     | try {                                                                                               
                                                                                                     | classPathUrlsToProcess.add(uri.get().toURL());                                                      
                                                                                                     | } catch (MalformedURLException e) {                                                                 
                                                                                                     | log.warn(sm.getString("jarScan.invalidModuleUri", uri), e);                                         
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
                                                                                                     | }                                                                                                   
                                                                                                     | processURLs(scanType, callback, processedURLs, false, classPathUrlsToProcess);                      
                                                                                                     | }                                                                                                   
